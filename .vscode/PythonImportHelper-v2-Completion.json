[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "exit",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "gnome_name",
        "importPath": "gnome_basic",
        "description": "gnome_basic",
        "isExtraImport": true,
        "detail": "gnome_basic",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "demo_variable_imported_from_module",
        "importPath": "module_example",
        "description": "module_example",
        "isExtraImport": true,
        "detail": "module_example",
        "documentation": {}
    },
    {
        "label": "ObservationSpace",
        "kind": 6,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "class ObservationSpace:\n  Game_Area = [[0,0,0,0,0],\n                [0,0,0,0,0],\n                [0,0,1,0,0],\n                [0,0,0,0,0],\n                [0,0,0,0,0]]\n  Game_Name = \"GnomansLand\"\n  #Constructor\n  def __init__(self,Game_Name):\n      \"\"\"INITIALIZER",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "width = 800\nheight = 400\nscreen = pygame.display.set_mode((width,height)) # must be tuple\npygame.display.set_caption(\"Gnoman's Land\")\n#frame rate\n#maximum frame rate with clock\nclock = pygame.time.Clock() # capital c is important here\nw = 100\nh = 200\n#this creates a surface (unattached)",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "height = 400\nscreen = pygame.display.set_mode((width,height)) # must be tuple\npygame.display.set_caption(\"Gnoman's Land\")\n#frame rate\n#maximum frame rate with clock\nclock = pygame.time.Clock() # capital c is important here\nw = 100\nh = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "screen = pygame.display.set_mode((width,height)) # must be tuple\npygame.display.set_caption(\"Gnoman's Land\")\n#frame rate\n#maximum frame rate with clock\nclock = pygame.time.Clock() # capital c is important here\nw = 100\nh = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "clock = pygame.time.Clock() # capital c is important here\nw = 100\nh = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "w = 100\nh = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window\n      pygame.quit() # opposite of pygame.init... once this is run we cannot display anything else anymore",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "h = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window\n      pygame.quit() # opposite of pygame.init... once this is run we cannot display anything else anymore\n      exit() # will exit the while true loop and not hit line 59",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "test_surface",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "test_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window\n      pygame.quit() # opposite of pygame.init... once this is run we cannot display anything else anymore\n      exit() # will exit the while true loop and not hit line 59\n  position = (0,0)\n  screen.blit(test_surface,position)",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "#!test_surface",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window\n      pygame.quit() # opposite of pygame.init... once this is run we cannot display anything else anymore\n      exit() # will exit the while true loop and not hit line 59\n  position = (0,0)\n  screen.blit(test_surface,position)\n  #will run forever",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "Agent",
        "kind": 6,
        "importPath": "old_files.src.gnome_basic",
        "description": "old_files.src.gnome_basic",
        "peekOfCode": "class Agent:\n    voice = \"Hey... I'm Greg...\" # an example of something the agent could say.\n    health = 100 # setting their initial health to 100.\n    mood = 0 # the agent has absolutely no mood at all when they are born.\n    interest = 0 # starts with no interest at all in features within his/her/their action space.\n    strength = 50 # ranges from 1 to 100 and will change based on interactions with environment.\n    agent_name = \"Greg\" # the name of the agent (will change)\n    xlocation = 2 # ranges\n    # call gamearea len(gamearea)//2 gives the central point if it is an odd number of cols or rows\n    ylocation = 2 # ranges",
        "detail": "old_files.src.gnome_basic",
        "documentation": {}
    },
    {
        "label": "Pet",
        "kind": 6,
        "importPath": "old_files.src.main",
        "description": "old_files.src.main",
        "peekOfCode": "class Pet:\n    '''Docstring'''\n    def __init__(self, name: str, animal: str):\n        '''Docstring'''\n        self.name = name\n        self.animal = animal\n    def who_am_i(self: \"Pet\") -> None:\n        '''Docstring'''\n        print(\"\\n\"+self.name+\" is a \"+self.animal+\"\\n\\n\")\npet1: Pet = Pet(\"Scooby\", \"Dog\")",
        "detail": "old_files.src.main",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "class State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False\n        self.determine = DETERMINISTIC\n    def giveReward(self):\n        if self.state == WIN_STATE:\n            return 1",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "Agent",
        "kind": 6,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "class Agent:\n    def __init__(self):\n        self.states = []\n        self.actions = [\"up\", \"down\", \"left\", \"right\"]\n        self.State = State()\n        self.lr = 0.2\n        self.exp_rate = 0.3\n        # initial state reward\n        self.state_values = {}\n        for i in range(BOARD_ROWS):",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "BOARD_ROWS",
        "kind": 5,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "BOARD_ROWS = 100\nBOARD_COLS = 100\nWIN_STATE = (27, 26)\nLOSE_STATE = (27, 25)\nSTART = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "BOARD_COLS",
        "kind": 5,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "BOARD_COLS = 100\nWIN_STATE = (27, 26)\nLOSE_STATE = (27, 25)\nSTART = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "WIN_STATE",
        "kind": 5,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "WIN_STATE = (27, 26)\nLOSE_STATE = (27, 25)\nSTART = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "LOSE_STATE",
        "kind": 5,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "LOSE_STATE = (27, 25)\nSTART = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False\n        self.determine = DETERMINISTIC",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "START",
        "kind": 5,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "START = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False\n        self.determine = DETERMINISTIC\n    def giveReward(self):",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "DETERMINISTIC",
        "kind": 5,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "DETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False\n        self.determine = DETERMINISTIC\n    def giveReward(self):\n        if self.state == WIN_STATE:",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "old_files.tests.test_sth",
        "description": "old_files.tests.test_sth",
        "peekOfCode": "class MyClass:\n    x = 5\np1: MyClass = MyClass()\nprint(p1.x)\n#\nx: int = 1\ndef test_1() -> None:\n    assert 1 == 1\ndef test_2() -> None:\n    assert demo_variable_imported_from_module == \"Hello! I come from the module 'module_example.py'\"",
        "detail": "old_files.tests.test_sth",
        "documentation": {}
    },
    {
        "label": "test_1",
        "kind": 2,
        "importPath": "old_files.tests.test_sth",
        "description": "old_files.tests.test_sth",
        "peekOfCode": "def test_1() -> None:\n    assert 1 == 1\ndef test_2() -> None:\n    assert demo_variable_imported_from_module == \"Hello! I come from the module 'module_example.py'\"",
        "detail": "old_files.tests.test_sth",
        "documentation": {}
    },
    {
        "label": "test_2",
        "kind": 2,
        "importPath": "old_files.tests.test_sth",
        "description": "old_files.tests.test_sth",
        "peekOfCode": "def test_2() -> None:\n    assert demo_variable_imported_from_module == \"Hello! I come from the module 'module_example.py'\"",
        "detail": "old_files.tests.test_sth",
        "documentation": {}
    },
    {
        "label": "SCREEN_WIDTH",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "SCREEN_WIDTH = 100\nSCREEN_HEIGHT = 100\npygame.init()\n# Create the screen surface and set the title.\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Gnoman's Land\")\n# Create a dictionary of colors for the different biomes in the game world.\nbiome_colors = {\n    \"forest\": (34, 139, 34),  # Dark green\n    \"lake\": (0, 191, 255),  # Deep sky blue",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "SCREEN_HEIGHT",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "SCREEN_HEIGHT = 100\npygame.init()\n# Create the screen surface and set the title.\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Gnoman's Land\")\n# Create a dictionary of colors for the different biomes in the game world.\nbiome_colors = {\n    \"forest\": (34, 139, 34),  # Dark green\n    \"lake\": (0, 191, 255),  # Deep sky blue\n    \"grassland\": (124, 252, 0),  # Lawn green",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Gnoman's Land\")\n# Create a dictionary of colors for the different biomes in the game world.\nbiome_colors = {\n    \"forest\": (34, 139, 34),  # Dark green\n    \"lake\": (0, 191, 255),  # Deep sky blue\n    \"grassland\": (124, 252, 0),  # Lawn green\n    \"rocky_dirt\": (255, 222, 173),  # Navajo white\n    \"mountains\": (139, 69, 19)  # Saddle brown\n}",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "biome_colors",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "biome_colors = {\n    \"forest\": (34, 139, 34),  # Dark green\n    \"lake\": (0, 191, 255),  # Deep sky blue\n    \"grassland\": (124, 252, 0),  # Lawn green\n    \"rocky_dirt\": (255, 222, 173),  # Navajo white\n    \"mountains\": (139, 69, 19)  # Saddle brown\n}\n# Create a 2D array of tiles representing the game world.\ntiles = []\nfor i in range(SCREEN_WIDTH):",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "tiles",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "tiles = []\nfor i in range(SCREEN_WIDTH):\n    row = []\n    for j in range(SCREEN_HEIGHT):\n        # Choose a random biome for each tile based on the probability distribution of biomes in the game world.\n        biome = choose_biome()\n        row.append(biome)\n    tiles.append(row)\n# Draw the game world to the screen using the tile array and the biome colors.\nfor i in range(SCREEN_WIDTH):",
        "detail": "src.main",
        "documentation": {}
    }
]