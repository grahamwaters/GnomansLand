[
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "gym",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gym",
        "description": "gym",
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "core",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "Env",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "Env",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "Env",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "Env",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "Env",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "ActionWrapper",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "ObservationWrapper",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "ObservationWrapper",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "ObservationWrapper",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "ObservationWrapper",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "ObservationWrapper",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "ObservationWrapper",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "ObservationWrapper",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "ObservationWrapper",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "RewardWrapper",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "envs",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "envs",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "envs",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "envs",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "envs",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "core",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "gym",
        "description": "gym",
        "isExtraImport": true,
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "UnityToGymWrapper",
        "importPath": "gym_unity.envs",
        "description": "gym_unity.envs",
        "isExtraImport": true,
        "detail": "gym_unity.envs",
        "documentation": {}
    },
    {
        "label": "UnityToGymWrapper",
        "importPath": "gym_unity.envs",
        "description": "gym_unity.envs",
        "isExtraImport": true,
        "detail": "gym_unity.envs",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "TerminalSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorMapping",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionTuple",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DimensionProperty",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationType",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "TerminalSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionTuple",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationType",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionTuple",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BaseEnv",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "TerminalSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorMapping",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionTuple",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BaseEnv",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "_ActionTupleBase",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionTuple",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationType",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DimensionProperty",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "AgentId",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionTuple",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionStep",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "TerminalSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "TerminalStep",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "AgentId",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "GroupId",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "TerminalSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorName",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BaseEnv",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BaseEnv",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorName",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BaseEnv",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorName",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionTuple",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BaseEnv",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BaseEnv",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "TerminalSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionTuple",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "TerminalSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionTuple",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "TerminalSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BaseEnv",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "TerminalSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionTuple",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorName",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "AgentId",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorMapping",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DimensionProperty",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "TerminalSteps",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationType",
        "importPath": "mlagents_envs.base_env",
        "description": "mlagents_envs.base_env",
        "isExtraImport": true,
        "detail": "mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "ppo_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "sac_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "poca_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "curiosity_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "gail_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    ppo_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "curiosity_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "gail_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "# noqa: F401\n    sac_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "curiosity_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "ppo_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "sac_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "poca_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "ppo_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "ppo_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "ppo_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "poca_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "sac_dummy_config",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "importPath": "mlagents.trainers.tests.dummy_config",
        "description": "mlagents.trainers.tests.dummy_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "platform",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "platform",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "platform",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "platform",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "platform",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "exit",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "PEP420PackageFinder",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "install",
        "importPath": "setuptools.command.install",
        "description": "setuptools.command.install",
        "isExtraImport": true,
        "detail": "setuptools.command.install",
        "documentation": {}
    },
    {
        "label": "install",
        "importPath": "setuptools.command.install",
        "description": "setuptools.command.install",
        "isExtraImport": true,
        "detail": "setuptools.command.install",
        "documentation": {}
    },
    {
        "label": "install",
        "importPath": "setuptools.command.install",
        "description": "setuptools.command.install",
        "isExtraImport": true,
        "detail": "setuptools.command.install",
        "documentation": {}
    },
    {
        "label": "gym_unity",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gym_unity",
        "description": "gym_unity",
        "detail": "gym_unity",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Deque",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Deque",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "DefaultDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Deque",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BinaryIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "DefaultDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TextIO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "DefaultDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Collection",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Pattern",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "SupportsFloat",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "SupportsFloat",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "SupportsFloat",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "StatsWriter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "TensorboardWriter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "GaugeWriter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "ConsoleWriter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsPropertyType",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsReporter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsWriter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsSummary",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsReporter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsSummary",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsReporter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsReporter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "TensorboardWriter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsSummary",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "GaugeWriter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "ConsoleWriter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsPropertyType",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsAggregationMethod",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsReporter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsPropertyType",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsReporter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsReporter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsReporter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsWriter",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsSummary",
        "importPath": "mlagents.trainers.stats",
        "description": "mlagents.trainers.stats",
        "isExtraImport": true,
        "detail": "mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "mlagents_envs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mlagents_envs",
        "description": "mlagents_envs",
        "detail": "mlagents_envs",
        "documentation": {}
    },
    {
        "label": "logging_util",
        "importPath": "mlagents_envs",
        "description": "mlagents_envs",
        "isExtraImport": true,
        "detail": "mlagents_envs",
        "documentation": {}
    },
    {
        "label": "logging_util",
        "importPath": "mlagents_envs",
        "description": "mlagents_envs",
        "isExtraImport": true,
        "detail": "mlagents_envs",
        "documentation": {}
    },
    {
        "label": "logging_util",
        "importPath": "mlagents_envs",
        "description": "mlagents_envs",
        "isExtraImport": true,
        "detail": "mlagents_envs",
        "documentation": {}
    },
    {
        "label": "logging_util",
        "importPath": "mlagents_envs",
        "description": "mlagents_envs",
        "isExtraImport": true,
        "detail": "mlagents_envs",
        "documentation": {}
    },
    {
        "label": "logging_util",
        "importPath": "mlagents_envs",
        "description": "mlagents_envs",
        "isExtraImport": true,
        "detail": "mlagents_envs",
        "documentation": {}
    },
    {
        "label": "logging_util",
        "importPath": "mlagents_envs",
        "description": "mlagents_envs",
        "isExtraImport": true,
        "detail": "mlagents_envs",
        "documentation": {}
    },
    {
        "label": "logging_util",
        "importPath": "mlagents_envs",
        "description": "mlagents_envs",
        "isExtraImport": true,
        "detail": "mlagents_envs",
        "documentation": {}
    },
    {
        "label": "logging_util",
        "importPath": "mlagents_envs",
        "description": "mlagents_envs",
        "isExtraImport": true,
        "detail": "mlagents_envs",
        "documentation": {}
    },
    {
        "label": "timers",
        "importPath": "mlagents_envs",
        "description": "mlagents_envs",
        "isExtraImport": true,
        "detail": "mlagents_envs",
        "documentation": {}
    },
    {
        "label": "env_utils",
        "importPath": "mlagents_envs",
        "description": "mlagents_envs",
        "isExtraImport": true,
        "detail": "mlagents_envs",
        "documentation": {}
    },
    {
        "label": "ML_AGENTS_STATS_WRITER",
        "importPath": "mlagents.plugins",
        "description": "mlagents.plugins",
        "isExtraImport": true,
        "detail": "mlagents.plugins",
        "documentation": {}
    },
    {
        "label": "ML_AGENTS_STATS_WRITER",
        "importPath": "mlagents.plugins",
        "description": "mlagents.plugins",
        "isExtraImport": true,
        "detail": "mlagents.plugins",
        "documentation": {}
    },
    {
        "label": "ML_AGENTS_STATS_WRITER",
        "importPath": "mlagents.plugins",
        "description": "mlagents.plugins",
        "isExtraImport": true,
        "detail": "mlagents.plugins",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TorchSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SerializationSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "POCASettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "POCASettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "PPOSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "PPOSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SACSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SACSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "EncoderType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "PPOSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SACSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "POCASettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "CuriositySettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "GAILSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RNDSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "PPOSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SACSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "POCASettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "CuriositySettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "GAILSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RNDSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "BehavioralCloningSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SelfPlaySettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SelfPlaySettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "BehavioralCloningSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "GAILSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "EncoderType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ConditioningType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "EncoderType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ScheduleType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "POCASettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "PPOSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SACSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "GAILSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "CuriositySettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ScheduleType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "PPOSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SACSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "UniformSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "GaussianSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ConstantSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "CompletionCriteriaSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "PPOSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SACSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "CuriositySettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "EnvironmentSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "EnvironmentParameterSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ConstantSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "UniformSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "GaussianSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "MultiRangeUniformSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "deep_update_dict",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "strict_to_cls",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ScheduleType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TorchSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "BehavioralCloningSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ScheduleType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "CuriositySettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "GAILSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RNDSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SerializationSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "EncoderType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ConditioningType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "EncoderType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ScheduleType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "EnvironmentParameterSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ParameterRandomizationSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ParameterRandomizationSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ParameterRandomizationSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerType",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "importPath": "mlagents.trainers.settings",
        "description": "mlagents.trainers.settings",
        "isExtraImport": true,
        "detail": "mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "LooseVersion",
        "importPath": "distutils.version",
        "description": "distutils.version",
        "isExtraImport": true,
        "detail": "distutils.version",
        "documentation": {}
    },
    {
        "label": "StrictVersion",
        "importPath": "distutils.version",
        "description": "distutils.version",
        "isExtraImport": true,
        "detail": "distutils.version",
        "documentation": {}
    },
    {
        "label": "LooseVersion",
        "importPath": "distutils.version",
        "description": "distutils.version",
        "isExtraImport": true,
        "detail": "distutils.version",
        "documentation": {}
    },
    {
        "label": "StrictVersion",
        "importPath": "distutils.version",
        "description": "distutils.version",
        "isExtraImport": true,
        "detail": "distutils.version",
        "documentation": {}
    },
    {
        "label": "pkg_resources",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pkg_resources",
        "description": "pkg_resources",
        "detail": "pkg_resources",
        "documentation": {}
    },
    {
        "label": "cpu_utils",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "default_device",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "default_device",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "default_device",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "default_device",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "default_device",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "set_torch_config",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "default_device",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "default_device",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "default_device",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "nn",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "torch",
        "importPath": "mlagents.torch_utils",
        "description": "mlagents.torch_utils",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "WARNING",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "set_log_level",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "INFO",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "FATAL",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "CRITICAL",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "importPath": "mlagents_envs.logging_util",
        "description": "mlagents_envs.logging_util",
        "isExtraImport": true,
        "detail": "mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "GhostTrainer",
        "importPath": "mlagents.trainers.ghost.trainer",
        "description": "mlagents.trainers.ghost.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.ghost.trainer",
        "documentation": {}
    },
    {
        "label": "GhostTrainer",
        "importPath": "mlagents.trainers.ghost.trainer",
        "description": "mlagents.trainers.ghost.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.ghost.trainer",
        "documentation": {}
    },
    {
        "label": "GhostTrainer",
        "importPath": "mlagents.trainers.ghost.trainer",
        "description": "mlagents.trainers.ghost.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.ghost.trainer",
        "documentation": {}
    },
    {
        "label": "Policy",
        "importPath": "mlagents.trainers.policy",
        "description": "mlagents.trainers.policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy",
        "documentation": {}
    },
    {
        "label": "Policy",
        "importPath": "mlagents.trainers.policy",
        "description": "mlagents.trainers.policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy",
        "documentation": {}
    },
    {
        "label": "Policy",
        "importPath": "mlagents.trainers.policy",
        "description": "mlagents.trainers.policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy",
        "documentation": {}
    },
    {
        "label": "Policy",
        "importPath": "mlagents.trainers.policy",
        "description": "mlagents.trainers.policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy",
        "documentation": {}
    },
    {
        "label": "Policy",
        "importPath": "mlagents.trainers.policy",
        "description": "mlagents.trainers.policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy",
        "documentation": {}
    },
    {
        "label": "Policy",
        "importPath": "mlagents.trainers.policy",
        "description": "mlagents.trainers.policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy",
        "documentation": {}
    },
    {
        "label": "Policy",
        "importPath": "mlagents.trainers.policy",
        "description": "mlagents.trainers.policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy",
        "documentation": {}
    },
    {
        "label": "Policy",
        "importPath": "mlagents.trainers.policy",
        "description": "mlagents.trainers.policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy",
        "documentation": {}
    },
    {
        "label": "Trainer",
        "importPath": "mlagents.trainers.trainer",
        "description": "mlagents.trainers.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer",
        "documentation": {}
    },
    {
        "label": "TrainerFactory",
        "importPath": "mlagents.trainers.trainer",
        "description": "mlagents.trainers.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer",
        "documentation": {}
    },
    {
        "label": "TrainerFactory",
        "importPath": "mlagents.trainers.trainer",
        "description": "mlagents.trainers.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer",
        "documentation": {}
    },
    {
        "label": "TrainerFactory",
        "importPath": "mlagents.trainers.trainer",
        "description": "mlagents.trainers.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer",
        "documentation": {}
    },
    {
        "label": "Trainer",
        "importPath": "mlagents.trainers.trainer",
        "description": "mlagents.trainers.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer",
        "documentation": {}
    },
    {
        "label": "Trainer",
        "importPath": "mlagents.trainers.trainer",
        "description": "mlagents.trainers.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer",
        "documentation": {}
    },
    {
        "label": "TrainerFactory",
        "importPath": "mlagents.trainers.trainer",
        "description": "mlagents.trainers.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer",
        "documentation": {}
    },
    {
        "label": "Trainer",
        "importPath": "mlagents.trainers.trainer",
        "description": "mlagents.trainers.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer",
        "documentation": {}
    },
    {
        "label": "TrainerFactory",
        "importPath": "mlagents.trainers.trainer",
        "description": "mlagents.trainers.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer",
        "documentation": {}
    },
    {
        "label": "Trajectory",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "GroupObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "Trajectory",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "Trajectory",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "Trajectory",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "AgentStatus",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "Trajectory",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "AgentExperience",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "Trajectory",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "GroupObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "Trajectory",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "Trajectory",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "AgentStatus",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "Trajectory",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "AgentExperience",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "importPath": "mlagents.trainers.trajectory",
        "description": "mlagents.trainers.trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "AgentManagerQueue",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManagerQueue",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManagerQueue",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentProcessor",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManager",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManagerQueue",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManagerQueue",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManagerQueue",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManagerQueue",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManagerQueue",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManagerQueue",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManager",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManagerQueue",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManager",
        "importPath": "mlagents.trainers.agent_processor",
        "description": "mlagents.trainers.agent_processor",
        "isExtraImport": true,
        "detail": "mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "BehaviorIdentifiers",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "create_name_behavior_id",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "BehaviorIdentifiers",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "GlobalAgentId",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "get_global_agent_id",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "BehaviorIdentifiers",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "BehaviorIdentifiers",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "BehaviorIdentifiers",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "BehaviorIdentifiers",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "get_global_agent_id",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "BehaviorIdentifiers",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "BehaviorIdentifiers",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "BehaviorIdentifiers",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "get_global_agent_id",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "get_global_group_id",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "GlobalAgentId",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "GlobalGroupId",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "BehaviorIdentifiers",
        "importPath": "mlagents.trainers.behavior_id_utils",
        "description": "mlagents.trainers.behavior_id_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "GlobalTrainingStatus",
        "importPath": "mlagents.trainers.training_status",
        "description": "mlagents.trainers.training_status",
        "isExtraImport": true,
        "detail": "mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "StatusType",
        "importPath": "mlagents.trainers.training_status",
        "description": "mlagents.trainers.training_status",
        "isExtraImport": true,
        "detail": "mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "GlobalTrainingStatus",
        "importPath": "mlagents.trainers.training_status",
        "description": "mlagents.trainers.training_status",
        "isExtraImport": true,
        "detail": "mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "StatusType",
        "importPath": "mlagents.trainers.training_status",
        "description": "mlagents.trainers.training_status",
        "isExtraImport": true,
        "detail": "mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "StatusType",
        "importPath": "mlagents.trainers.training_status",
        "description": "mlagents.trainers.training_status",
        "isExtraImport": true,
        "detail": "mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "StatusMetaData",
        "importPath": "mlagents.trainers.training_status",
        "description": "mlagents.trainers.training_status",
        "isExtraImport": true,
        "detail": "mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "GlobalTrainingStatus",
        "importPath": "mlagents.trainers.training_status",
        "description": "mlagents.trainers.training_status",
        "isExtraImport": true,
        "detail": "mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "GlobalTrainingStatus",
        "importPath": "mlagents.trainers.training_status",
        "description": "mlagents.trainers.training_status",
        "isExtraImport": true,
        "detail": "mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "StatusType",
        "importPath": "mlagents.trainers.training_status",
        "description": "mlagents.trainers.training_status",
        "isExtraImport": true,
        "detail": "mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "GlobalTrainingStatus",
        "importPath": "mlagents.trainers.training_status",
        "description": "mlagents.trainers.training_status",
        "isExtraImport": true,
        "detail": "mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "abc",
        "description": "abc",
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "UnityPolicyException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityEnvironmentException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityEnvironmentException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityCommunicationException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityCommunicationException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityTimeOutException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityEnvironmentException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityCommunicatorStoppedException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityEnvironmentException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityCommunicationException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityCommunicatorStoppedException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityCommunicationException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityCommunicationException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityCommunicationException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnitySideChannelException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityCommunicationException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityEnvironmentException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityEnvironmentException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityEnvironmentException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityActionException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityWorkerInUseException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityTimeOutException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityEnvironmentException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityObservationException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnitySideChannelException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityCommunicationException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityActionException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityEnvironmentException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityEnvironmentException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityActionException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityTimeOutException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityCommunicatorStoppedException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityObservationException",
        "importPath": "mlagents_envs.exception",
        "description": "mlagents_envs.exception",
        "isExtraImport": true,
        "detail": "mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "BaseModelSaver",
        "importPath": "mlagents.trainers.model_saver.model_saver",
        "description": "mlagents.trainers.model_saver.model_saver",
        "isExtraImport": true,
        "detail": "mlagents.trainers.model_saver.model_saver",
        "documentation": {}
    },
    {
        "label": "BaseModelSaver",
        "importPath": "mlagents.trainers.model_saver.model_saver",
        "description": "mlagents.trainers.model_saver.model_saver",
        "isExtraImport": true,
        "detail": "mlagents.trainers.model_saver.model_saver",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "importPath": "mlagents.trainers.policy.torch_policy",
        "description": "mlagents.trainers.policy.torch_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchOptimizer",
        "importPath": "mlagents.trainers.optimizer.torch_optimizer",
        "description": "mlagents.trainers.optimizer.torch_optimizer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.optimizer.torch_optimizer",
        "documentation": {}
    },
    {
        "label": "TorchOptimizer",
        "importPath": "mlagents.trainers.optimizer.torch_optimizer",
        "description": "mlagents.trainers.optimizer.torch_optimizer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.optimizer.torch_optimizer",
        "documentation": {}
    },
    {
        "label": "TorchOptimizer",
        "importPath": "mlagents.trainers.optimizer.torch_optimizer",
        "description": "mlagents.trainers.optimizer.torch_optimizer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.optimizer.torch_optimizer",
        "documentation": {}
    },
    {
        "label": "TorchOptimizer",
        "importPath": "mlagents.trainers.optimizer.torch_optimizer",
        "description": "mlagents.trainers.optimizer.torch_optimizer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.optimizer.torch_optimizer",
        "documentation": {}
    },
    {
        "label": "TorchOptimizer",
        "importPath": "mlagents.trainers.optimizer.torch_optimizer",
        "description": "mlagents.trainers.optimizer.torch_optimizer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.optimizer.torch_optimizer",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "mlagents.trainers.torch.model_serialization",
        "description": "mlagents.trainers.torch.model_serialization",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.model_serialization",
        "documentation": {}
    },
    {
        "label": "exporting_to_onnx",
        "importPath": "mlagents.trainers.torch.model_serialization",
        "description": "mlagents.trainers.torch.model_serialization",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.model_serialization",
        "documentation": {}
    },
    {
        "label": "exporting_to_onnx",
        "importPath": "mlagents.trainers.torch.model_serialization",
        "description": "mlagents.trainers.torch.model_serialization",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.model_serialization",
        "documentation": {}
    },
    {
        "label": "exporting_to_onnx",
        "importPath": "mlagents.trainers.torch.model_serialization",
        "description": "mlagents.trainers.torch.model_serialization",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.model_serialization",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBufferField",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RewardSignalUtil",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBufferField",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RewardSignalUtil",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RewardSignalUtil",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RewardSignalUtil",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RewardSignalUtil",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RewardSignalUtil",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RewardSignalUtil",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RewardSignalUtil",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RewardSignalUtil",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RewardSignalUtil",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBufferField",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "ObservationKeyPrefix",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RewardSignalKeyPrefix",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "ObservationKeyPrefix",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "ObservationKeyPrefix",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "importPath": "mlagents.trainers.buffer",
        "description": "mlagents.trainers.buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BCModule",
        "importPath": "mlagents.trainers.torch.components.bc.module",
        "description": "mlagents.trainers.torch.components.bc.module",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.bc.module",
        "documentation": {}
    },
    {
        "label": "BCModule",
        "importPath": "mlagents.trainers.torch.components.bc.module",
        "description": "mlagents.trainers.torch.components.bc.module",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.bc.module",
        "documentation": {}
    },
    {
        "label": "create_reward_provider",
        "importPath": "mlagents.trainers.torch.components.reward_providers",
        "description": "mlagents.trainers.torch.components.reward_providers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers",
        "documentation": {}
    },
    {
        "label": "CuriosityRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers",
        "description": "mlagents.trainers.torch.components.reward_providers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers",
        "documentation": {}
    },
    {
        "label": "create_reward_provider",
        "importPath": "mlagents.trainers.torch.components.reward_providers",
        "description": "mlagents.trainers.torch.components.reward_providers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers",
        "documentation": {}
    },
    {
        "label": "ExtrinsicRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers",
        "description": "mlagents.trainers.torch.components.reward_providers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers",
        "documentation": {}
    },
    {
        "label": "create_reward_provider",
        "importPath": "mlagents.trainers.torch.components.reward_providers",
        "description": "mlagents.trainers.torch.components.reward_providers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers",
        "documentation": {}
    },
    {
        "label": "GAILRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers",
        "description": "mlagents.trainers.torch.components.reward_providers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers",
        "documentation": {}
    },
    {
        "label": "create_reward_provider",
        "importPath": "mlagents.trainers.torch.components.reward_providers",
        "description": "mlagents.trainers.torch.components.reward_providers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers",
        "documentation": {}
    },
    {
        "label": "RNDRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers",
        "description": "mlagents.trainers.torch.components.reward_providers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers",
        "documentation": {}
    },
    {
        "label": "create_reward_provider",
        "importPath": "mlagents.trainers.torch.components.reward_providers",
        "description": "mlagents.trainers.torch.components.reward_providers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers",
        "documentation": {}
    },
    {
        "label": "Optimizer",
        "importPath": "mlagents.trainers.optimizer",
        "description": "mlagents.trainers.optimizer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.optimizer",
        "documentation": {}
    },
    {
        "label": "Optimizer",
        "importPath": "mlagents.trainers.optimizer",
        "description": "mlagents.trainers.optimizer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.optimizer",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "importPath": "mlagents.trainers.torch.utils",
        "description": "mlagents.trainers.torch.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "ExtrinsicRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers.extrinsic_reward_provider",
        "description": "mlagents.trainers.torch.components.reward_providers.extrinsic_reward_provider",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers.extrinsic_reward_provider",
        "documentation": {}
    },
    {
        "label": "ExtrinsicRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers.extrinsic_reward_provider",
        "description": "mlagents.trainers.torch.components.reward_providers.extrinsic_reward_provider",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers.extrinsic_reward_provider",
        "documentation": {}
    },
    {
        "label": "timed",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "timed",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "timed",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "timed",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "timed",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "timed",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "hierarchical_timer",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "timed",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "hierarchical_timer",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "hierarchical_timer",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "get_timer_tree",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "add_metadata",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "timed",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "set_gauge",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "TimerNode",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "timed",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "hierarchical_timer",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "reset_timers",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "get_timer_root",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "hierarchical_timer",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "timed",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "get_timer_stack_for_thread",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "merge_gauges",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "timed",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "hierarchical_timer",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "hierarchical_timer",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "timed",
        "importPath": "mlagents_envs.timers",
        "description": "mlagents_envs.timers",
        "isExtraImport": true,
        "detail": "mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "Critic",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "MultiAgentNetworkBody",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "SimpleActor",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "SharedActorCritic",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "GlobalSteps",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "ValueNetwork",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "ValueNetwork",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "NetworkBody",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "MultiAgentNetworkBody",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "ValueNetwork",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "SimpleActor",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "SharedActorCritic",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "NetworkBody",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "NetworkBody",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "NetworkBody",
        "importPath": "mlagents.trainers.torch.networks",
        "description": "mlagents.trainers.torch.networks",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "ValueHeads",
        "importPath": "mlagents.trainers.torch.decoders",
        "description": "mlagents.trainers.torch.decoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.decoders",
        "documentation": {}
    },
    {
        "label": "ValueHeads",
        "importPath": "mlagents.trainers.torch.decoders",
        "description": "mlagents.trainers.torch.decoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.decoders",
        "documentation": {}
    },
    {
        "label": "ValueHeads",
        "importPath": "mlagents.trainers.torch.decoders",
        "description": "mlagents.trainers.torch.decoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.decoders",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "importPath": "mlagents.trainers.torch.agent_action",
        "description": "mlagents.trainers.torch.agent_action",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "ActionLogProbs",
        "importPath": "mlagents.trainers.torch.action_log_probs",
        "description": "mlagents.trainers.torch.action_log_probs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_log_probs",
        "documentation": {}
    },
    {
        "label": "ActionLogProbs",
        "importPath": "mlagents.trainers.torch.action_log_probs",
        "description": "mlagents.trainers.torch.action_log_probs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_log_probs",
        "documentation": {}
    },
    {
        "label": "ActionLogProbs",
        "importPath": "mlagents.trainers.torch.action_log_probs",
        "description": "mlagents.trainers.torch.action_log_probs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_log_probs",
        "documentation": {}
    },
    {
        "label": "ActionLogProbs",
        "importPath": "mlagents.trainers.torch.action_log_probs",
        "description": "mlagents.trainers.torch.action_log_probs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_log_probs",
        "documentation": {}
    },
    {
        "label": "LogProbsTuple",
        "importPath": "mlagents.trainers.torch.action_log_probs",
        "description": "mlagents.trainers.torch.action_log_probs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_log_probs",
        "documentation": {}
    },
    {
        "label": "LogProbsTuple",
        "importPath": "mlagents.trainers.torch.action_log_probs",
        "description": "mlagents.trainers.torch.action_log_probs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_log_probs",
        "documentation": {}
    },
    {
        "label": "ActionLogProbs",
        "importPath": "mlagents.trainers.torch.action_log_probs",
        "description": "mlagents.trainers.torch.action_log_probs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_log_probs",
        "documentation": {}
    },
    {
        "label": "ActionLogProbs",
        "importPath": "mlagents.trainers.torch.action_log_probs",
        "description": "mlagents.trainers.torch.action_log_probs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_log_probs",
        "documentation": {}
    },
    {
        "label": "ActionLogProbs",
        "importPath": "mlagents.trainers.torch.action_log_probs",
        "description": "mlagents.trainers.torch.action_log_probs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_log_probs",
        "documentation": {}
    },
    {
        "label": "LogProbsTuple",
        "importPath": "mlagents.trainers.torch.action_log_probs",
        "description": "mlagents.trainers.torch.action_log_probs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_log_probs",
        "documentation": {}
    },
    {
        "label": "LogProbsTuple",
        "importPath": "mlagents.trainers.torch.action_log_probs",
        "description": "mlagents.trainers.torch.action_log_probs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_log_probs",
        "documentation": {}
    },
    {
        "label": "StatsAggregationMethod",
        "importPath": "mlagents_envs.side_channel.stats_side_channel",
        "description": "mlagents_envs.side_channel.stats_side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "StatsAggregationMethod",
        "importPath": "mlagents_envs.side_channel.stats_side_channel",
        "description": "mlagents_envs.side_channel.stats_side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "StatsAggregationMethod",
        "importPath": "mlagents_envs.side_channel.stats_side_channel",
        "description": "mlagents_envs.side_channel.stats_side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "StatsAggregationMethod",
        "importPath": "mlagents_envs.side_channel.stats_side_channel",
        "description": "mlagents_envs.side_channel.stats_side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "StatsAggregationMethod",
        "importPath": "mlagents_envs.side_channel.stats_side_channel",
        "description": "mlagents_envs.side_channel.stats_side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "EnvironmentStats",
        "importPath": "mlagents_envs.side_channel.stats_side_channel",
        "description": "mlagents_envs.side_channel.stats_side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "EnvironmentStats",
        "importPath": "mlagents_envs.side_channel.stats_side_channel",
        "description": "mlagents_envs.side_channel.stats_side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "StatsAggregationMethod",
        "importPath": "mlagents_envs.side_channel.stats_side_channel",
        "description": "mlagents_envs.side_channel.stats_side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "EnvironmentStats",
        "importPath": "mlagents_envs.side_channel.stats_side_channel",
        "description": "mlagents_envs.side_channel.stats_side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "StatsSideChannel",
        "importPath": "mlagents_envs.side_channel.stats_side_channel",
        "description": "mlagents_envs.side_channel.stats_side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "StatsSideChannel",
        "importPath": "mlagents_envs.side_channel.stats_side_channel",
        "description": "mlagents_envs.side_channel.stats_side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "StatsAggregationMethod",
        "importPath": "mlagents_envs.side_channel.stats_side_channel",
        "description": "mlagents_envs.side_channel.stats_side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "RLTrainer",
        "importPath": "mlagents.trainers.trainer.rl_trainer",
        "description": "mlagents.trainers.trainer.rl_trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer.rl_trainer",
        "documentation": {}
    },
    {
        "label": "RLTrainer",
        "importPath": "mlagents.trainers.trainer.rl_trainer",
        "description": "mlagents.trainers.trainer.rl_trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer.rl_trainer",
        "documentation": {}
    },
    {
        "label": "RLTrainer",
        "importPath": "mlagents.trainers.trainer.rl_trainer",
        "description": "mlagents.trainers.trainer.rl_trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer.rl_trainer",
        "documentation": {}
    },
    {
        "label": "RLTrainer",
        "importPath": "mlagents.trainers.trainer.rl_trainer",
        "description": "mlagents.trainers.trainer.rl_trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer.rl_trainer",
        "documentation": {}
    },
    {
        "label": "TorchPOCAOptimizer",
        "importPath": "mlagents.trainers.poca.optimizer_torch",
        "description": "mlagents.trainers.poca.optimizer_torch",
        "isExtraImport": true,
        "detail": "mlagents.trainers.poca.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "TorchPOCAOptimizer",
        "importPath": "mlagents.trainers.poca.optimizer_torch",
        "description": "mlagents.trainers.poca.optimizer_torch",
        "isExtraImport": true,
        "detail": "mlagents.trainers.poca.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "TorchPOCAOptimizer",
        "importPath": "mlagents.trainers.poca.optimizer_torch",
        "description": "mlagents.trainers.poca.optimizer_torch",
        "isExtraImport": true,
        "detail": "mlagents.trainers.poca.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "TorchPOCAOptimizer",
        "importPath": "mlagents.trainers.poca.optimizer_torch",
        "description": "mlagents.trainers.poca.optimizer_torch",
        "isExtraImport": true,
        "detail": "mlagents.trainers.poca.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "attr",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "attr",
        "description": "attr",
        "detail": "attr",
        "documentation": {}
    },
    {
        "label": "ActionInfo",
        "importPath": "mlagents.trainers.action_info",
        "description": "mlagents.trainers.action_info",
        "isExtraImport": true,
        "detail": "mlagents.trainers.action_info",
        "documentation": {}
    },
    {
        "label": "ActionInfo",
        "importPath": "mlagents.trainers.action_info",
        "description": "mlagents.trainers.action_info",
        "isExtraImport": true,
        "detail": "mlagents.trainers.action_info",
        "documentation": {}
    },
    {
        "label": "ActionInfo",
        "importPath": "mlagents.trainers.action_info",
        "description": "mlagents.trainers.action_info",
        "isExtraImport": true,
        "detail": "mlagents.trainers.action_info",
        "documentation": {}
    },
    {
        "label": "ActionInfo",
        "importPath": "mlagents.trainers.action_info",
        "description": "mlagents.trainers.action_info",
        "isExtraImport": true,
        "detail": "mlagents.trainers.action_info",
        "documentation": {}
    },
    {
        "label": "ActionInfoOutputs",
        "importPath": "mlagents.trainers.action_info",
        "description": "mlagents.trainers.action_info",
        "isExtraImport": true,
        "detail": "mlagents.trainers.action_info",
        "documentation": {}
    },
    {
        "label": "ActionInfo",
        "importPath": "mlagents.trainers.action_info",
        "description": "mlagents.trainers.action_info",
        "isExtraImport": true,
        "detail": "mlagents.trainers.action_info",
        "documentation": {}
    },
    {
        "label": "ActionInfo",
        "importPath": "mlagents.trainers.action_info",
        "description": "mlagents.trainers.action_info",
        "isExtraImport": true,
        "detail": "mlagents.trainers.action_info",
        "documentation": {}
    },
    {
        "label": "ActionInfo",
        "importPath": "mlagents.trainers.action_info",
        "description": "mlagents.trainers.action_info",
        "isExtraImport": true,
        "detail": "mlagents.trainers.action_info",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "TorchPPOOptimizer",
        "importPath": "mlagents.trainers.ppo.optimizer_torch",
        "description": "mlagents.trainers.ppo.optimizer_torch",
        "isExtraImport": true,
        "detail": "mlagents.trainers.ppo.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "TorchPPOOptimizer",
        "importPath": "mlagents.trainers.ppo.optimizer_torch",
        "description": "mlagents.trainers.ppo.optimizer_torch",
        "isExtraImport": true,
        "detail": "mlagents.trainers.ppo.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "TorchPPOOptimizer",
        "importPath": "mlagents.trainers.ppo.optimizer_torch",
        "description": "mlagents.trainers.ppo.optimizer_torch",
        "isExtraImport": true,
        "detail": "mlagents.trainers.ppo.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "TorchPPOOptimizer",
        "importPath": "mlagents.trainers.ppo.optimizer_torch",
        "description": "mlagents.trainers.ppo.optimizer_torch",
        "isExtraImport": true,
        "detail": "mlagents.trainers.ppo.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "UnityTrainerException",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "UnityTrainerException",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "TrainerConfigError",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "TrainerConfigWarning",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "TrainerConfigError",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "TrainerConfigError",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "UnityTrainerException",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "UnityTrainerException",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "UnityTrainerException",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "UnityTrainerException",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "UnityTrainerException",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "TrainerConfigError",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "UnityTrainerException",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "TrainerConfigError",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "UnityTrainerException",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "TrainerConfigError",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "TrainerConfigWarning",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "TrainerError",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "TrainerConfigError",
        "importPath": "mlagents.trainers.exception",
        "description": "mlagents.trainers.exception",
        "isExtraImport": true,
        "detail": "mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "ExitStack",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "closing",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "closing",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "closing",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "ModelCheckpoint",
        "importPath": "mlagents.trainers.policy.checkpoint_manager",
        "description": "mlagents.trainers.policy.checkpoint_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.checkpoint_manager",
        "documentation": {}
    },
    {
        "label": "ModelCheckpoint",
        "importPath": "mlagents.trainers.policy.checkpoint_manager",
        "description": "mlagents.trainers.policy.checkpoint_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.checkpoint_manager",
        "documentation": {}
    },
    {
        "label": "ModelCheckpointManager",
        "importPath": "mlagents.trainers.policy.checkpoint_manager",
        "description": "mlagents.trainers.policy.checkpoint_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.checkpoint_manager",
        "documentation": {}
    },
    {
        "label": "ModelCheckpoint",
        "importPath": "mlagents.trainers.policy.checkpoint_manager",
        "description": "mlagents.trainers.policy.checkpoint_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.checkpoint_manager",
        "documentation": {}
    },
    {
        "label": "ModelCheckpoint",
        "importPath": "mlagents.trainers.policy.checkpoint_manager",
        "description": "mlagents.trainers.policy.checkpoint_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.checkpoint_manager",
        "documentation": {}
    },
    {
        "label": "ModelCheckpointManager",
        "importPath": "mlagents.trainers.policy.checkpoint_manager",
        "description": "mlagents.trainers.policy.checkpoint_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.checkpoint_manager",
        "documentation": {}
    },
    {
        "label": "TorchSACOptimizer",
        "importPath": "mlagents.trainers.sac.optimizer_torch",
        "description": "mlagents.trainers.sac.optimizer_torch",
        "isExtraImport": true,
        "detail": "mlagents.trainers.sac.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "TorchSACOptimizer",
        "importPath": "mlagents.trainers.sac.optimizer_torch",
        "description": "mlagents.trainers.sac.optimizer_torch",
        "isExtraImport": true,
        "detail": "mlagents.trainers.sac.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "TorchSACOptimizer",
        "importPath": "mlagents.trainers.sac.optimizer_torch",
        "description": "mlagents.trainers.sac.optimizer_torch",
        "isExtraImport": true,
        "detail": "mlagents.trainers.sac.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "TorchSACOptimizer",
        "importPath": "mlagents.trainers.sac.optimizer_torch",
        "description": "mlagents.trainers.sac.optimizer_torch",
        "isExtraImport": true,
        "detail": "mlagents.trainers.sac.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "TorchModelSaver",
        "importPath": "mlagents.trainers.model_saver.torch_model_saver",
        "description": "mlagents.trainers.model_saver.torch_model_saver",
        "isExtraImport": true,
        "detail": "mlagents.trainers.model_saver.torch_model_saver",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CHECKPOINT_NAME",
        "importPath": "mlagents.trainers.model_saver.torch_model_saver",
        "description": "mlagents.trainers.model_saver.torch_model_saver",
        "isExtraImport": true,
        "detail": "mlagents.trainers.model_saver.torch_model_saver",
        "documentation": {}
    },
    {
        "label": "TorchModelSaver",
        "importPath": "mlagents.trainers.model_saver.torch_model_saver",
        "description": "mlagents.trainers.model_saver.torch_model_saver",
        "isExtraImport": true,
        "detail": "mlagents.trainers.model_saver.torch_model_saver",
        "documentation": {}
    },
    {
        "label": "TorchModelSaver",
        "importPath": "mlagents.trainers.model_saver.torch_model_saver",
        "description": "mlagents.trainers.model_saver.torch_model_saver",
        "isExtraImport": true,
        "detail": "mlagents.trainers.model_saver.torch_model_saver",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CHECKPOINT_NAME",
        "importPath": "mlagents.trainers.model_saver.torch_model_saver",
        "description": "mlagents.trainers.model_saver.torch_model_saver",
        "isExtraImport": true,
        "detail": "mlagents.trainers.model_saver.torch_model_saver",
        "documentation": {}
    },
    {
        "label": "mock_brain",
        "importPath": "mlagents.trainers.tests",
        "description": "mlagents.trainers.tests",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests",
        "documentation": {}
    },
    {
        "label": "mock_brain",
        "importPath": "mlagents.trainers.tests",
        "description": "mlagents.trainers.tests",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests",
        "documentation": {}
    },
    {
        "label": "mock_brain",
        "importPath": "mlagents.trainers.tests",
        "description": "mlagents.trainers.tests",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests",
        "documentation": {}
    },
    {
        "label": "mock_brain",
        "importPath": "mlagents.trainers.tests",
        "description": "mlagents.trainers.tests",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests",
        "documentation": {}
    },
    {
        "label": "mock_brain",
        "importPath": "mlagents.trainers.tests",
        "description": "mlagents.trainers.tests",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests",
        "documentation": {}
    },
    {
        "label": "mock_brain",
        "importPath": "mlagents.trainers.tests",
        "description": "mlagents.trainers.tests",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests",
        "documentation": {}
    },
    {
        "label": "mock_brain",
        "importPath": "mlagents.trainers.tests",
        "description": "mlagents.trainers.tests",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests",
        "documentation": {}
    },
    {
        "label": "create_policy_mock",
        "importPath": "mlagents.trainers.tests.torch.test_policy",
        "description": "mlagents.trainers.tests.torch.test_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.torch.test_policy",
        "documentation": {}
    },
    {
        "label": "create_policy_mock",
        "importPath": "mlagents.trainers.tests.torch.test_policy",
        "description": "mlagents.trainers.tests.torch.test_policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.torch.test_policy",
        "documentation": {}
    },
    {
        "label": "create_agent_buffer",
        "importPath": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "description": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "documentation": {}
    },
    {
        "label": "create_agent_buffer",
        "importPath": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "description": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "documentation": {}
    },
    {
        "label": "create_agent_buffer",
        "importPath": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "description": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "documentation": {}
    },
    {
        "label": "create_agent_buffer",
        "importPath": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "description": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "documentation": {}
    },
    {
        "label": "create_agent_buffer",
        "importPath": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "description": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.torch.test_reward_providers.utils",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "mock_open",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "ANY",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "DiscriminatorNetwork",
        "importPath": "mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "description": "mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "documentation": {}
    },
    {
        "label": "GAILRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "description": "mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "documentation": {}
    },
    {
        "label": "ActionModel",
        "importPath": "mlagents.trainers.torch.action_model",
        "description": "mlagents.trainers.torch.action_model",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_model",
        "documentation": {}
    },
    {
        "label": "DistInstances",
        "importPath": "mlagents.trainers.torch.action_model",
        "description": "mlagents.trainers.torch.action_model",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_model",
        "documentation": {}
    },
    {
        "label": "ActionModel",
        "importPath": "mlagents.trainers.torch.action_model",
        "description": "mlagents.trainers.torch.action_model",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_model",
        "documentation": {}
    },
    {
        "label": "GaussianDistInstance",
        "importPath": "mlagents.trainers.torch.distributions",
        "description": "mlagents.trainers.torch.distributions",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "CategoricalDistInstance",
        "importPath": "mlagents.trainers.torch.distributions",
        "description": "mlagents.trainers.torch.distributions",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "GaussianDistribution",
        "importPath": "mlagents.trainers.torch.distributions",
        "description": "mlagents.trainers.torch.distributions",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "MultiCategoricalDistribution",
        "importPath": "mlagents.trainers.torch.distributions",
        "description": "mlagents.trainers.torch.distributions",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "GaussianDistInstance",
        "importPath": "mlagents.trainers.torch.distributions",
        "description": "mlagents.trainers.torch.distributions",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "TanhGaussianDistInstance",
        "importPath": "mlagents.trainers.torch.distributions",
        "description": "mlagents.trainers.torch.distributions",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "CategoricalDistInstance",
        "importPath": "mlagents.trainers.torch.distributions",
        "description": "mlagents.trainers.torch.distributions",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "DistInstance",
        "importPath": "mlagents.trainers.torch.distributions",
        "description": "mlagents.trainers.torch.distributions",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "DiscreteDistInstance",
        "importPath": "mlagents.trainers.torch.distributions",
        "description": "mlagents.trainers.torch.distributions",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "GaussianDistribution",
        "importPath": "mlagents.trainers.torch.distributions",
        "description": "mlagents.trainers.torch.distributions",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "MultiCategoricalDistribution",
        "importPath": "mlagents.trainers.torch.distributions",
        "description": "mlagents.trainers.torch.distributions",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "linear_layer",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "LinearEncoder",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "linear_layer",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "Swish",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "linear_layer",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "lstm_layer",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "Initialization",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "LSTM",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "LayerNorm",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "LinearEncoder",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "linear_layer",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "linear_layer",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "Initialization",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "LinearEncoder",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "Initialization",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "linear_layer",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "LayerNorm",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "linear_layer",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "Swish",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "Initialization",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "LayerNorm",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "linear_layer",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "linear_layer",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "Initialization",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "linear_layer",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "Initialization",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "Swish",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "LSTM",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "LinearEncoder",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "LinearEncoder",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "Initialization",
        "importPath": "mlagents.trainers.torch.layers",
        "description": "mlagents.trainers.torch.layers",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "MultiHeadAttention",
        "importPath": "mlagents.trainers.torch.attention",
        "description": "mlagents.trainers.torch.attention",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.attention",
        "documentation": {}
    },
    {
        "label": "EntityEmbedding",
        "importPath": "mlagents.trainers.torch.attention",
        "description": "mlagents.trainers.torch.attention",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.attention",
        "documentation": {}
    },
    {
        "label": "ResidualSelfAttention",
        "importPath": "mlagents.trainers.torch.attention",
        "description": "mlagents.trainers.torch.attention",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.attention",
        "documentation": {}
    },
    {
        "label": "get_zero_entities_mask",
        "importPath": "mlagents.trainers.torch.attention",
        "description": "mlagents.trainers.torch.attention",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.attention",
        "documentation": {}
    },
    {
        "label": "EntityEmbedding",
        "importPath": "mlagents.trainers.torch.attention",
        "description": "mlagents.trainers.torch.attention",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.attention",
        "documentation": {}
    },
    {
        "label": "ResidualSelfAttention",
        "importPath": "mlagents.trainers.torch.attention",
        "description": "mlagents.trainers.torch.attention",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.attention",
        "documentation": {}
    },
    {
        "label": "get_zero_entities_mask",
        "importPath": "mlagents.trainers.torch.attention",
        "description": "mlagents.trainers.torch.attention",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.attention",
        "documentation": {}
    },
    {
        "label": "EntityEmbedding",
        "importPath": "mlagents.trainers.torch.attention",
        "description": "mlagents.trainers.torch.attention",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.attention",
        "documentation": {}
    },
    {
        "label": "ResidualSelfAttention",
        "importPath": "mlagents.trainers.torch.attention",
        "description": "mlagents.trainers.torch.attention",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.attention",
        "documentation": {}
    },
    {
        "label": "mlagents.trainers.tests.mock_brain",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mlagents.trainers.tests.mock_brain",
        "description": "mlagents.trainers.tests.mock_brain",
        "detail": "mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "copy_buffer_fields",
        "importPath": "mlagents.trainers.tests.mock_brain",
        "description": "mlagents.trainers.tests.mock_brain",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "copy_buffer_fields",
        "importPath": "mlagents.trainers.tests.mock_brain",
        "description": "mlagents.trainers.tests.mock_brain",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "copy_buffer_fields",
        "importPath": "mlagents.trainers.tests.mock_brain",
        "description": "mlagents.trainers.tests.mock_brain",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "create_mock_3dball_behavior_specs",
        "importPath": "mlagents.trainers.tests.mock_brain",
        "description": "mlagents.trainers.tests.mock_brain",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "setup_test_behavior_specs",
        "importPath": "mlagents.trainers.tests.mock_brain",
        "description": "mlagents.trainers.tests.mock_brain",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "make_fake_trajectory",
        "importPath": "mlagents.trainers.tests.mock_brain",
        "description": "mlagents.trainers.tests.mock_brain",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "make_fake_trajectory",
        "importPath": "mlagents.trainers.tests.mock_brain",
        "description": "mlagents.trainers.tests.mock_brain",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "ConditionalEncoder",
        "importPath": "mlagents.trainers.torch.conditioning",
        "description": "mlagents.trainers.torch.conditioning",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.conditioning",
        "documentation": {}
    },
    {
        "label": "ConditionalEncoder",
        "importPath": "mlagents.trainers.torch.conditioning",
        "description": "mlagents.trainers.torch.conditioning",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.conditioning",
        "documentation": {}
    },
    {
        "label": "VectorInput",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "Normalizer",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "SmallVisualEncoder",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "FullyConnectedVisualEncoder",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "SimpleVisualEncoder",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "ResNetVisualEncoder",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "NatureVisualEncoder",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "VectorInput",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "VectorInput",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "SimpleVisualEncoder",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "ResNetVisualEncoder",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "NatureVisualEncoder",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "SmallVisualEncoder",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "FullyConnectedVisualEncoder",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "VectorInput",
        "importPath": "mlagents.trainers.torch.encoders",
        "description": "mlagents.trainers.torch.encoders",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "GhostController",
        "importPath": "mlagents.trainers.ghost.controller",
        "description": "mlagents.trainers.ghost.controller",
        "isExtraImport": true,
        "detail": "mlagents.trainers.ghost.controller",
        "documentation": {}
    },
    {
        "label": "GhostController",
        "importPath": "mlagents.trainers.ghost.controller",
        "description": "mlagents.trainers.ghost.controller",
        "isExtraImport": true,
        "detail": "mlagents.trainers.ghost.controller",
        "documentation": {}
    },
    {
        "label": "GhostController",
        "importPath": "mlagents.trainers.ghost.controller",
        "description": "mlagents.trainers.ghost.controller",
        "isExtraImport": true,
        "detail": "mlagents.trainers.ghost.controller",
        "documentation": {}
    },
    {
        "label": "PPOTrainer",
        "importPath": "mlagents.trainers.ppo.trainer",
        "description": "mlagents.trainers.ppo.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.ppo.trainer",
        "documentation": {}
    },
    {
        "label": "PPOTrainer",
        "importPath": "mlagents.trainers.ppo.trainer",
        "description": "mlagents.trainers.ppo.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.ppo.trainer",
        "documentation": {}
    },
    {
        "label": "PPOTrainer",
        "importPath": "mlagents.trainers.ppo.trainer",
        "description": "mlagents.trainers.ppo.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.ppo.trainer",
        "documentation": {}
    },
    {
        "label": "make_fake_trajectory",
        "importPath": "mlagents.trainers.tests.test_trajectory",
        "description": "mlagents.trainers.tests.test_trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.test_trajectory",
        "documentation": {}
    },
    {
        "label": "make_fake_trajectory",
        "importPath": "mlagents.trainers.tests.test_trajectory",
        "description": "mlagents.trainers.tests.test_trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.test_trajectory",
        "documentation": {}
    },
    {
        "label": "make_fake_trajectory",
        "importPath": "mlagents.trainers.tests.test_trajectory",
        "description": "mlagents.trainers.tests.test_trajectory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.test_trajectory",
        "documentation": {}
    },
    {
        "label": "SimpleEnvironment",
        "importPath": "mlagents.trainers.tests.simple_test_envs",
        "description": "mlagents.trainers.tests.simple_test_envs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "MemoryEnvironment",
        "importPath": "mlagents.trainers.tests.simple_test_envs",
        "description": "mlagents.trainers.tests.simple_test_envs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "SimpleEnvironment",
        "importPath": "mlagents.trainers.tests.simple_test_envs",
        "description": "mlagents.trainers.tests.simple_test_envs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "MultiAgentEnvironment",
        "importPath": "mlagents.trainers.tests.simple_test_envs",
        "description": "mlagents.trainers.tests.simple_test_envs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "MemoryEnvironment",
        "importPath": "mlagents.trainers.tests.simple_test_envs",
        "description": "mlagents.trainers.tests.simple_test_envs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "RecordEnvironment",
        "importPath": "mlagents.trainers.tests.simple_test_envs",
        "description": "mlagents.trainers.tests.simple_test_envs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "SimpleEnvironment",
        "importPath": "mlagents.trainers.tests.simple_test_envs",
        "description": "mlagents.trainers.tests.simple_test_envs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "UnexpectedExceptionEnvironment",
        "importPath": "mlagents.trainers.tests.simple_test_envs",
        "description": "mlagents.trainers.tests.simple_test_envs",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "check_environment_trains",
        "importPath": "mlagents.trainers.tests.check_env_trains",
        "description": "mlagents.trainers.tests.check_env_trains",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.check_env_trains",
        "documentation": {}
    },
    {
        "label": "check_environment_trains",
        "importPath": "mlagents.trainers.tests.check_env_trains",
        "description": "mlagents.trainers.tests.check_env_trains",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.check_env_trains",
        "documentation": {}
    },
    {
        "label": "default_reward_processor",
        "importPath": "mlagents.trainers.tests.check_env_trains",
        "description": "mlagents.trainers.tests.check_env_trains",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.check_env_trains",
        "documentation": {}
    },
    {
        "label": "check_environment_trains",
        "importPath": "mlagents.trainers.tests.check_env_trains",
        "description": "mlagents.trainers.tests.check_env_trains",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.check_env_trains",
        "documentation": {}
    },
    {
        "label": "DebugWriter",
        "importPath": "mlagents.trainers.tests.check_env_trains",
        "description": "mlagents.trainers.tests.check_env_trains",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.check_env_trains",
        "documentation": {}
    },
    {
        "label": "TrainerFactory",
        "importPath": "mlagents.trainers.trainer.trainer_factory",
        "description": "mlagents.trainers.trainer.trainer_factory",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer.trainer_factory",
        "documentation": {}
    },
    {
        "label": "POCATrainer",
        "importPath": "mlagents.trainers.poca.trainer",
        "description": "mlagents.trainers.poca.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.poca.trainer",
        "documentation": {}
    },
    {
        "label": "POCATrainer",
        "importPath": "mlagents.trainers.poca.trainer",
        "description": "mlagents.trainers.poca.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.poca.trainer",
        "documentation": {}
    },
    {
        "label": "write_demo",
        "importPath": "mlagents.trainers.demo_loader",
        "description": "mlagents.trainers.demo_loader",
        "isExtraImport": true,
        "detail": "mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "load_demonstration",
        "importPath": "mlagents.trainers.demo_loader",
        "description": "mlagents.trainers.demo_loader",
        "isExtraImport": true,
        "detail": "mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "demo_to_buffer",
        "importPath": "mlagents.trainers.demo_loader",
        "description": "mlagents.trainers.demo_loader",
        "isExtraImport": true,
        "detail": "mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "get_demo_files",
        "importPath": "mlagents.trainers.demo_loader",
        "description": "mlagents.trainers.demo_loader",
        "isExtraImport": true,
        "detail": "mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "write_delimited",
        "importPath": "mlagents.trainers.demo_loader",
        "description": "mlagents.trainers.demo_loader",
        "isExtraImport": true,
        "detail": "mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "demo_to_buffer",
        "importPath": "mlagents.trainers.demo_loader",
        "description": "mlagents.trainers.demo_loader",
        "isExtraImport": true,
        "detail": "mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "demo_to_buffer",
        "importPath": "mlagents.trainers.demo_loader",
        "description": "mlagents.trainers.demo_loader",
        "isExtraImport": true,
        "detail": "mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "DemonstrationMetaProto",
        "importPath": "mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "description": "mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "documentation": {}
    },
    {
        "label": "DemonstrationMetaProto",
        "importPath": "mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "description": "mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "documentation": {}
    },
    {
        "label": "DemonstrationMetaProto",
        "importPath": "mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "description": "mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "documentation": {}
    },
    {
        "label": "BrainParametersProto",
        "importPath": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "ActionSpecProto",
        "importPath": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "BrainParametersProto",
        "importPath": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "BrainParametersProto",
        "importPath": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "BrainParametersProto",
        "importPath": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "ActionSpecProto",
        "importPath": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "BrainParametersProto",
        "importPath": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "TrainerController",
        "importPath": "mlagents.trainers.trainer_controller",
        "description": "mlagents.trainers.trainer_controller",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer_controller",
        "documentation": {}
    },
    {
        "label": "TrainerController",
        "importPath": "mlagents.trainers.trainer_controller",
        "description": "mlagents.trainers.trainer_controller",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer_controller",
        "documentation": {}
    },
    {
        "label": "TrainerController",
        "importPath": "mlagents.trainers.trainer_controller",
        "description": "mlagents.trainers.trainer_controller",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer_controller",
        "documentation": {}
    },
    {
        "label": "TrainerController",
        "importPath": "mlagents.trainers.trainer_controller",
        "description": "mlagents.trainers.trainer_controller",
        "isExtraImport": true,
        "detail": "mlagents.trainers.trainer_controller",
        "documentation": {}
    },
    {
        "label": "SimpleEnvManager",
        "importPath": "mlagents.trainers.simple_env_manager",
        "description": "mlagents.trainers.simple_env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.simple_env_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentParameterManager",
        "importPath": "mlagents.trainers.environment_parameter_manager",
        "description": "mlagents.trainers.environment_parameter_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.environment_parameter_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentParameterManager",
        "importPath": "mlagents.trainers.environment_parameter_manager",
        "description": "mlagents.trainers.environment_parameter_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.environment_parameter_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentParameterManager",
        "importPath": "mlagents.trainers.environment_parameter_manager",
        "description": "mlagents.trainers.environment_parameter_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.environment_parameter_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentParameterManager",
        "importPath": "mlagents.trainers.environment_parameter_manager",
        "description": "mlagents.trainers.environment_parameter_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.environment_parameter_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentParameterManager",
        "importPath": "mlagents.trainers.environment_parameter_manager",
        "description": "mlagents.trainers.environment_parameter_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.environment_parameter_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentParameterManager",
        "importPath": "mlagents.trainers.environment_parameter_manager",
        "description": "mlagents.trainers.environment_parameter_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.environment_parameter_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentParameterManager",
        "importPath": "mlagents.trainers.environment_parameter_manager",
        "description": "mlagents.trainers.environment_parameter_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.environment_parameter_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentParameterManager",
        "importPath": "mlagents.trainers.environment_parameter_manager",
        "description": "mlagents.trainers.environment_parameter_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.environment_parameter_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentParameterManager",
        "importPath": "mlagents.trainers.environment_parameter_manager",
        "description": "mlagents.trainers.environment_parameter_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.environment_parameter_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentParametersChannel",
        "importPath": "mlagents_envs.side_channel.environment_parameters_channel",
        "description": "mlagents_envs.side_channel.environment_parameters_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.environment_parameters_channel",
        "documentation": {}
    },
    {
        "label": "EnvironmentParametersChannel",
        "importPath": "mlagents_envs.side_channel.environment_parameters_channel",
        "description": "mlagents_envs.side_channel.environment_parameters_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.environment_parameters_channel",
        "documentation": {}
    },
    {
        "label": "EnvironmentParametersChannel",
        "importPath": "mlagents_envs.side_channel.environment_parameters_channel",
        "description": "mlagents_envs.side_channel.environment_parameters_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.environment_parameters_channel",
        "documentation": {}
    },
    {
        "label": "EnvironmentParametersChannel",
        "importPath": "mlagents_envs.side_channel.environment_parameters_channel",
        "description": "mlagents_envs.side_channel.environment_parameters_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.environment_parameters_channel",
        "documentation": {}
    },
    {
        "label": "EnvironmentParametersChannel",
        "importPath": "mlagents_envs.side_channel.environment_parameters_channel",
        "description": "mlagents_envs.side_channel.environment_parameters_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.environment_parameters_channel",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "proto_from_steps_and_action",
        "importPath": "mlagents_envs.tests.test_rpc_utils",
        "description": "mlagents_envs.tests.test_rpc_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "AgentInfoActionPairProto",
        "importPath": "mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "description": "mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "documentation": {}
    },
    {
        "label": "AgentInfoActionPairProto",
        "importPath": "mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "description": "mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "documentation": {}
    },
    {
        "label": "AgentInfoActionPairProto",
        "importPath": "mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "description": "mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "convert_behaviors",
        "importPath": "mlagents.trainers.upgrade_config",
        "description": "mlagents.trainers.upgrade_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.upgrade_config",
        "documentation": {}
    },
    {
        "label": "remove_nones",
        "importPath": "mlagents.trainers.upgrade_config",
        "description": "mlagents.trainers.upgrade_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.upgrade_config",
        "documentation": {}
    },
    {
        "label": "convert",
        "importPath": "mlagents.trainers.upgrade_config",
        "description": "mlagents.trainers.upgrade_config",
        "isExtraImport": true,
        "detail": "mlagents.trainers.upgrade_config",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "mlagents.trainers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mlagents.trainers",
        "description": "mlagents.trainers",
        "detail": "mlagents.trainers",
        "documentation": {}
    },
    {
        "label": "learn",
        "importPath": "mlagents.trainers",
        "description": "mlagents.trainers",
        "isExtraImport": true,
        "detail": "mlagents.trainers",
        "documentation": {}
    },
    {
        "label": "__version__",
        "importPath": "mlagents.trainers",
        "description": "mlagents.trainers",
        "isExtraImport": true,
        "detail": "mlagents.trainers",
        "documentation": {}
    },
    {
        "label": "parse_command_line",
        "importPath": "mlagents.trainers.learn",
        "description": "mlagents.trainers.learn",
        "isExtraImport": true,
        "detail": "mlagents.trainers.learn",
        "documentation": {}
    },
    {
        "label": "run_cli",
        "importPath": "mlagents.trainers.learn",
        "description": "mlagents.trainers.learn",
        "isExtraImport": true,
        "detail": "mlagents.trainers.learn",
        "documentation": {}
    },
    {
        "label": "DetectDefault",
        "importPath": "mlagents.trainers.cli_utils",
        "description": "mlagents.trainers.cli_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "load_config",
        "importPath": "mlagents.trainers.cli_utils",
        "description": "mlagents.trainers.cli_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "_load_config",
        "importPath": "mlagents.trainers.cli_utils",
        "description": "mlagents.trainers.cli_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "parser",
        "importPath": "mlagents.trainers.cli_utils",
        "description": "mlagents.trainers.cli_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "load_config",
        "importPath": "mlagents.trainers.cli_utils",
        "description": "mlagents.trainers.cli_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "StoreConfigFile",
        "importPath": "mlagents.trainers.cli_utils",
        "description": "mlagents.trainers.cli_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "DetectDefault",
        "importPath": "mlagents.trainers.cli_utils",
        "description": "mlagents.trainers.cli_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "parser",
        "importPath": "mlagents.trainers.cli_utils",
        "description": "mlagents.trainers.cli_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "load_config",
        "importPath": "mlagents.trainers.cli_utils",
        "description": "mlagents.trainers.cli_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "load_config",
        "importPath": "mlagents.trainers.cli_utils",
        "description": "mlagents.trainers.cli_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "construct_fake_buffer",
        "importPath": "mlagents.trainers.tests.test_buffer",
        "description": "mlagents.trainers.tests.test_buffer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.tests.test_buffer",
        "documentation": {}
    },
    {
        "label": "cattr",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cattr",
        "description": "cattr",
        "detail": "cattr",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "AgentManager",
        "importPath": "mlagents.trainers.env_manager",
        "description": "mlagents.trainers.env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentStep",
        "importPath": "mlagents.trainers.env_manager",
        "description": "mlagents.trainers.env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "EnvManager",
        "importPath": "mlagents.trainers.env_manager",
        "description": "mlagents.trainers.env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentStep",
        "importPath": "mlagents.trainers.env_manager",
        "description": "mlagents.trainers.env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "AllStepResult",
        "importPath": "mlagents.trainers.env_manager",
        "description": "mlagents.trainers.env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "EnvManager",
        "importPath": "mlagents.trainers.env_manager",
        "description": "mlagents.trainers.env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentStep",
        "importPath": "mlagents.trainers.env_manager",
        "description": "mlagents.trainers.env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "AllStepResult",
        "importPath": "mlagents.trainers.env_manager",
        "description": "mlagents.trainers.env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "EnvManager",
        "importPath": "mlagents.trainers.env_manager",
        "description": "mlagents.trainers.env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentStep",
        "importPath": "mlagents.trainers.env_manager",
        "description": "mlagents.trainers.env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Empty",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Empty",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "SubprocessEnvManager",
        "importPath": "mlagents.trainers.subprocess_env_manager",
        "description": "mlagents.trainers.subprocess_env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentResponse",
        "importPath": "mlagents.trainers.subprocess_env_manager",
        "description": "mlagents.trainers.subprocess_env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "StepResponse",
        "importPath": "mlagents.trainers.subprocess_env_manager",
        "description": "mlagents.trainers.subprocess_env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentCommand",
        "importPath": "mlagents.trainers.subprocess_env_manager",
        "description": "mlagents.trainers.subprocess_env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "SubprocessEnvManager",
        "importPath": "mlagents.trainers.subprocess_env_manager",
        "description": "mlagents.trainers.subprocess_env_manager",
        "isExtraImport": true,
        "detail": "mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "validate_existing_directories",
        "importPath": "mlagents.trainers.directory_utils",
        "description": "mlagents.trainers.directory_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.directory_utils",
        "documentation": {}
    },
    {
        "label": "setup_init_path",
        "importPath": "mlagents.trainers.directory_utils",
        "description": "mlagents.trainers.directory_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.directory_utils",
        "documentation": {}
    },
    {
        "label": "validate_existing_directories",
        "importPath": "mlagents.trainers.directory_utils",
        "description": "mlagents.trainers.directory_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.directory_utils",
        "documentation": {}
    },
    {
        "label": "setup_init_path",
        "importPath": "mlagents.trainers.directory_utils",
        "description": "mlagents.trainers.directory_utils",
        "isExtraImport": true,
        "detail": "mlagents.trainers.directory_utils",
        "documentation": {}
    },
    {
        "label": "TrainingAnalyticsSideChannel",
        "importPath": "mlagents.trainers.training_analytics_side_channel",
        "description": "mlagents.trainers.training_analytics_side_channel",
        "isExtraImport": true,
        "detail": "mlagents.trainers.training_analytics_side_channel",
        "documentation": {}
    },
    {
        "label": "TrainingAnalyticsSideChannel",
        "importPath": "mlagents.trainers.training_analytics_side_channel",
        "description": "mlagents.trainers.training_analytics_side_channel",
        "isExtraImport": true,
        "detail": "mlagents.trainers.training_analytics_side_channel",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntFlag",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BaseRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "description": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "documentation": {}
    },
    {
        "label": "BaseRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "description": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "documentation": {}
    },
    {
        "label": "BaseRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "description": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "documentation": {}
    },
    {
        "label": "BaseRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "description": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "documentation": {}
    },
    {
        "label": "BaseRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "description": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "documentation": {}
    },
    {
        "label": "BaseRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "description": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "documentation": {}
    },
    {
        "label": "ActionFlattener",
        "importPath": "mlagents.trainers.torch.action_flattener",
        "description": "mlagents.trainers.torch.action_flattener",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_flattener",
        "documentation": {}
    },
    {
        "label": "ActionFlattener",
        "importPath": "mlagents.trainers.torch.action_flattener",
        "description": "mlagents.trainers.torch.action_flattener",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.action_flattener",
        "documentation": {}
    },
    {
        "label": "CuriosityRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "description": "mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "documentation": {}
    },
    {
        "label": "RNDRewardProvider",
        "importPath": "mlagents.trainers.torch.components.reward_providers.rnd_reward_provider",
        "description": "mlagents.trainers.torch.components.reward_providers.rnd_reward_provider",
        "isExtraImport": true,
        "detail": "mlagents.trainers.torch.components.reward_providers.rnd_reward_provider",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "RLock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Policy",
        "importPath": "mlagents.trainers.policy.policy",
        "description": "mlagents.trainers.policy.policy",
        "isExtraImport": true,
        "detail": "mlagents.trainers.policy.policy",
        "documentation": {}
    },
    {
        "label": "SACTrainer",
        "importPath": "mlagents.trainers.sac.trainer",
        "description": "mlagents.trainers.sac.trainer",
        "isExtraImport": true,
        "detail": "mlagents.trainers.sac.trainer",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "MutableMapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "MutableMapping",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "h5py",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "h5py",
        "description": "h5py",
        "detail": "h5py",
        "documentation": {}
    },
    {
        "label": "UnityEnvironment",
        "importPath": "mlagents_envs.environment",
        "description": "mlagents_envs.environment",
        "isExtraImport": true,
        "detail": "mlagents_envs.environment",
        "documentation": {}
    },
    {
        "label": "UnityEnvironment",
        "importPath": "mlagents_envs.environment",
        "description": "mlagents_envs.environment",
        "isExtraImport": true,
        "detail": "mlagents_envs.environment",
        "documentation": {}
    },
    {
        "label": "UnityEnvironment",
        "importPath": "mlagents_envs.environment",
        "description": "mlagents_envs.environment",
        "isExtraImport": true,
        "detail": "mlagents_envs.environment",
        "documentation": {}
    },
    {
        "label": "UnityEnvironment",
        "importPath": "mlagents_envs.environment",
        "description": "mlagents_envs.environment",
        "isExtraImport": true,
        "detail": "mlagents_envs.environment",
        "documentation": {}
    },
    {
        "label": "UnityEnvironment",
        "importPath": "mlagents_envs.environment",
        "description": "mlagents_envs.environment",
        "isExtraImport": true,
        "detail": "mlagents_envs.environment",
        "documentation": {}
    },
    {
        "label": "UnityEnvironment",
        "importPath": "mlagents_envs.environment",
        "description": "mlagents_envs.environment",
        "isExtraImport": true,
        "detail": "mlagents_envs.environment",
        "documentation": {}
    },
    {
        "label": "UnityEnvironment",
        "importPath": "mlagents_envs.environment",
        "description": "mlagents_envs.environment",
        "isExtraImport": true,
        "detail": "mlagents_envs.environment",
        "documentation": {}
    },
    {
        "label": "UnityEnvironment",
        "importPath": "mlagents_envs.environment",
        "description": "mlagents_envs.environment",
        "isExtraImport": true,
        "detail": "mlagents_envs.environment",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "behavior_spec_from_proto",
        "importPath": "mlagents_envs.rpc_utils",
        "description": "mlagents_envs.rpc_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "steps_from_proto",
        "importPath": "mlagents_envs.rpc_utils",
        "description": "mlagents_envs.rpc_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "behavior_spec_from_proto",
        "importPath": "mlagents_envs.rpc_utils",
        "description": "mlagents_envs.rpc_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "process_pixels",
        "importPath": "mlagents_envs.rpc_utils",
        "description": "mlagents_envs.rpc_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "_process_maybe_compressed_observation",
        "importPath": "mlagents_envs.rpc_utils",
        "description": "mlagents_envs.rpc_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "_process_rank_one_or_two_observation",
        "importPath": "mlagents_envs.rpc_utils",
        "description": "mlagents_envs.rpc_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "steps_from_proto",
        "importPath": "mlagents_envs.rpc_utils",
        "description": "mlagents_envs.rpc_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "behavior_spec_from_proto",
        "importPath": "mlagents_envs.rpc_utils",
        "description": "mlagents_envs.rpc_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "steps_from_proto",
        "importPath": "mlagents_envs.rpc_utils",
        "description": "mlagents_envs.rpc_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "_DecodeVarint32",
        "importPath": "google.protobuf.internal.decoder",
        "description": "google.protobuf.internal.decoder",
        "isExtraImport": true,
        "detail": "google.protobuf.internal.decoder",
        "documentation": {}
    },
    {
        "label": "_EncodeVarint",
        "importPath": "google.protobuf.internal.encoder",
        "description": "google.protobuf.internal.encoder",
        "isExtraImport": true,
        "detail": "google.protobuf.internal.encoder",
        "documentation": {}
    },
    {
        "label": "torch_utils",
        "importPath": "mlagents",
        "description": "mlagents",
        "isExtraImport": true,
        "detail": "mlagents",
        "documentation": {}
    },
    {
        "label": "torch_utils",
        "importPath": "mlagents",
        "description": "mlagents",
        "isExtraImport": true,
        "detail": "mlagents",
        "documentation": {}
    },
    {
        "label": "torch_utils",
        "importPath": "mlagents",
        "description": "mlagents",
        "isExtraImport": true,
        "detail": "mlagents",
        "documentation": {}
    },
    {
        "label": "SideChannel",
        "importPath": "mlagents_envs.side_channel.side_channel",
        "description": "mlagents_envs.side_channel.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.side_channel",
        "documentation": {}
    },
    {
        "label": "SideChannel",
        "importPath": "mlagents_envs.side_channel.side_channel",
        "description": "mlagents_envs.side_channel.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.side_channel",
        "documentation": {}
    },
    {
        "label": "SideChannel",
        "importPath": "mlagents_envs.side_channel.side_channel",
        "description": "mlagents_envs.side_channel.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.side_channel",
        "documentation": {}
    },
    {
        "label": "register_stats_writer_plugins",
        "importPath": "mlagents.plugins.stats_writer",
        "description": "mlagents.plugins.stats_writer",
        "isExtraImport": true,
        "detail": "mlagents.plugins.stats_writer",
        "documentation": {}
    },
    {
        "label": "register_stats_writer_plugins",
        "importPath": "mlagents.plugins.stats_writer",
        "description": "mlagents.plugins.stats_writer",
        "isExtraImport": true,
        "detail": "mlagents.plugins.stats_writer",
        "documentation": {}
    },
    {
        "label": "SummaryWriter",
        "importPath": "torch.utils.tensorboard",
        "description": "torch.utils.tensorboard",
        "isExtraImport": true,
        "detail": "torch.utils.tensorboard",
        "documentation": {}
    },
    {
        "label": "get_rank",
        "importPath": "mlagents.torch_utils.globals",
        "description": "mlagents.torch_utils.globals",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils.globals",
        "documentation": {}
    },
    {
        "label": "get_rank",
        "importPath": "mlagents.torch_utils.globals",
        "description": "mlagents.torch_utils.globals",
        "isExtraImport": true,
        "detail": "mlagents.torch_utils.globals",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "cloudpickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudpickle",
        "description": "cloudpickle",
        "detail": "cloudpickle",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Pipe",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Pipe",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "TimeoutError",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Array",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Connection",
        "importPath": "multiprocessing.connection",
        "description": "multiprocessing.connection",
        "isExtraImport": true,
        "detail": "multiprocessing.connection",
        "documentation": {}
    },
    {
        "label": "EngineConfigurationChannel",
        "importPath": "mlagents_envs.side_channel.engine_configuration_channel",
        "description": "mlagents_envs.side_channel.engine_configuration_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.engine_configuration_channel",
        "documentation": {}
    },
    {
        "label": "EngineConfig",
        "importPath": "mlagents_envs.side_channel.engine_configuration_channel",
        "description": "mlagents_envs.side_channel.engine_configuration_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.engine_configuration_channel",
        "documentation": {}
    },
    {
        "label": "EngineConfigurationChannel",
        "importPath": "mlagents_envs.side_channel.engine_configuration_channel",
        "description": "mlagents_envs.side_channel.engine_configuration_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.engine_configuration_channel",
        "documentation": {}
    },
    {
        "label": "EngineConfigurationChannel",
        "importPath": "mlagents_envs.side_channel.engine_configuration_channel",
        "description": "mlagents_envs.side_channel.engine_configuration_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.engine_configuration_channel",
        "documentation": {}
    },
    {
        "label": "EngineConfigurationChannel",
        "importPath": "mlagents_envs.side_channel.engine_configuration_channel",
        "description": "mlagents_envs.side_channel.engine_configuration_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.engine_configuration_channel",
        "documentation": {}
    },
    {
        "label": "EngineConfig",
        "importPath": "mlagents_envs.side_channel.engine_configuration_channel",
        "description": "mlagents_envs.side_channel.engine_configuration_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.engine_configuration_channel",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "IncomingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "OutgoingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "DefaultTrainingAnalyticsSideChannel",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "SideChannel",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "IncomingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "OutgoingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "SideChannel",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "OutgoingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "IncomingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "SideChannel",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "IncomingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "OutgoingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "SideChannel",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "IncomingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "OutgoingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "SideChannel",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "IncomingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "OutgoingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "IncomingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "OutgoingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "SideChannel",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "IncomingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "SideChannel",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "IncomingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "SideChannel",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "IncomingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "OutgoingMessage",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "DefaultTrainingAnalyticsSideChannel",
        "importPath": "mlagents_envs.side_channel",
        "description": "mlagents_envs.side_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel",
        "documentation": {}
    },
    {
        "label": "TrainingEnvironmentInitialized",
        "importPath": "mlagents_envs.communicator_objects.training_analytics_pb2",
        "description": "mlagents_envs.communicator_objects.training_analytics_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.training_analytics_pb2",
        "documentation": {}
    },
    {
        "label": "TrainingBehaviorInitialized",
        "importPath": "mlagents_envs.communicator_objects.training_analytics_pb2",
        "description": "mlagents_envs.communicator_objects.training_analytics_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.training_analytics_pb2",
        "documentation": {}
    },
    {
        "label": "TrainingEnvironmentInitialized",
        "importPath": "mlagents_envs.communicator_objects.training_analytics_pb2",
        "description": "mlagents_envs.communicator_objects.training_analytics_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.training_analytics_pb2",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "google.protobuf.any_pb2",
        "description": "google.protobuf.any_pb2",
        "isExtraImport": true,
        "detail": "google.protobuf.any_pb2",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "google.protobuf.any_pb2",
        "description": "google.protobuf.any_pb2",
        "isExtraImport": true,
        "detail": "google.protobuf.any_pb2",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "message",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "reflection",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "symbol_database",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "descriptor_pb2",
        "importPath": "google.protobuf",
        "description": "google.protobuf",
        "isExtraImport": true,
        "detail": "google.protobuf",
        "documentation": {}
    },
    {
        "label": "agent_info_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "agent_action_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "observation_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "space_type_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "unity_rl_input_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "unity_rl_initialization_input_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "unity_output_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "unity_input_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "header_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "unity_rl_output_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "unity_rl_initialization_output_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "capabilities_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "capabilities_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "brain_parameters_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "agent_action_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "command_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "agent_info_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "unity_message_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "unity_message_pb2",
        "importPath": "mlagents_envs.communicator_objects",
        "description": "mlagents_envs.communicator_objects",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects",
        "documentation": {}
    },
    {
        "label": "enum_type_wrapper",
        "importPath": "google.protobuf.internal",
        "description": "google.protobuf.internal",
        "isExtraImport": true,
        "detail": "google.protobuf.internal",
        "documentation": {}
    },
    {
        "label": "enum_type_wrapper",
        "importPath": "google.protobuf.internal",
        "description": "google.protobuf.internal",
        "isExtraImport": true,
        "detail": "google.protobuf.internal",
        "documentation": {}
    },
    {
        "label": "enum_type_wrapper",
        "importPath": "google.protobuf.internal",
        "description": "google.protobuf.internal",
        "isExtraImport": true,
        "detail": "google.protobuf.internal",
        "documentation": {}
    },
    {
        "label": "grpc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "grpc",
        "description": "grpc",
        "detail": "grpc",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "validate_environment_path",
        "importPath": "mlagents_envs.env_utils",
        "description": "mlagents_envs.env_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.env_utils",
        "documentation": {}
    },
    {
        "label": "validate_environment_path",
        "importPath": "mlagents_envs.env_utils",
        "description": "mlagents_envs.env_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.env_utils",
        "documentation": {}
    },
    {
        "label": "launch_executable",
        "importPath": "mlagents_envs.env_utils",
        "description": "mlagents_envs.env_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.env_utils",
        "documentation": {}
    },
    {
        "label": "get_local_binary_path",
        "importPath": "mlagents_envs.registry.binary_utils",
        "description": "mlagents_envs.registry.binary_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "load_local_manifest",
        "importPath": "mlagents_envs.registry.binary_utils",
        "description": "mlagents_envs.registry.binary_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "load_remote_manifest",
        "importPath": "mlagents_envs.registry.binary_utils",
        "description": "mlagents_envs.registry.binary_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "get_tmp_dir",
        "importPath": "mlagents_envs.registry.binary_utils",
        "description": "mlagents_envs.registry.binary_utils",
        "isExtraImport": true,
        "detail": "mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "BaseRegistryEntry",
        "importPath": "mlagents_envs.registry.base_registry_entry",
        "description": "mlagents_envs.registry.base_registry_entry",
        "isExtraImport": true,
        "detail": "mlagents_envs.registry.base_registry_entry",
        "documentation": {}
    },
    {
        "label": "BaseRegistryEntry",
        "importPath": "mlagents_envs.registry.base_registry_entry",
        "description": "mlagents_envs.registry.base_registry_entry",
        "isExtraImport": true,
        "detail": "mlagents_envs.registry.base_registry_entry",
        "documentation": {}
    },
    {
        "label": "RemoteRegistryEntry",
        "importPath": "mlagents_envs.registry.remote_registry_entry",
        "description": "mlagents_envs.registry.remote_registry_entry",
        "isExtraImport": true,
        "detail": "mlagents_envs.registry.remote_registry_entry",
        "documentation": {}
    },
    {
        "label": "RemoteRegistryEntry",
        "importPath": "mlagents_envs.registry.remote_registry_entry",
        "description": "mlagents_envs.registry.remote_registry_entry",
        "isExtraImport": true,
        "detail": "mlagents_envs.registry.remote_registry_entry",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "MockCommunicator",
        "importPath": "mlagents_envs.mock_communicator",
        "description": "mlagents_envs.mock_communicator",
        "isExtraImport": true,
        "detail": "mlagents_envs.mock_communicator",
        "documentation": {}
    },
    {
        "label": "default_registry",
        "importPath": "mlagents_envs.registry",
        "description": "mlagents_envs.registry",
        "isExtraImport": true,
        "detail": "mlagents_envs.registry",
        "documentation": {}
    },
    {
        "label": "UnityEnvRegistry",
        "importPath": "mlagents_envs.registry",
        "description": "mlagents_envs.registry",
        "isExtraImport": true,
        "detail": "mlagents_envs.registry",
        "documentation": {}
    },
    {
        "label": "default_registry",
        "importPath": "mlagents_envs.registry",
        "description": "mlagents_envs.registry",
        "isExtraImport": true,
        "detail": "mlagents_envs.registry",
        "documentation": {}
    },
    {
        "label": "mlagents_envs.rpc_communicator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mlagents_envs.rpc_communicator",
        "description": "mlagents_envs.rpc_communicator",
        "detail": "mlagents_envs.rpc_communicator",
        "documentation": {}
    },
    {
        "label": "RpcCommunicator",
        "importPath": "mlagents_envs.rpc_communicator",
        "description": "mlagents_envs.rpc_communicator",
        "isExtraImport": true,
        "detail": "mlagents_envs.rpc_communicator",
        "documentation": {}
    },
    {
        "label": "UnityInputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "mlagents_envs.communicator_objects.unity_input_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "UnityInputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "mlagents_envs.communicator_objects.unity_input_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "UnityInputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "mlagents_envs.communicator_objects.unity_input_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "UnityInputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "mlagents_envs.communicator_objects.unity_input_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "UnityInputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "mlagents_envs.communicator_objects.unity_input_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "AgentInfoProto",
        "importPath": "mlagents_envs.communicator_objects.agent_info_pb2",
        "description": "mlagents_envs.communicator_objects.agent_info_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.agent_info_pb2",
        "documentation": {}
    },
    {
        "label": "AgentInfoProto",
        "importPath": "mlagents_envs.communicator_objects.agent_info_pb2",
        "description": "mlagents_envs.communicator_objects.agent_info_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.agent_info_pb2",
        "documentation": {}
    },
    {
        "label": "AgentInfoProto",
        "importPath": "mlagents_envs.communicator_objects.agent_info_pb2",
        "description": "mlagents_envs.communicator_objects.agent_info_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.agent_info_pb2",
        "documentation": {}
    },
    {
        "label": "ObservationProto",
        "importPath": "mlagents_envs.communicator_objects.observation_pb2",
        "description": "mlagents_envs.communicator_objects.observation_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "NONE",
        "importPath": "mlagents_envs.communicator_objects.observation_pb2",
        "description": "mlagents_envs.communicator_objects.observation_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "PNG",
        "importPath": "mlagents_envs.communicator_objects.observation_pb2",
        "description": "mlagents_envs.communicator_objects.observation_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "ObservationProto",
        "importPath": "mlagents_envs.communicator_objects.observation_pb2",
        "description": "mlagents_envs.communicator_objects.observation_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "NONE",
        "importPath": "mlagents_envs.communicator_objects.observation_pb2",
        "description": "mlagents_envs.communicator_objects.observation_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "PNG",
        "importPath": "mlagents_envs.communicator_objects.observation_pb2",
        "description": "mlagents_envs.communicator_objects.observation_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "ObservationProto",
        "importPath": "mlagents_envs.communicator_objects.observation_pb2",
        "description": "mlagents_envs.communicator_objects.observation_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "NONE",
        "importPath": "mlagents_envs.communicator_objects.observation_pb2",
        "description": "mlagents_envs.communicator_objects.observation_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "AgentActionProto",
        "importPath": "mlagents_envs.communicator_objects.agent_action_pb2",
        "description": "mlagents_envs.communicator_objects.agent_action_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.agent_action_pb2",
        "documentation": {}
    },
    {
        "label": "AgentActionProto",
        "importPath": "mlagents_envs.communicator_objects.agent_action_pb2",
        "description": "mlagents_envs.communicator_objects.agent_action_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.agent_action_pb2",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "SideChannelManager",
        "importPath": "mlagents_envs.side_channel.side_channel_manager",
        "description": "mlagents_envs.side_channel.side_channel_manager",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.side_channel_manager",
        "documentation": {}
    },
    {
        "label": "SideChannelManager",
        "importPath": "mlagents_envs.side_channel.side_channel_manager",
        "description": "mlagents_envs.side_channel.side_channel_manager",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.side_channel_manager",
        "documentation": {}
    },
    {
        "label": "FloatPropertiesChannel",
        "importPath": "mlagents_envs.side_channel.float_properties_channel",
        "description": "mlagents_envs.side_channel.float_properties_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.float_properties_channel",
        "documentation": {}
    },
    {
        "label": "RawBytesChannel",
        "importPath": "mlagents_envs.side_channel.raw_bytes_channel",
        "description": "mlagents_envs.side_channel.raw_bytes_channel",
        "isExtraImport": true,
        "detail": "mlagents_envs.side_channel.raw_bytes_channel",
        "documentation": {}
    },
    {
        "label": "UnityOutputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_output_pb2",
        "description": "mlagents_envs.communicator_objects.unity_output_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_output_pb2",
        "documentation": {}
    },
    {
        "label": "UnityOutputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_output_pb2",
        "description": "mlagents_envs.communicator_objects.unity_output_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_output_pb2",
        "documentation": {}
    },
    {
        "label": "UnityOutputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_output_pb2",
        "description": "mlagents_envs.communicator_objects.unity_output_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_output_pb2",
        "documentation": {}
    },
    {
        "label": "UnityOutputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_output_pb2",
        "description": "mlagents_envs.communicator_objects.unity_output_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_output_pb2",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "STEP",
        "importPath": "mlagents_envs.communicator_objects.command_pb2",
        "description": "mlagents_envs.communicator_objects.command_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.command_pb2",
        "documentation": {}
    },
    {
        "label": "RESET",
        "importPath": "mlagents_envs.communicator_objects.command_pb2",
        "description": "mlagents_envs.communicator_objects.command_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.command_pb2",
        "documentation": {}
    },
    {
        "label": "UnityRLInputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "UnityRLOutputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "UnityRLOutputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "UnityRLCapabilitiesProto",
        "importPath": "mlagents_envs.communicator_objects.capabilities_pb2",
        "description": "mlagents_envs.communicator_objects.capabilities_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.capabilities_pb2",
        "documentation": {}
    },
    {
        "label": "UnityRLInitializationInputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "description": "mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "UnityRLInitializationOutputProto",
        "importPath": "mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "description": "mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "UnityToExternalProtoServicer",
        "importPath": "mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "description": "mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "documentation": {}
    },
    {
        "label": "add_UnityToExternalProtoServicer_to_server",
        "importPath": "mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "description": "mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "documentation": {}
    },
    {
        "label": "UnityMessageProto",
        "importPath": "mlagents_envs.communicator_objects.unity_message_pb2",
        "description": "mlagents_envs.communicator_objects.unity_message_pb2",
        "isExtraImport": true,
        "detail": "mlagents_envs.communicator_objects.unity_message_pb2",
        "documentation": {}
    },
    {
        "label": "ExampleStatsWriter",
        "importPath": "mlagents_plugin_examples.example_stats_writer",
        "description": "mlagents_plugin_examples.example_stats_writer",
        "isExtraImport": true,
        "detail": "mlagents_plugin_examples.example_stats_writer",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "rules",
        "importPath": "__init__",
        "description": "__init__",
        "isExtraImport": true,
        "detail": "__init__",
        "documentation": {}
    },
    {
        "label": "BasePlugin",
        "importPath": "pluginsystem",
        "description": "pluginsystem",
        "isExtraImport": true,
        "detail": "pluginsystem",
        "documentation": {}
    },
    {
        "label": "Listener",
        "importPath": "pluginsystem",
        "description": "pluginsystem",
        "isExtraImport": true,
        "detail": "pluginsystem",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Surface",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "KEYDOWN",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "KEYUP",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "QUIT",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "pygameui",
        "description": "pygameui",
        "isExtraImport": true,
        "detail": "pygameui",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "farmlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "farmlib",
        "description": "farmlib",
        "detail": "farmlib",
        "documentation": {}
    },
    {
        "label": "DictMapper",
        "importPath": "farmlib",
        "description": "farmlib",
        "isExtraImport": true,
        "detail": "farmlib",
        "documentation": {}
    },
    {
        "label": "__VERSION__",
        "importPath": "farmlib",
        "description": "farmlib",
        "isExtraImport": true,
        "detail": "farmlib",
        "documentation": {}
    },
    {
        "label": "PluginSystem",
        "importPath": "farmlib",
        "description": "farmlib",
        "isExtraImport": true,
        "detail": "farmlib",
        "documentation": {}
    },
    {
        "label": "__VERSION__",
        "importPath": "farmlib",
        "description": "farmlib",
        "isExtraImport": true,
        "detail": "farmlib",
        "documentation": {}
    },
    {
        "label": "PluginSystem",
        "importPath": "farmlib",
        "description": "farmlib",
        "isExtraImport": true,
        "detail": "farmlib",
        "documentation": {}
    },
    {
        "label": "pnoise",
        "importPath": "pnoise",
        "description": "pnoise",
        "isExtraImport": true,
        "detail": "pnoise",
        "documentation": {}
    },
    {
        "label": "DictMapper",
        "importPath": "dictmapper",
        "description": "dictmapper",
        "isExtraImport": true,
        "detail": "dictmapper",
        "documentation": {}
    },
    {
        "label": "FarmField",
        "importPath": "farmlib.farm",
        "description": "farmlib.farm",
        "isExtraImport": true,
        "detail": "farmlib.farm",
        "documentation": {}
    },
    {
        "label": "FarmTile",
        "importPath": "farmlib.farm",
        "description": "farmlib.farm",
        "isExtraImport": true,
        "detail": "farmlib.farm",
        "documentation": {}
    },
    {
        "label": "FarmObject",
        "importPath": "farmlib.farm",
        "description": "farmlib.farm",
        "isExtraImport": true,
        "detail": "farmlib.farm",
        "documentation": {}
    },
    {
        "label": "Seed",
        "importPath": "farmlib.farm",
        "description": "farmlib.farm",
        "isExtraImport": true,
        "detail": "farmlib.farm",
        "documentation": {}
    },
    {
        "label": "objects",
        "importPath": "farmlib.farm",
        "description": "farmlib.farm",
        "isExtraImport": true,
        "detail": "farmlib.farm",
        "documentation": {}
    },
    {
        "label": "objects",
        "importPath": "farmlib.farm",
        "description": "farmlib.farm",
        "isExtraImport": true,
        "detail": "farmlib.farm",
        "documentation": {}
    },
    {
        "label": "Player",
        "importPath": "farmlib.player",
        "description": "farmlib.player",
        "isExtraImport": true,
        "detail": "farmlib.player",
        "documentation": {}
    },
    {
        "label": "ImageLoader",
        "importPath": "farmlib.imageloader",
        "description": "farmlib.imageloader",
        "isExtraImport": true,
        "detail": "farmlib.imageloader",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "farmlib.timer",
        "description": "farmlib.timer",
        "isExtraImport": true,
        "detail": "farmlib.timer",
        "documentation": {}
    },
    {
        "label": "ExpBar",
        "importPath": "farmlib.expbar",
        "description": "farmlib.expbar",
        "isExtraImport": true,
        "detail": "farmlib.expbar",
        "documentation": {}
    },
    {
        "label": "render_field",
        "importPath": "farmlib.renderfunctions",
        "description": "farmlib.renderfunctions",
        "isExtraImport": true,
        "detail": "farmlib.renderfunctions",
        "documentation": {}
    },
    {
        "label": "render_rain",
        "importPath": "farmlib.renderfunctions",
        "description": "farmlib.renderfunctions",
        "isExtraImport": true,
        "detail": "farmlib.renderfunctions",
        "documentation": {}
    },
    {
        "label": "render_seed_notify",
        "importPath": "farmlib.renderfunctions",
        "description": "farmlib.renderfunctions",
        "isExtraImport": true,
        "detail": "farmlib.renderfunctions",
        "documentation": {}
    },
    {
        "label": "draw_selected_seed",
        "importPath": "farmlib.renderfunctions",
        "description": "farmlib.renderfunctions",
        "isExtraImport": true,
        "detail": "farmlib.renderfunctions",
        "documentation": {}
    },
    {
        "label": "draw_tools",
        "importPath": "farmlib.renderfunctions",
        "description": "farmlib.renderfunctions",
        "isExtraImport": true,
        "detail": "farmlib.renderfunctions",
        "documentation": {}
    },
    {
        "label": "MarketWindow",
        "importPath": "farmlib.marketwindow",
        "description": "farmlib.marketwindow",
        "isExtraImport": true,
        "detail": "farmlib.marketwindow",
        "documentation": {}
    },
    {
        "label": "InventoryWindow",
        "importPath": "farmlib.inventorywindow",
        "description": "farmlib.inventorywindow",
        "isExtraImport": true,
        "detail": "farmlib.inventorywindow",
        "documentation": {}
    },
    {
        "label": "HelpWindow",
        "importPath": "farmlib.helpwindow",
        "description": "farmlib.helpwindow",
        "isExtraImport": true,
        "detail": "farmlib.helpwindow",
        "documentation": {}
    },
    {
        "label": "CorePlugin",
        "importPath": "farmlib.coreplugin",
        "description": "farmlib.coreplugin",
        "isExtraImport": true,
        "detail": "farmlib.coreplugin",
        "documentation": {}
    },
    {
        "label": "GameManager",
        "importPath": "farmlib.gamemanager",
        "description": "farmlib.gamemanager",
        "isExtraImport": true,
        "detail": "farmlib.gamemanager",
        "documentation": {}
    },
    {
        "label": "objects",
        "importPath": "farm",
        "description": "farm",
        "isExtraImport": true,
        "detail": "farm",
        "documentation": {}
    },
    {
        "label": "objects",
        "importPath": "farm",
        "description": "farm",
        "isExtraImport": true,
        "detail": "farm",
        "documentation": {}
    },
    {
        "label": "objects",
        "importPath": "farm",
        "description": "farm",
        "isExtraImport": true,
        "detail": "farm",
        "documentation": {}
    },
    {
        "label": "FarmObject",
        "importPath": "farm",
        "description": "farm",
        "isExtraImport": true,
        "detail": "farm",
        "documentation": {}
    },
    {
        "label": "Seed",
        "importPath": "farm",
        "description": "farm",
        "isExtraImport": true,
        "detail": "farm",
        "documentation": {}
    },
    {
        "label": "Tooltip",
        "importPath": "farmlib.tooltip",
        "description": "farmlib.tooltip",
        "isExtraImport": true,
        "detail": "farmlib.tooltip",
        "documentation": {}
    },
    {
        "label": "Tooltip",
        "importPath": "tooltip",
        "description": "tooltip",
        "isExtraImport": true,
        "detail": "tooltip",
        "documentation": {}
    },
    {
        "label": "GameWindow",
        "importPath": "farmlib.gamewindow",
        "description": "farmlib.gamewindow",
        "isExtraImport": true,
        "detail": "farmlib.gamewindow",
        "documentation": {}
    },
    {
        "label": "Widget",
        "importPath": "widget",
        "description": "widget",
        "isExtraImport": true,
        "detail": "widget",
        "documentation": {}
    },
    {
        "label": "Widget",
        "importPath": "widget",
        "description": "widget",
        "isExtraImport": true,
        "detail": "widget",
        "documentation": {}
    },
    {
        "label": "Widget",
        "importPath": "widget",
        "description": "widget",
        "isExtraImport": true,
        "detail": "widget",
        "documentation": {}
    },
    {
        "label": "Widget",
        "importPath": "widget",
        "description": "widget",
        "isExtraImport": true,
        "detail": "widget",
        "documentation": {}
    },
    {
        "label": "Container",
        "importPath": "container",
        "description": "container",
        "isExtraImport": true,
        "detail": "container",
        "documentation": {}
    },
    {
        "label": "MenuWindow",
        "importPath": "farmlib.menuwindow",
        "description": "farmlib.menuwindow",
        "isExtraImport": true,
        "detail": "farmlib.menuwindow",
        "documentation": {}
    },
    {
        "label": "DependencyNotInstalled",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "DependencyNotInstalled",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "DependencyNotInstalled",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "DependencyNotInstalled",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "DependencyNotInstalled",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "DependencyNotInstalled",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "DependencyNotInstalled",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "DependencyNotInstalled",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "DependencyNotInstalled",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "DependencyNotInstalled",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "DependencyNotInstalled",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "DependencyNotInstalled",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "CustomSpaceError",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "CustomSpaceError",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "AlreadyPendingCallError",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "ClosedEnvironmentError",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "CustomSpaceError",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "NoAsyncCallError",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "AlreadyPendingCallError",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "ClosedEnvironmentError",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "NoAsyncCallError",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "CustomSpaceError",
        "importPath": "gym.error",
        "description": "gym.error",
        "isExtraImport": true,
        "detail": "gym.error",
        "documentation": {}
    },
    {
        "label": "EzPickle",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "EzPickle",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "EzPickle",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "colorize",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "seeding",
        "importPath": "gym.utils",
        "description": "gym.utils",
        "isExtraImport": true,
        "detail": "gym.utils",
        "documentation": {}
    },
    {
        "label": "Car",
        "importPath": "gym.envs.box2d.car_dynamics",
        "description": "gym.envs.box2d.car_dynamics",
        "isExtraImport": true,
        "detail": "gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "mujoco_env",
        "importPath": "gym.envs.mujoco",
        "description": "gym.envs.mujoco",
        "isExtraImport": true,
        "detail": "gym.envs.mujoco",
        "documentation": {}
    },
    {
        "label": "categorical_sample",
        "importPath": "gym.envs.toy_text.utils",
        "description": "gym.envs.toy_text.utils",
        "isExtraImport": true,
        "detail": "gym.envs.toy_text.utils",
        "documentation": {}
    },
    {
        "label": "categorical_sample",
        "importPath": "gym.envs.toy_text.utils",
        "description": "gym.envs.toy_text.utils",
        "isExtraImport": true,
        "detail": "gym.envs.toy_text.utils",
        "documentation": {}
    },
    {
        "label": "categorical_sample",
        "importPath": "gym.envs.toy_text.utils",
        "description": "gym.envs.toy_text.utils",
        "isExtraImport": true,
        "detail": "gym.envs.toy_text.utils",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "difflib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "difflib",
        "description": "difflib",
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "importlib.util",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib.util",
        "description": "importlib.util",
        "detail": "importlib.util",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "internal_env_relocation_map",
        "importPath": "gym.envs.__relocated__",
        "description": "gym.envs.__relocated__",
        "isExtraImport": true,
        "detail": "gym.envs.__relocated__",
        "documentation": {}
    },
    {
        "label": "AutoResetWrapper",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "OrderEnforcing",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "TimeLimit",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "FlattenObservation",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "FilterObservation",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "FlattenObservation",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "AtariPreprocessing",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "AutoResetWrapper",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "ClipAction",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "FlattenObservation",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "FrameStack",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "AtariPreprocessing",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "GrayScaleObservation",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "OrderEnforcing",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "RecordEpisodeStatistics",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "capped_cubic_video_schedule",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "RescaleAction",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "ResizeObservation",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "TimeAwareObservation",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "TimeLimit",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "TransformObservation",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "TransformReward",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "OrderEnforcing",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "TimeLimit",
        "importPath": "gym.wrappers",
        "description": "gym.wrappers",
        "isExtraImport": true,
        "detail": "gym.wrappers",
        "documentation": {}
    },
    {
        "label": "Space",
        "importPath": "gym.spaces.space",
        "description": "gym.spaces.space",
        "isExtraImport": true,
        "detail": "gym.spaces.space",
        "documentation": {}
    },
    {
        "label": "Space",
        "importPath": "gym.spaces.space",
        "description": "gym.spaces.space",
        "isExtraImport": true,
        "detail": "gym.spaces.space",
        "documentation": {}
    },
    {
        "label": "Space",
        "importPath": "gym.spaces.space",
        "description": "gym.spaces.space",
        "isExtraImport": true,
        "detail": "gym.spaces.space",
        "documentation": {}
    },
    {
        "label": "Space",
        "importPath": "gym.spaces.space",
        "description": "gym.spaces.space",
        "isExtraImport": true,
        "detail": "gym.spaces.space",
        "documentation": {}
    },
    {
        "label": "Space",
        "importPath": "gym.spaces.space",
        "description": "gym.spaces.space",
        "isExtraImport": true,
        "detail": "gym.spaces.space",
        "documentation": {}
    },
    {
        "label": "Space",
        "importPath": "gym.spaces.space",
        "description": "gym.spaces.space",
        "isExtraImport": true,
        "detail": "gym.spaces.space",
        "documentation": {}
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces.discrete",
        "description": "gym.spaces.discrete",
        "isExtraImport": true,
        "detail": "gym.spaces.discrete",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "singledispatch",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "singledispatch",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "singledispatch",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "singledispatch",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "gym.spaces",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiBinary",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiDiscrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Space",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiBinary",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiDiscrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Space",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiBinary",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiDiscrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiBinary",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiDiscrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Space",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiBinary",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiDiscrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiBinary",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiDiscrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiDiscrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiDiscrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Space",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiDiscrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Discrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiBinary",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "MultiDiscrete",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "flatten",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "unflatten",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Box",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "gym.spaces",
        "description": "gym.spaces",
        "isExtraImport": true,
        "detail": "gym.spaces",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "NDArray",
        "importPath": "numpy.typing",
        "description": "numpy.typing",
        "isExtraImport": true,
        "detail": "numpy.typing",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "pygame.event",
        "description": "pygame.event",
        "isExtraImport": true,
        "detail": "pygame.event",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "pygame.event",
        "description": "pygame.event",
        "isExtraImport": true,
        "detail": "pygame.event",
        "documentation": {}
    },
    {
        "label": "deprecation",
        "importPath": "gym.logger",
        "description": "gym.logger",
        "isExtraImport": true,
        "detail": "gym.logger",
        "documentation": {}
    },
    {
        "label": "deprecation",
        "importPath": "gym.logger",
        "description": "gym.logger",
        "isExtraImport": true,
        "detail": "gym.logger",
        "documentation": {}
    },
    {
        "label": "deprecation",
        "importPath": "gym.logger",
        "description": "gym.logger",
        "isExtraImport": true,
        "detail": "gym.logger",
        "documentation": {}
    },
    {
        "label": "deprecation",
        "importPath": "gym.logger",
        "description": "gym.logger",
        "isExtraImport": true,
        "detail": "gym.logger",
        "documentation": {}
    },
    {
        "label": "VIDEORESIZE",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "c_bool",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "CloudpickleWrapper",
        "importPath": "gym.vector.utils",
        "description": "gym.vector.utils",
        "isExtraImport": true,
        "detail": "gym.vector.utils",
        "documentation": {}
    },
    {
        "label": "clear_mpi_env_vars",
        "importPath": "gym.vector.utils",
        "description": "gym.vector.utils",
        "isExtraImport": true,
        "detail": "gym.vector.utils",
        "documentation": {}
    },
    {
        "label": "concatenate",
        "importPath": "gym.vector.utils",
        "description": "gym.vector.utils",
        "isExtraImport": true,
        "detail": "gym.vector.utils",
        "documentation": {}
    },
    {
        "label": "create_empty_array",
        "importPath": "gym.vector.utils",
        "description": "gym.vector.utils",
        "isExtraImport": true,
        "detail": "gym.vector.utils",
        "documentation": {}
    },
    {
        "label": "create_shared_memory",
        "importPath": "gym.vector.utils",
        "description": "gym.vector.utils",
        "isExtraImport": true,
        "detail": "gym.vector.utils",
        "documentation": {}
    },
    {
        "label": "iterate",
        "importPath": "gym.vector.utils",
        "description": "gym.vector.utils",
        "isExtraImport": true,
        "detail": "gym.vector.utils",
        "documentation": {}
    },
    {
        "label": "read_from_shared_memory",
        "importPath": "gym.vector.utils",
        "description": "gym.vector.utils",
        "isExtraImport": true,
        "detail": "gym.vector.utils",
        "documentation": {}
    },
    {
        "label": "write_to_shared_memory",
        "importPath": "gym.vector.utils",
        "description": "gym.vector.utils",
        "isExtraImport": true,
        "detail": "gym.vector.utils",
        "documentation": {}
    },
    {
        "label": "concatenate",
        "importPath": "gym.vector.utils",
        "description": "gym.vector.utils",
        "isExtraImport": true,
        "detail": "gym.vector.utils",
        "documentation": {}
    },
    {
        "label": "create_empty_array",
        "importPath": "gym.vector.utils",
        "description": "gym.vector.utils",
        "isExtraImport": true,
        "detail": "gym.vector.utils",
        "documentation": {}
    },
    {
        "label": "iterate",
        "importPath": "gym.vector.utils",
        "description": "gym.vector.utils",
        "isExtraImport": true,
        "detail": "gym.vector.utils",
        "documentation": {}
    },
    {
        "label": "VectorEnv",
        "importPath": "gym.vector.vector_env",
        "description": "gym.vector.vector_env",
        "isExtraImport": true,
        "detail": "gym.vector.vector_env",
        "documentation": {}
    },
    {
        "label": "VectorEnv",
        "importPath": "gym.vector.vector_env",
        "description": "gym.vector.vector_env",
        "isExtraImport": true,
        "detail": "gym.vector.vector_env",
        "documentation": {}
    },
    {
        "label": "VectorEnv",
        "importPath": "gym.vector.vector_env",
        "description": "gym.vector.vector_env",
        "isExtraImport": true,
        "detail": "gym.vector.vector_env",
        "documentation": {}
    },
    {
        "label": "batch_space",
        "importPath": "gym.vector.utils.spaces",
        "description": "gym.vector.utils.spaces",
        "isExtraImport": true,
        "detail": "gym.vector.utils.spaces",
        "documentation": {}
    },
    {
        "label": "_BaseGymSpaces",
        "importPath": "gym.vector.utils.spaces",
        "description": "gym.vector.utils.spaces",
        "isExtraImport": true,
        "detail": "gym.vector.utils.spaces",
        "documentation": {}
    },
    {
        "label": "_BaseGymSpaces",
        "importPath": "gym.vector.utils.spaces",
        "description": "gym.vector.utils.spaces",
        "isExtraImport": true,
        "detail": "gym.vector.utils.spaces",
        "documentation": {}
    },
    {
        "label": "batch_space",
        "importPath": "gym.vector.utils.spaces",
        "description": "gym.vector.utils.spaces",
        "isExtraImport": true,
        "detail": "gym.vector.utils.spaces",
        "documentation": {}
    },
    {
        "label": "iterate",
        "importPath": "gym.vector.utils.spaces",
        "description": "gym.vector.utils.spaces",
        "isExtraImport": true,
        "detail": "gym.vector.utils.spaces",
        "documentation": {}
    },
    {
        "label": "pkgutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pkgutil",
        "description": "pkgutil",
        "detail": "pkgutil",
        "documentation": {}
    },
    {
        "label": "video_recorder",
        "importPath": "gym.wrappers.monitoring",
        "description": "gym.wrappers.monitoring",
        "isExtraImport": true,
        "detail": "gym.wrappers.monitoring",
        "documentation": {}
    },
    {
        "label": "RandomNumberGenerator",
        "importPath": "gym.utils.seeding",
        "description": "gym.utils.seeding",
        "isExtraImport": true,
        "detail": "gym.utils.seeding",
        "documentation": {}
    },
    {
        "label": "RandomNumberGenerator",
        "importPath": "gym.utils.seeding",
        "description": "gym.utils.seeding",
        "isExtraImport": true,
        "detail": "gym.utils.seeding",
        "documentation": {}
    },
    {
        "label": "SKIP_MUJOCO_WARNING_MESSAGE",
        "importPath": "tests.envs.spec_list",
        "description": "tests.envs.spec_list",
        "isExtraImport": true,
        "detail": "tests.envs.spec_list",
        "documentation": {}
    },
    {
        "label": "skip_mujoco",
        "importPath": "tests.envs.spec_list",
        "description": "tests.envs.spec_list",
        "isExtraImport": true,
        "detail": "tests.envs.spec_list",
        "documentation": {}
    },
    {
        "label": "spec_list",
        "importPath": "tests.envs.spec_list",
        "description": "tests.envs.spec_list",
        "isExtraImport": true,
        "detail": "tests.envs.spec_list",
        "documentation": {}
    },
    {
        "label": "spec_list",
        "importPath": "tests.envs.spec_list",
        "description": "tests.envs.spec_list",
        "isExtraImport": true,
        "detail": "tests.envs.spec_list",
        "documentation": {}
    },
    {
        "label": "SKIP_MUJOCO_WARNING_MESSAGE",
        "importPath": "tests.envs.spec_list",
        "description": "tests.envs.spec_list",
        "isExtraImport": true,
        "detail": "tests.envs.spec_list",
        "documentation": {}
    },
    {
        "label": "skip_mujoco",
        "importPath": "tests.envs.spec_list",
        "description": "tests.envs.spec_list",
        "isExtraImport": true,
        "detail": "tests.envs.spec_list",
        "documentation": {}
    },
    {
        "label": "spec_list",
        "importPath": "tests.envs.spec_list",
        "description": "tests.envs.spec_list",
        "isExtraImport": true,
        "detail": "tests.envs.spec_list",
        "documentation": {}
    },
    {
        "label": "spec_list",
        "importPath": "tests.envs.spec_list",
        "description": "tests.envs.spec_list",
        "isExtraImport": true,
        "detail": "tests.envs.spec_list",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "gym.envs.registration",
        "description": "gym.envs.registration",
        "isExtraImport": true,
        "detail": "gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "EnvSpec",
        "importPath": "gym.envs.registration",
        "description": "gym.envs.registration",
        "isExtraImport": true,
        "detail": "gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "check_env",
        "importPath": "gym.utils.env_checker",
        "description": "gym.utils.env_checker",
        "isExtraImport": true,
        "detail": "gym.utils.env_checker",
        "documentation": {}
    },
    {
        "label": "check_env",
        "importPath": "gym.utils.env_checker",
        "description": "gym.utils.env_checker",
        "isExtraImport": true,
        "detail": "gym.utils.env_checker",
        "documentation": {}
    },
    {
        "label": "generate_random_map",
        "importPath": "gym.envs.toy_text.frozen_lake",
        "description": "gym.envs.toy_text.frozen_lake",
        "isExtraImport": true,
        "detail": "gym.envs.toy_text.frozen_lake",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "gym.envs",
        "description": "gym.envs",
        "isExtraImport": true,
        "detail": "gym.envs",
        "documentation": {}
    },
    {
        "label": "registration",
        "importPath": "gym.envs",
        "description": "gym.envs",
        "isExtraImport": true,
        "detail": "gym.envs",
        "documentation": {}
    },
    {
        "label": "registry",
        "importPath": "gym.envs",
        "description": "gym.envs",
        "isExtraImport": true,
        "detail": "gym.envs",
        "documentation": {}
    },
    {
        "label": "spec",
        "importPath": "gym.envs",
        "description": "gym.envs",
        "isExtraImport": true,
        "detail": "gym.envs",
        "documentation": {}
    },
    {
        "label": "cartpole",
        "importPath": "gym.envs.classic_control",
        "description": "gym.envs.classic_control",
        "isExtraImport": true,
        "detail": "gym.envs.classic_control",
        "documentation": {}
    },
    {
        "label": "MissingKeysToAction",
        "importPath": "gym.utils.play",
        "description": "gym.utils.play",
        "isExtraImport": true,
        "detail": "gym.utils.play",
        "documentation": {}
    },
    {
        "label": "PlayableGame",
        "importPath": "gym.utils.play",
        "description": "gym.utils.play",
        "isExtraImport": true,
        "detail": "gym.utils.play",
        "documentation": {}
    },
    {
        "label": "play",
        "importPath": "gym.utils.play",
        "description": "gym.utils.play",
        "isExtraImport": true,
        "detail": "gym.utils.play",
        "documentation": {}
    },
    {
        "label": "AsyncVectorEnv",
        "importPath": "gym.vector.async_vector_env",
        "description": "gym.vector.async_vector_env",
        "isExtraImport": true,
        "detail": "gym.vector.async_vector_env",
        "documentation": {}
    },
    {
        "label": "AsyncVectorEnv",
        "importPath": "gym.vector.async_vector_env",
        "description": "gym.vector.async_vector_env",
        "isExtraImport": true,
        "detail": "gym.vector.async_vector_env",
        "documentation": {}
    },
    {
        "label": "CustomSpace",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "make_custom_space_env",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "make_env",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "make_slow_env",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "custom_spaces",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "CustomSpace",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "assert_rng_equal",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "custom_spaces",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "spaces",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "CustomSpace",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "assert_rng_equal",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "make_custom_space_env",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "make_env",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "CustomSpace",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "make_env",
        "importPath": "tests.vector.utils",
        "description": "tests.vector.utils",
        "isExtraImport": true,
        "detail": "tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "concatenate",
        "importPath": "gym.vector.utils.numpy_utils",
        "description": "gym.vector.utils.numpy_utils",
        "isExtraImport": true,
        "detail": "gym.vector.utils.numpy_utils",
        "documentation": {}
    },
    {
        "label": "create_empty_array",
        "importPath": "gym.vector.utils.numpy_utils",
        "description": "gym.vector.utils.numpy_utils",
        "isExtraImport": true,
        "detail": "gym.vector.utils.numpy_utils",
        "documentation": {}
    },
    {
        "label": "SynchronizedArray",
        "importPath": "multiprocessing.sharedctypes",
        "description": "multiprocessing.sharedctypes",
        "isExtraImport": true,
        "detail": "multiprocessing.sharedctypes",
        "documentation": {}
    },
    {
        "label": "create_shared_memory",
        "importPath": "gym.vector.utils.shared_memory",
        "description": "gym.vector.utils.shared_memory",
        "isExtraImport": true,
        "detail": "gym.vector.utils.shared_memory",
        "documentation": {}
    },
    {
        "label": "read_from_shared_memory",
        "importPath": "gym.vector.utils.shared_memory",
        "description": "gym.vector.utils.shared_memory",
        "isExtraImport": true,
        "detail": "gym.vector.utils.shared_memory",
        "documentation": {}
    },
    {
        "label": "write_to_shared_memory",
        "importPath": "gym.vector.utils.shared_memory",
        "description": "gym.vector.utils.shared_memory",
        "isExtraImport": true,
        "detail": "gym.vector.utils.shared_memory",
        "documentation": {}
    },
    {
        "label": "assert_array_equal",
        "importPath": "numpy.testing",
        "description": "numpy.testing",
        "isExtraImport": true,
        "detail": "numpy.testing",
        "documentation": {}
    },
    {
        "label": "assert_almost_equal",
        "importPath": "numpy.testing",
        "description": "numpy.testing",
        "isExtraImport": true,
        "detail": "numpy.testing",
        "documentation": {}
    },
    {
        "label": "SyncVectorEnv",
        "importPath": "gym.vector.sync_vector_env",
        "description": "gym.vector.sync_vector_env",
        "isExtraImport": true,
        "detail": "gym.vector.sync_vector_env",
        "documentation": {}
    },
    {
        "label": "SyncVectorEnv",
        "importPath": "gym.vector.sync_vector_env",
        "description": "gym.vector.sync_vector_env",
        "isExtraImport": true,
        "detail": "gym.vector.sync_vector_env",
        "documentation": {}
    },
    {
        "label": "VectorEnvWrapper",
        "importPath": "gym.vector",
        "description": "gym.vector",
        "isExtraImport": true,
        "detail": "gym.vector",
        "documentation": {}
    },
    {
        "label": "make",
        "importPath": "gym.vector",
        "description": "gym.vector",
        "isExtraImport": true,
        "detail": "gym.vector",
        "documentation": {}
    },
    {
        "label": "FilterObservation",
        "importPath": "gym.wrappers.filter_observation",
        "description": "gym.wrappers.filter_observation",
        "isExtraImport": true,
        "detail": "gym.wrappers.filter_observation",
        "documentation": {}
    },
    {
        "label": "NormalizeObservation",
        "importPath": "gym.wrappers.normalize",
        "description": "gym.wrappers.normalize",
        "isExtraImport": true,
        "detail": "gym.wrappers.normalize",
        "documentation": {}
    },
    {
        "label": "NormalizeReward",
        "importPath": "gym.wrappers.normalize",
        "description": "gym.wrappers.normalize",
        "isExtraImport": true,
        "detail": "gym.wrappers.normalize",
        "documentation": {}
    },
    {
        "label": "STATE_KEY",
        "importPath": "gym.wrappers.pixel_observation",
        "description": "gym.wrappers.pixel_observation",
        "isExtraImport": true,
        "detail": "gym.wrappers.pixel_observation",
        "documentation": {}
    },
    {
        "label": "PixelObservationWrapper",
        "importPath": "gym.wrappers.pixel_observation",
        "description": "gym.wrappers.pixel_observation",
        "isExtraImport": true,
        "detail": "gym.wrappers.pixel_observation",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "VideoRecorder",
        "importPath": "gym.wrappers.monitoring.video_recorder",
        "description": "gym.wrappers.monitoring.video_recorder",
        "isExtraImport": true,
        "detail": "gym.wrappers.monitoring.video_recorder",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "importPath": "version",
        "description": "version",
        "isExtraImport": true,
        "detail": "version",
        "documentation": {}
    },
    {
        "label": "gnome_name",
        "importPath": "gnome_basic",
        "description": "gnome_basic",
        "isExtraImport": true,
        "detail": "gnome_basic",
        "documentation": {}
    },
    {
        "label": "demo_variable_imported_from_module",
        "importPath": "module_example",
        "description": "module_example",
        "isExtraImport": true,
        "detail": "module_example",
        "documentation": {}
    },
    {
        "label": "test_gym_wrapper",
        "kind": 2,
        "importPath": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "description": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "peekOfCode": "def test_gym_wrapper():\n    mock_env = mock.MagicMock()\n    mock_spec = create_mock_group_spec()\n    mock_decision_step, mock_terminal_step = create_mock_vector_steps(mock_spec)\n    setup_mock_unityenvironment(\n        mock_env, mock_spec, mock_decision_step, mock_terminal_step\n    )\n    env = UnityToGymWrapper(mock_env)\n    assert isinstance(env.reset(), np.ndarray)\n    actions = env.action_space.sample()",
        "detail": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "documentation": {}
    },
    {
        "label": "test_branched_flatten",
        "kind": 2,
        "importPath": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "description": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "peekOfCode": "def test_branched_flatten():\n    mock_env = mock.MagicMock()\n    mock_spec = create_mock_group_spec(\n        vector_action_space_type=\"discrete\", vector_action_space_size=[2, 2, 3]\n    )\n    mock_decision_step, mock_terminal_step = create_mock_vector_steps(\n        mock_spec, num_agents=1\n    )\n    setup_mock_unityenvironment(\n        mock_env, mock_spec, mock_decision_step, mock_terminal_step",
        "detail": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "documentation": {}
    },
    {
        "label": "test_action_space",
        "kind": 2,
        "importPath": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "description": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "peekOfCode": "def test_action_space():\n    mock_env = mock.MagicMock()\n    mock_spec = create_mock_group_spec(\n        vector_action_space_type=\"discrete\", vector_action_space_size=[5]\n    )\n    mock_decision_step, mock_terminal_step = create_mock_vector_steps(\n        mock_spec, num_agents=1\n    )\n    setup_mock_unityenvironment(\n        mock_env, mock_spec, mock_decision_step, mock_terminal_step",
        "detail": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "documentation": {}
    },
    {
        "label": "test_action_space_seed",
        "kind": 2,
        "importPath": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "description": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "peekOfCode": "def test_action_space_seed():\n    mock_env = mock.MagicMock()\n    mock_spec = create_mock_group_spec()\n    mock_decision_step, mock_terminal_step = create_mock_vector_steps(mock_spec)\n    setup_mock_unityenvironment(\n        mock_env, mock_spec, mock_decision_step, mock_terminal_step\n    )\n    actions = []\n    for _ in range(0, 2):\n        env = UnityToGymWrapper(mock_env, action_space_seed=1337)",
        "detail": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "documentation": {}
    },
    {
        "label": "test_gym_wrapper_visual",
        "kind": 2,
        "importPath": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "description": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "peekOfCode": "def test_gym_wrapper_visual(use_uint8):\n    mock_env = mock.MagicMock()\n    mock_spec = create_mock_group_spec(\n        number_visual_observations=1, vector_observation_space_size=0\n    )\n    mock_decision_step, mock_terminal_step = create_mock_vector_steps(\n        mock_spec, number_visual_observations=1\n    )\n    setup_mock_unityenvironment(\n        mock_env, mock_spec, mock_decision_step, mock_terminal_step",
        "detail": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "documentation": {}
    },
    {
        "label": "test_gym_wrapper_single_visual_and_vector",
        "kind": 2,
        "importPath": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "description": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "peekOfCode": "def test_gym_wrapper_single_visual_and_vector(use_uint8):\n    mock_env = mock.MagicMock()\n    mock_spec = create_mock_group_spec(\n        number_visual_observations=1,\n        vector_observation_space_size=3,\n        vector_action_space_size=[2],\n    )\n    mock_decision_step, mock_terminal_step = create_mock_vector_steps(\n        mock_spec, number_visual_observations=1\n    )",
        "detail": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "documentation": {}
    },
    {
        "label": "test_gym_wrapper_multi_visual_and_vector",
        "kind": 2,
        "importPath": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "description": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "peekOfCode": "def test_gym_wrapper_multi_visual_and_vector(use_uint8):\n    mock_env = mock.MagicMock()\n    mock_spec = create_mock_group_spec(\n        number_visual_observations=2,\n        vector_observation_space_size=3,\n        vector_action_space_size=[2],\n    )\n    mock_decision_step, mock_terminal_step = create_mock_vector_steps(\n        mock_spec, number_visual_observations=2\n    )",
        "detail": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "documentation": {}
    },
    {
        "label": "create_mock_group_spec",
        "kind": 2,
        "importPath": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "description": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "peekOfCode": "def create_mock_group_spec(\n    number_visual_observations=0,\n    vector_action_space_type=\"continuous\",\n    vector_observation_space_size=3,\n    vector_action_space_size=None,\n):\n    \"\"\"\n    Creates a mock BrainParameters object with parameters.\n    \"\"\"\n    # Avoid using mutable object as default param",
        "detail": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "documentation": {}
    },
    {
        "label": "create_mock_vector_steps",
        "kind": 2,
        "importPath": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "description": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "peekOfCode": "def create_mock_vector_steps(specs, num_agents=1, number_visual_observations=0):\n    \"\"\"\n    Creates a mock BatchedStepResult with vector observations. Imitates constant\n    vector observations, rewards, dones, and agents.\n    :BehaviorSpecs specs: The BehaviorSpecs for this mock\n    :int num_agents: Number of \"agents\" to imitate in your BatchedStepResult values.\n    \"\"\"\n    obs = [np.array([num_agents * [1, 2, 3]], dtype=np.float32).reshape(num_agents, 3)]\n    if number_visual_observations:\n        obs += [",
        "detail": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "documentation": {}
    },
    {
        "label": "setup_mock_unityenvironment",
        "kind": 2,
        "importPath": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "description": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "peekOfCode": "def setup_mock_unityenvironment(mock_env, mock_spec, mock_decision, mock_termination):\n    \"\"\"\n    Takes a mock UnityEnvironment and adds the appropriate properties, defined by the mock\n    GroupSpec and BatchedStepResult.\n    :Mock mock_env: A mock UnityEnvironment, usually empty.\n    :Mock mock_spec: An AgentGroupSpec object that specifies the params of this environment.\n    :Mock mock_decision: A DecisionSteps object that will be returned at each step and reset.\n    :Mock mock_termination: A TerminationSteps object that will be returned at each step and reset.\n    \"\"\"\n    mock_env.behavior_specs = BehaviorMapping({\"MockBrain\": mock_spec})",
        "detail": "ml-agents-unity.gym-unity.gym_unity.tests.test_gym",
        "documentation": {}
    },
    {
        "label": "VerifyVersionCommand",
        "kind": 6,
        "importPath": "ml-agents-unity.gym-unity.setup",
        "description": "ml-agents-unity.gym-unity.setup",
        "peekOfCode": "class VerifyVersionCommand(install):\n    \"\"\"\n    Custom command to verify that the git tag is the expected one for the release.\n    Originally based on https://circleci.com/blog/continuously-deploying-python-packages-to-pypi-with-circleci/\n    This differs slightly because our tags and versions are different.\n    \"\"\"\n    description = \"verify that the git tag matches our version\"\n    def run(self):\n        tag = os.getenv(\"GITHUB_REF\", \"NO GITHUB TAG!\").replace(\"refs/tags/\", \"\")\n        if tag != EXPECTED_TAG:",
        "detail": "ml-agents-unity.gym-unity.setup",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "ml-agents-unity.gym-unity.setup",
        "description": "ml-agents-unity.gym-unity.setup",
        "peekOfCode": "VERSION = gym_unity.__version__\nEXPECTED_TAG = gym_unity.__release_tag__\nclass VerifyVersionCommand(install):\n    \"\"\"\n    Custom command to verify that the git tag is the expected one for the release.\n    Originally based on https://circleci.com/blog/continuously-deploying-python-packages-to-pypi-with-circleci/\n    This differs slightly because our tags and versions are different.\n    \"\"\"\n    description = \"verify that the git tag matches our version\"\n    def run(self):",
        "detail": "ml-agents-unity.gym-unity.setup",
        "documentation": {}
    },
    {
        "label": "EXPECTED_TAG",
        "kind": 5,
        "importPath": "ml-agents-unity.gym-unity.setup",
        "description": "ml-agents-unity.gym-unity.setup",
        "peekOfCode": "EXPECTED_TAG = gym_unity.__release_tag__\nclass VerifyVersionCommand(install):\n    \"\"\"\n    Custom command to verify that the git tag is the expected one for the release.\n    Originally based on https://circleci.com/blog/continuously-deploying-python-packages-to-pypi-with-circleci/\n    This differs slightly because our tags and versions are different.\n    \"\"\"\n    description = \"verify that the git tag matches our version\"\n    def run(self):\n        tag = os.getenv(\"GITHUB_REF\", \"NO GITHUB TAG!\").replace(\"refs/tags/\", \"\")",
        "detail": "ml-agents-unity.gym-unity.setup",
        "documentation": {}
    },
    {
        "label": "get_default_stats_writers",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.plugins.stats_writer",
        "description": "ml-agents-unity.ml-agents.mlagents.plugins.stats_writer",
        "peekOfCode": "def get_default_stats_writers(run_options: RunOptions) -> List[StatsWriter]:\n    \"\"\"\n    The StatsWriters that mlagents-learn always uses:\n    * A TensorboardWriter to write information to TensorBoard\n    * A GaugeWriter to record our internal stats\n    * A ConsoleWriter to output to stdout.\n    \"\"\"\n    checkpoint_settings = run_options.checkpoint_settings\n    return [\n        TensorboardWriter(",
        "detail": "ml-agents-unity.ml-agents.mlagents.plugins.stats_writer",
        "documentation": {}
    },
    {
        "label": "register_stats_writer_plugins",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.plugins.stats_writer",
        "description": "ml-agents-unity.ml-agents.mlagents.plugins.stats_writer",
        "peekOfCode": "def register_stats_writer_plugins(run_options: RunOptions) -> List[StatsWriter]:\n    \"\"\"\n    Registers all StatsWriter plugins (including the default one),\n    and evaluates them, and returns the list of all the StatsWriter implementations.\n    \"\"\"\n    all_stats_writers: List[StatsWriter] = []\n    if ML_AGENTS_STATS_WRITER not in importlib_metadata.entry_points():\n        logger.warning(\n            f\"Unable to find any entry points for {ML_AGENTS_STATS_WRITER}, even the default ones. \"\n            \"Uninstalling and reinstalling ml-agents via pip should resolve. \"",
        "detail": "ml-agents-unity.ml-agents.mlagents.plugins.stats_writer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.plugins.stats_writer",
        "description": "ml-agents-unity.ml-agents.mlagents.plugins.stats_writer",
        "peekOfCode": "logger = logging_util.get_logger(__name__)\ndef get_default_stats_writers(run_options: RunOptions) -> List[StatsWriter]:\n    \"\"\"\n    The StatsWriters that mlagents-learn always uses:\n    * A TensorboardWriter to write information to TensorBoard\n    * A GaugeWriter to record our internal stats\n    * A ConsoleWriter to output to stdout.\n    \"\"\"\n    checkpoint_settings = run_options.checkpoint_settings\n    return [",
        "detail": "ml-agents-unity.ml-agents.mlagents.plugins.stats_writer",
        "documentation": {}
    },
    {
        "label": "get_num_threads_to_use",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.torch_utils.cpu_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.torch_utils.cpu_utils",
        "peekOfCode": "def get_num_threads_to_use() -> Optional[int]:\n    \"\"\"\n    Gets the number of threads to use. For most problems, 4 is all you\n    need, but for smaller machines, we'd like to scale to less than that.\n    By default, PyTorch uses 1/2 of the available cores.\n    \"\"\"\n    num_cpus = _get_num_available_cpus()\n    return max(min(num_cpus // 2, 4), 1) if num_cpus is not None else None\ndef _get_num_available_cpus() -> Optional[int]:\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.torch_utils.cpu_utils",
        "documentation": {}
    },
    {
        "label": "get_rank",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.torch_utils.globals",
        "description": "ml-agents-unity.ml-agents.mlagents.torch_utils.globals",
        "peekOfCode": "def get_rank() -> Optional[int]:\n    \"\"\"\n    Returns the rank (in the MPI sense) of the current node.\n    For local training, this will always be None.\n    If this needs to be used, it should be done from outside ml-agents.\n    :return:\n    \"\"\"\n    return _rank",
        "detail": "ml-agents-unity.ml-agents.mlagents.torch_utils.globals",
        "documentation": {}
    },
    {
        "label": "assert_torch_installed",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "description": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "peekOfCode": "def assert_torch_installed():\n    # Check that torch version 1.6.0 or later has been installed. If not, refer\n    # user to the PyTorch webpage for install instructions.\n    torch_pkg = None\n    try:\n        torch_pkg = pkg_resources.get_distribution(\"torch\")\n    except pkg_resources.DistributionNotFound:\n        pass\n    assert torch_pkg is not None and LooseVersion(torch_pkg.version) >= LooseVersion(\n        \"1.6.0\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "documentation": {}
    },
    {
        "label": "set_torch_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "description": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "peekOfCode": "def set_torch_config(torch_settings: TorchSettings) -> None:\n    global _device\n    if torch_settings.device is None:\n        device_str = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n    else:\n        device_str = torch_settings.device\n    _device = torch.device(device_str)\n    if _device.type == \"cuda\":\n        torch.set_default_tensor_type(torch.cuda.FloatTensor)\n    else:",
        "detail": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "documentation": {}
    },
    {
        "label": "default_device",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "description": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "peekOfCode": "def default_device():\n    return _device",
        "detail": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "description": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "peekOfCode": "logger = get_logger(__name__)\ndef assert_torch_installed():\n    # Check that torch version 1.6.0 or later has been installed. If not, refer\n    # user to the PyTorch webpage for install instructions.\n    torch_pkg = None\n    try:\n        torch_pkg = pkg_resources.get_distribution(\"torch\")\n    except pkg_resources.DistributionNotFound:\n        pass\n    assert torch_pkg is not None and LooseVersion(torch_pkg.version) >= LooseVersion(",
        "detail": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "documentation": {}
    },
    {
        "label": "os.environ[\"KMP_BLOCKTIME\"]",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "description": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "peekOfCode": "os.environ[\"KMP_BLOCKTIME\"] = \"0\"\n_device = torch.device(\"cpu\")\ndef set_torch_config(torch_settings: TorchSettings) -> None:\n    global _device\n    if torch_settings.device is None:\n        device_str = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n    else:\n        device_str = torch_settings.device\n    _device = torch.device(device_str)\n    if _device.type == \"cuda\":",
        "detail": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "documentation": {}
    },
    {
        "label": "_device",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "description": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "peekOfCode": "_device = torch.device(\"cpu\")\ndef set_torch_config(torch_settings: TorchSettings) -> None:\n    global _device\n    if torch_settings.device is None:\n        device_str = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n    else:\n        device_str = torch_settings.device\n    _device = torch.device(device_str)\n    if _device.type == \"cuda\":\n        torch.set_default_tensor_type(torch.cuda.FloatTensor)",
        "detail": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "documentation": {}
    },
    {
        "label": "nn",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "description": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "peekOfCode": "nn = torch.nn\ndef default_device():\n    return _device",
        "detail": "ml-agents-unity.ml-agents.mlagents.torch_utils.torch",
        "documentation": {}
    },
    {
        "label": "GhostController",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.ghost.controller",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.ghost.controller",
        "peekOfCode": "class GhostController:\n    \"\"\"\n    GhostController contains a queue of team ids. GhostTrainers subscribe to the GhostController and query\n    it to get the current learning team.  The GhostController cycles through team ids every 'swap_interval'\n    which corresponds to the number of trainer steps between changing learning teams.\n    The GhostController is a unique object and there can only be one per training run.\n    \"\"\"\n    def __init__(self, maxlen: int = 10):\n        \"\"\"\n        Create a GhostController.",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.ghost.controller",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.ghost.controller",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.ghost.controller",
        "peekOfCode": "logger = get_logger(__name__)\nclass GhostController:\n    \"\"\"\n    GhostController contains a queue of team ids. GhostTrainers subscribe to the GhostController and query\n    it to get the current learning team.  The GhostController cycles through team ids every 'swap_interval'\n    which corresponds to the number of trainer steps between changing learning teams.\n    The GhostController is a unique object and there can only be one per training run.\n    \"\"\"\n    def __init__(self, maxlen: int = 10):\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.ghost.controller",
        "documentation": {}
    },
    {
        "label": "GhostTrainer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.ghost.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.ghost.trainer",
        "peekOfCode": "class GhostTrainer(Trainer):\n    \"\"\"\n    The GhostTrainer trains agents in adversarial games (there are teams in opposition) using a self-play mechanism.\n    In adversarial settings with self-play, at any time, there is only a single learning team. The other team(s) is\n    \"ghosted\" which means that its agents are executing fixed policies and not learning. The GhostTrainer wraps\n    a standard RL trainer which trains the learning team and ensures that only the trajectories collected\n    by the learning team are used for training.  The GhostTrainer also maintains past policy snapshots to be used\n    as the fixed policies when the team is not learning. The GhostTrainer is 1:1 with brain_names as the other\n    trainers, and is responsible for one or more teams. Note, a GhostTrainer can have only one team in\n    asymmetric games where there is only one team with a particular behavior i.e. Hide and Seek.",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.ghost.trainer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.ghost.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.ghost.trainer",
        "peekOfCode": "logger = get_logger(__name__)\nclass GhostTrainer(Trainer):\n    \"\"\"\n    The GhostTrainer trains agents in adversarial games (there are teams in opposition) using a self-play mechanism.\n    In adversarial settings with self-play, at any time, there is only a single learning team. The other team(s) is\n    \"ghosted\" which means that its agents are executing fixed policies and not learning. The GhostTrainer wraps\n    a standard RL trainer which trains the learning team and ensures that only the trajectories collected\n    by the learning team are used for training.  The GhostTrainer also maintains past policy snapshots to be used\n    as the fixed policies when the team is not learning. The GhostTrainer is 1:1 with brain_names as the other\n    trainers, and is responsible for one or more teams. Note, a GhostTrainer can have only one team in",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.ghost.trainer",
        "documentation": {}
    },
    {
        "label": "BaseModelSaver",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.model_saver.model_saver",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.model_saver.model_saver",
        "peekOfCode": "class BaseModelSaver(abc.ABC):\n    \"\"\"This class is the base class for the ModelSaver\"\"\"\n    def __init__(self):\n        pass\n    @abc.abstractmethod\n    def register(self, module: Any) -> None:\n        \"\"\"\n        Register the modules to the ModelSaver.\n        The ModelSaver will store the module and include it in the saved files\n        when saving checkpoint/exporting graph.",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.model_saver.model_saver",
        "documentation": {}
    },
    {
        "label": "TorchModelSaver",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.model_saver.torch_model_saver",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.model_saver.torch_model_saver",
        "peekOfCode": "class TorchModelSaver(BaseModelSaver):\n    \"\"\"\n    ModelSaver class for PyTorch\n    \"\"\"\n    def __init__(\n        self, trainer_settings: TrainerSettings, model_path: str, load: bool = False\n    ):\n        super().__init__()\n        self.model_path = model_path\n        self.initialize_path = trainer_settings.init_path",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.model_saver.torch_model_saver",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.model_saver.torch_model_saver",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.model_saver.torch_model_saver",
        "peekOfCode": "logger = get_logger(__name__)\nDEFAULT_CHECKPOINT_NAME = \"checkpoint.pt\"\nclass TorchModelSaver(BaseModelSaver):\n    \"\"\"\n    ModelSaver class for PyTorch\n    \"\"\"\n    def __init__(\n        self, trainer_settings: TrainerSettings, model_path: str, load: bool = False\n    ):\n        super().__init__()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.model_saver.torch_model_saver",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CHECKPOINT_NAME",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.model_saver.torch_model_saver",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.model_saver.torch_model_saver",
        "peekOfCode": "DEFAULT_CHECKPOINT_NAME = \"checkpoint.pt\"\nclass TorchModelSaver(BaseModelSaver):\n    \"\"\"\n    ModelSaver class for PyTorch\n    \"\"\"\n    def __init__(\n        self, trainer_settings: TrainerSettings, model_path: str, load: bool = False\n    ):\n        super().__init__()\n        self.model_path = model_path",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.model_saver.torch_model_saver",
        "documentation": {}
    },
    {
        "label": "Optimizer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.optimizer.optimizer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.optimizer.optimizer",
        "peekOfCode": "class Optimizer(abc.ABC):\n    \"\"\"\n    Creates loss functions and auxillary networks (e.g. Q or Value) needed for training.\n    Provides methods to update the Policy.\n    \"\"\"\n    def __init__(self):\n        self.reward_signals = {}\n    @abc.abstractmethod\n    def update(self, batch: AgentBuffer, num_sequences: int) -> Dict[str, float]:\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.optimizer.optimizer",
        "documentation": {}
    },
    {
        "label": "TorchOptimizer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.optimizer.torch_optimizer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.optimizer.torch_optimizer",
        "peekOfCode": "class TorchOptimizer(Optimizer):\n    def __init__(self, policy: TorchPolicy, trainer_settings: TrainerSettings):\n        super().__init__()\n        self.policy = policy\n        self.trainer_settings = trainer_settings\n        self.update_dict: Dict[str, torch.Tensor] = {}\n        self.value_heads: Dict[str, torch.Tensor] = {}\n        self.memory_in: torch.Tensor = None\n        self.memory_out: torch.Tensor = None\n        self.m_size: int = 0",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.optimizer.torch_optimizer",
        "documentation": {}
    },
    {
        "label": "TorchPOCAOptimizer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.poca.optimizer_torch",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.poca.optimizer_torch",
        "peekOfCode": "class TorchPOCAOptimizer(TorchOptimizer):\n    class POCAValueNetwork(torch.nn.Module, Critic):\n        \"\"\"\n        The POCAValueNetwork uses the MultiAgentNetworkBody to compute the value\n        and POCA baseline for a variable number of agents in a group that all\n        share the same observation and action space.\n        \"\"\"\n        def __init__(\n            self,\n            stream_names: List[str],",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.poca.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.poca.optimizer_torch",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.poca.optimizer_torch",
        "peekOfCode": "logger = get_logger(__name__)\nclass TorchPOCAOptimizer(TorchOptimizer):\n    class POCAValueNetwork(torch.nn.Module, Critic):\n        \"\"\"\n        The POCAValueNetwork uses the MultiAgentNetworkBody to compute the value\n        and POCA baseline for a variable number of agents in a group that all\n        share the same observation and action space.\n        \"\"\"\n        def __init__(\n            self,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.poca.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "POCATrainer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.poca.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.poca.trainer",
        "peekOfCode": "class POCATrainer(RLTrainer):\n    \"\"\"The POCATrainer is an implementation of the MA-POCA algorithm.\"\"\"\n    def __init__(\n        self,\n        behavior_name: str,\n        reward_buff_cap: int,\n        trainer_settings: TrainerSettings,\n        training: bool,\n        load: bool,\n        seed: int,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.poca.trainer",
        "documentation": {}
    },
    {
        "label": "lambda_return",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.poca.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.poca.trainer",
        "peekOfCode": "def lambda_return(r, value_estimates, gamma=0.99, lambd=0.8, value_next=0.0):\n    returns = np.zeros_like(r)\n    returns[-1] = r[-1] + gamma * value_next\n    for t in reversed(range(0, r.size - 1)):\n        returns[t] = (\n            gamma * lambd * returns[t + 1]\n            + r[t]\n            + (1 - lambd) * gamma * value_estimates[t + 1]\n        )\n    return returns",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.poca.trainer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.poca.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.poca.trainer",
        "peekOfCode": "logger = get_logger(__name__)\nclass POCATrainer(RLTrainer):\n    \"\"\"The POCATrainer is an implementation of the MA-POCA algorithm.\"\"\"\n    def __init__(\n        self,\n        behavior_name: str,\n        reward_buff_cap: int,\n        trainer_settings: TrainerSettings,\n        training: bool,\n        load: bool,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.poca.trainer",
        "documentation": {}
    },
    {
        "label": "ModelCheckpoint",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.policy.checkpoint_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.policy.checkpoint_manager",
        "peekOfCode": "class ModelCheckpoint:\n    steps: int\n    file_path: str\n    reward: Optional[float]\n    creation_time: float\n    auxillary_file_paths: List[str] = attr.ib(factory=list)\nclass ModelCheckpointManager:\n    @staticmethod\n    def get_checkpoints(behavior_name: str) -> List[Dict[str, Any]]:\n        checkpoint_list = GlobalTrainingStatus.get_parameter_state(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.policy.checkpoint_manager",
        "documentation": {}
    },
    {
        "label": "ModelCheckpointManager",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.policy.checkpoint_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.policy.checkpoint_manager",
        "peekOfCode": "class ModelCheckpointManager:\n    @staticmethod\n    def get_checkpoints(behavior_name: str) -> List[Dict[str, Any]]:\n        checkpoint_list = GlobalTrainingStatus.get_parameter_state(\n            behavior_name, StatusType.CHECKPOINTS\n        )\n        if not checkpoint_list:\n            checkpoint_list = []\n            GlobalTrainingStatus.set_parameter_state(\n                behavior_name, StatusType.CHECKPOINTS, checkpoint_list",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.policy.checkpoint_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.policy.checkpoint_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.policy.checkpoint_manager",
        "peekOfCode": "logger = get_logger(__name__)\n@attr.s(auto_attribs=True)\nclass ModelCheckpoint:\n    steps: int\n    file_path: str\n    reward: Optional[float]\n    creation_time: float\n    auxillary_file_paths: List[str] = attr.ib(factory=list)\nclass ModelCheckpointManager:\n    @staticmethod",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.policy.checkpoint_manager",
        "documentation": {}
    },
    {
        "label": "UnityPolicyException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.policy.policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.policy.policy",
        "peekOfCode": "class UnityPolicyException(UnityException):\n    \"\"\"\n    Related to errors with the Trainer.\n    \"\"\"\n    pass\nclass Policy:\n    def __init__(\n        self,\n        seed: int,\n        behavior_spec: BehaviorSpec,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.policy.policy",
        "documentation": {}
    },
    {
        "label": "Policy",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.policy.policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.policy.policy",
        "peekOfCode": "class Policy:\n    def __init__(\n        self,\n        seed: int,\n        behavior_spec: BehaviorSpec,\n        trainer_settings: TrainerSettings,\n        tanh_squash: bool = False,\n        condition_sigma_on_obs: bool = True,\n    ):\n        self.behavior_spec = behavior_spec",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.policy.policy",
        "documentation": {}
    },
    {
        "label": "TorchPolicy",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.policy.torch_policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.policy.torch_policy",
        "peekOfCode": "class TorchPolicy(Policy):\n    def __init__(\n        self,\n        seed: int,\n        behavior_spec: BehaviorSpec,\n        trainer_settings: TrainerSettings,\n        tanh_squash: bool = False,\n        separate_critic: bool = True,\n        condition_sigma_on_obs: bool = True,\n    ):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "EPSILON",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.policy.torch_policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.policy.torch_policy",
        "peekOfCode": "EPSILON = 1e-7  # Small value to avoid divide by zero\nclass TorchPolicy(Policy):\n    def __init__(\n        self,\n        seed: int,\n        behavior_spec: BehaviorSpec,\n        trainer_settings: TrainerSettings,\n        tanh_squash: bool = False,\n        separate_critic: bool = True,\n        condition_sigma_on_obs: bool = True,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.policy.torch_policy",
        "documentation": {}
    },
    {
        "label": "TorchPPOOptimizer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.optimizer_torch",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.optimizer_torch",
        "peekOfCode": "class TorchPPOOptimizer(TorchOptimizer):\n    def __init__(self, policy: TorchPolicy, trainer_settings: TrainerSettings):\n        \"\"\"\n        Takes a Policy and a Dict of trainer parameters and creates an Optimizer around the policy.\n        The PPO optimizer has a value estimator and a loss function.\n        :param policy: A TorchPolicy object that will be updated by this PPO Optimizer.\n        :param trainer_params: Trainer parameters dictionary that specifies the\n        properties of the trainer.\n        \"\"\"\n        # Create the graph here to give more granular control of the TF graph to the Optimizer.",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "PPOTrainer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.trainer",
        "peekOfCode": "class PPOTrainer(RLTrainer):\n    \"\"\"The PPOTrainer is an implementation of the PPO algorithm.\"\"\"\n    def __init__(\n        self,\n        behavior_name: str,\n        reward_buff_cap: int,\n        trainer_settings: TrainerSettings,\n        training: bool,\n        load: bool,\n        seed: int,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.trainer",
        "documentation": {}
    },
    {
        "label": "discount_rewards",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.trainer",
        "peekOfCode": "def discount_rewards(r, gamma=0.99, value_next=0.0):\n    \"\"\"\n    Computes discounted sum of future rewards for use in updating value estimate.\n    :param r: List of rewards.\n    :param gamma: Discount factor.\n    :param value_next: T+1 value estimate for returns calculation.\n    :return: discounted sum of future rewards as list.\n    \"\"\"\n    discounted_r = np.zeros_like(r)\n    running_add = value_next",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.trainer",
        "documentation": {}
    },
    {
        "label": "get_gae",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.trainer",
        "peekOfCode": "def get_gae(rewards, value_estimates, value_next=0.0, gamma=0.99, lambd=0.95):\n    \"\"\"\n    Computes generalized advantage estimate for use in updating policy.\n    :param rewards: list of rewards for time-steps t to T.\n    :param value_next: Value estimate for time-step T+1.\n    :param value_estimates: list of value estimates for time-steps t to T.\n    :param gamma: Discount factor.\n    :param lambd: GAE weighing factor.\n    :return: list of advantage estimates for time-steps t to T.\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.trainer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.trainer",
        "peekOfCode": "logger = get_logger(__name__)\nclass PPOTrainer(RLTrainer):\n    \"\"\"The PPOTrainer is an implementation of the PPO algorithm.\"\"\"\n    def __init__(\n        self,\n        behavior_name: str,\n        reward_buff_cap: int,\n        trainer_settings: TrainerSettings,\n        training: bool,\n        load: bool,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.ppo.trainer",
        "documentation": {}
    },
    {
        "label": "TorchSACOptimizer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.sac.optimizer_torch",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.sac.optimizer_torch",
        "peekOfCode": "class TorchSACOptimizer(TorchOptimizer):\n    class PolicyValueNetwork(nn.Module):\n        def __init__(\n            self,\n            stream_names: List[str],\n            observation_specs: List[ObservationSpec],\n            network_settings: NetworkSettings,\n            action_spec: ActionSpec,\n        ):\n            super().__init__()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.sac.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "EPSILON",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.sac.optimizer_torch",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.sac.optimizer_torch",
        "peekOfCode": "EPSILON = 1e-6  # Small value to avoid divide by zero\nlogger = get_logger(__name__)\nclass TorchSACOptimizer(TorchOptimizer):\n    class PolicyValueNetwork(nn.Module):\n        def __init__(\n            self,\n            stream_names: List[str],\n            observation_specs: List[ObservationSpec],\n            network_settings: NetworkSettings,\n            action_spec: ActionSpec,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.sac.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.sac.optimizer_torch",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.sac.optimizer_torch",
        "peekOfCode": "logger = get_logger(__name__)\nclass TorchSACOptimizer(TorchOptimizer):\n    class PolicyValueNetwork(nn.Module):\n        def __init__(\n            self,\n            stream_names: List[str],\n            observation_specs: List[ObservationSpec],\n            network_settings: NetworkSettings,\n            action_spec: ActionSpec,\n        ):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.sac.optimizer_torch",
        "documentation": {}
    },
    {
        "label": "SACTrainer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.sac.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.sac.trainer",
        "peekOfCode": "class SACTrainer(RLTrainer):\n    \"\"\"\n    The SACTrainer is an implementation of the SAC algorithm, with support\n    for discrete actions and recurrent networks.\n    \"\"\"\n    def __init__(\n        self,\n        behavior_name: str,\n        reward_buff_cap: int,\n        trainer_settings: TrainerSettings,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.sac.trainer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.sac.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.sac.trainer",
        "peekOfCode": "logger = get_logger(__name__)\nBUFFER_TRUNCATE_PERCENT = 0.8\nclass SACTrainer(RLTrainer):\n    \"\"\"\n    The SACTrainer is an implementation of the SAC algorithm, with support\n    for discrete actions and recurrent networks.\n    \"\"\"\n    def __init__(\n        self,\n        behavior_name: str,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.sac.trainer",
        "documentation": {}
    },
    {
        "label": "BUFFER_TRUNCATE_PERCENT",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.sac.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.sac.trainer",
        "peekOfCode": "BUFFER_TRUNCATE_PERCENT = 0.8\nclass SACTrainer(RLTrainer):\n    \"\"\"\n    The SACTrainer is an implementation of the SAC algorithm, with support\n    for discrete actions and recurrent networks.\n    \"\"\"\n    def __init__(\n        self,\n        behavior_name: str,\n        reward_buff_cap: int,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.sac.trainer",
        "documentation": {}
    },
    {
        "label": "test_register",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "peekOfCode": "def test_register(tmp_path):\n    trainer_params = TrainerSettings()\n    model_saver = TorchModelSaver(trainer_params, tmp_path)\n    opt = mock.Mock(spec=TorchPPOOptimizer)\n    opt.get_modules = mock.Mock(return_value={})\n    model_saver.register(opt)\n    assert model_saver.policy is None\n    trainer_params = TrainerSettings()\n    policy = create_policy_mock(trainer_params)\n    opt.get_modules = mock.Mock(return_value={})",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "documentation": {}
    },
    {
        "label": "test_load_save_policy",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "peekOfCode": "def test_load_save_policy(tmp_path):\n    path1 = os.path.join(tmp_path, \"runid1\")\n    path2 = os.path.join(tmp_path, \"runid2\")\n    trainer_params = TrainerSettings()\n    policy = create_policy_mock(trainer_params)\n    model_saver = TorchModelSaver(trainer_params, path1)\n    model_saver.register(policy)\n    model_saver.initialize_or_load(policy)\n    policy.set_step(2000)\n    mock_brain_name = \"MockBrain\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "documentation": {}
    },
    {
        "label": "test_load_policy_different_hidden_units",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "peekOfCode": "def test_load_policy_different_hidden_units(tmp_path, vis_encode_type):\n    path1 = os.path.join(tmp_path, \"runid1\")\n    trainer_params = TrainerSettings()\n    trainer_params.network_settings = NetworkSettings(\n        hidden_units=12, vis_encode_type=EncoderType(vis_encode_type)\n    )\n    policy = create_policy_mock(trainer_params, use_visual=True)\n    conv_params = [mod for mod in policy.actor.parameters() if len(mod.shape) > 2]\n    model_saver = TorchModelSaver(trainer_params, path1)\n    model_saver.register(policy)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "documentation": {}
    },
    {
        "label": "test_load_save_optimizer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "peekOfCode": "def test_load_save_optimizer(tmp_path, optimizer):\n    OptimizerClass, HyperparametersClass = optimizer\n    trainer_settings = TrainerSettings()\n    trainer_settings.hyperparameters = HyperparametersClass()\n    policy = create_policy_mock(trainer_settings, use_discrete=False)\n    optimizer = OptimizerClass(policy, trainer_settings)\n    # save at path 1\n    path1 = os.path.join(tmp_path, \"runid1\")\n    model_saver = TorchModelSaver(trainer_settings, path1)\n    model_saver.register(policy)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "documentation": {}
    },
    {
        "label": "test_checkpoint_conversion",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "peekOfCode": "def test_checkpoint_conversion(tmpdir, rnn, visual, discrete):\n    dummy_config = TrainerSettings()\n    model_path = os.path.join(tmpdir, \"Mock_Brain\")\n    policy = create_policy_mock(\n        dummy_config, use_rnn=rnn, use_discrete=discrete, use_visual=visual\n    )\n    trainer_params = TrainerSettings()\n    model_saver = TorchModelSaver(trainer_params, model_path)\n    model_saver.register(policy)\n    model_saver.save_checkpoint(\"Mock_Brain\", 100)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver",
        "documentation": {}
    },
    {
        "label": "test_reward_provider_save",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver_reward_providers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver_reward_providers",
        "peekOfCode": "def test_reward_provider_save(tmp_path, optimizer):\n    OptimizerClass, HyperparametersClass = optimizer\n    trainer_settings = TrainerSettings()\n    trainer_settings.hyperparameters = HyperparametersClass()\n    trainer_settings.reward_signals = {\n        RewardSignalType.CURIOSITY: CuriositySettings(),\n        RewardSignalType.GAIL: GAILSettings(demo_path=DEMO_PATH),\n        RewardSignalType.RND: RNDSettings(),\n    }\n    policy = create_policy_mock(trainer_settings, use_discrete=False)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver_reward_providers",
        "documentation": {}
    },
    {
        "label": "test_load_different_reward_provider",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver_reward_providers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver_reward_providers",
        "peekOfCode": "def test_load_different_reward_provider(caplog, tmp_path, optimizer):\n    OptimizerClass, HyperparametersClass = optimizer\n    trainer_settings = TrainerSettings()\n    trainer_settings.hyperparameters = HyperparametersClass()\n    trainer_settings.reward_signals = {\n        RewardSignalType.CURIOSITY: CuriositySettings(),\n        RewardSignalType.RND: RNDSettings(),\n    }\n    policy = create_policy_mock(trainer_settings, use_discrete=False)\n    optimizer = OptimizerClass(policy, trainer_settings)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver_reward_providers",
        "documentation": {}
    },
    {
        "label": "DEMO_PATH",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver_reward_providers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver_reward_providers",
        "peekOfCode": "DEMO_PATH = (\n    os.path.join(os.path.dirname(os.path.abspath(__file__)), os.pardir, os.pardir)\n    + \"/test.demo\"\n)\n@pytest.mark.parametrize(\n    \"optimizer\",\n    [\n        (TorchPPOOptimizer, PPOSettings),\n        (TorchSACOptimizer, SACSettings),\n        (TorchPOCAOptimizer, POCASettings),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.saver.test_saver_reward_providers",
        "documentation": {}
    },
    {
        "label": "test_construction",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "peekOfCode": "def test_construction(behavior_spec: BehaviorSpec) -> None:\n    curiosity_settings = CuriositySettings(32, 0.01)\n    curiosity_settings.strength = 0.1\n    curiosity_rp = CuriosityRewardProvider(behavior_spec, curiosity_settings)\n    assert curiosity_rp.strength == 0.1\n    assert curiosity_rp.name == \"Curiosity\"\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [\n        BehaviorSpec(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "documentation": {}
    },
    {
        "label": "test_factory",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "peekOfCode": "def test_factory(behavior_spec: BehaviorSpec) -> None:\n    curiosity_settings = CuriositySettings(32, 0.01)\n    curiosity_rp = create_reward_provider(\n        RewardSignalType.CURIOSITY, behavior_spec, curiosity_settings\n    )\n    assert curiosity_rp.name == \"Curiosity\"\n@pytest.mark.parametrize(\"seed\", SEED)\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "documentation": {}
    },
    {
        "label": "test_reward_decreases",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "peekOfCode": "def test_reward_decreases(behavior_spec: BehaviorSpec, seed: int) -> None:\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    curiosity_settings = CuriositySettings(32, 0.01)\n    curiosity_rp = CuriosityRewardProvider(behavior_spec, curiosity_settings)\n    buffer = create_agent_buffer(behavior_spec, 5)\n    curiosity_rp.update(buffer)\n    reward_old = curiosity_rp.evaluate(buffer)[0]\n    for _ in range(20):\n        curiosity_rp.update(buffer)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "documentation": {}
    },
    {
        "label": "test_continuous_action_prediction",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "peekOfCode": "def test_continuous_action_prediction(behavior_spec: BehaviorSpec, seed: int) -> None:\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    curiosity_settings = CuriositySettings(32, 0.1)\n    curiosity_rp = CuriosityRewardProvider(behavior_spec, curiosity_settings)\n    buffer = create_agent_buffer(behavior_spec, 5)\n    for _ in range(200):\n        curiosity_rp.update(buffer)\n    prediction = curiosity_rp._network.predict_action(buffer)[0]\n    target = torch.tensor(buffer[BufferKey.CONTINUOUS_ACTION][0])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "documentation": {}
    },
    {
        "label": "test_next_state_prediction",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "peekOfCode": "def test_next_state_prediction(behavior_spec: BehaviorSpec, seed: int) -> None:\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    curiosity_settings = CuriositySettings(32, 0.1)\n    curiosity_rp = CuriosityRewardProvider(behavior_spec, curiosity_settings)\n    buffer = create_agent_buffer(behavior_spec, 5)\n    for _ in range(100):\n        curiosity_rp.update(buffer)\n    prediction = curiosity_rp._network.predict_next_state(buffer)[0]\n    target = curiosity_rp._network.get_next_state(buffer)[0]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "documentation": {}
    },
    {
        "label": "SEED",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "peekOfCode": "SEED = [42]\nACTIONSPEC_CONTINUOUS = ActionSpec.create_continuous(5)\nACTIONSPEC_TWODISCRETE = ActionSpec.create_discrete((2, 3))\nACTIONSPEC_DISCRETE = ActionSpec.create_discrete((2,))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_CONTINUOUS\n        ),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "documentation": {}
    },
    {
        "label": "ACTIONSPEC_CONTINUOUS",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "peekOfCode": "ACTIONSPEC_CONTINUOUS = ActionSpec.create_continuous(5)\nACTIONSPEC_TWODISCRETE = ActionSpec.create_discrete((2, 3))\nACTIONSPEC_DISCRETE = ActionSpec.create_discrete((2,))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_CONTINUOUS\n        ),\n        BehaviorSpec(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "documentation": {}
    },
    {
        "label": "ACTIONSPEC_TWODISCRETE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "peekOfCode": "ACTIONSPEC_TWODISCRETE = ActionSpec.create_discrete((2, 3))\nACTIONSPEC_DISCRETE = ActionSpec.create_discrete((2,))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_CONTINUOUS\n        ),\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_TWODISCRETE",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "documentation": {}
    },
    {
        "label": "ACTIONSPEC_DISCRETE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "peekOfCode": "ACTIONSPEC_DISCRETE = ActionSpec.create_discrete((2,))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_CONTINUOUS\n        ),\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_TWODISCRETE\n        ),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_curiosity",
        "documentation": {}
    },
    {
        "label": "test_construction",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "peekOfCode": "def test_construction(behavior_spec: BehaviorSpec) -> None:\n    settings = RewardSignalSettings()\n    settings.gamma = 0.2\n    extrinsic_rp = ExtrinsicRewardProvider(behavior_spec, settings)\n    assert extrinsic_rp.gamma == 0.2\n    assert extrinsic_rp.name == \"Extrinsic\"\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [\n        BehaviorSpec(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "documentation": {}
    },
    {
        "label": "test_factory",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "peekOfCode": "def test_factory(behavior_spec: BehaviorSpec) -> None:\n    settings = RewardSignalSettings()\n    extrinsic_rp = create_reward_provider(\n        RewardSignalType.EXTRINSIC, behavior_spec, settings\n    )\n    assert extrinsic_rp.name == \"Extrinsic\"\n@pytest.mark.parametrize(\"reward\", [2.0, 3.0, 4.0])\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "documentation": {}
    },
    {
        "label": "test_reward",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "peekOfCode": "def test_reward(behavior_spec: BehaviorSpec, reward: float) -> None:\n    buffer = create_agent_buffer(behavior_spec, 1000, reward)\n    settings = RewardSignalSettings()\n    extrinsic_rp = ExtrinsicRewardProvider(behavior_spec, settings)\n    generated_rewards = extrinsic_rp.evaluate(buffer)\n    assert (generated_rewards == reward).all()\n    # Test group rewards. Rewards should be double of the environment rewards, but shouldn't count\n    # the groupmate rewards.\n    buffer[BufferKey.GROUP_REWARD] = buffer[BufferKey.ENVIRONMENT_REWARDS]\n    # 2 agents with identical rewards",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "documentation": {}
    },
    {
        "label": "ACTIONSPEC_CONTINUOUS",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "peekOfCode": "ACTIONSPEC_CONTINUOUS = ActionSpec.create_continuous(5)\nACTIONSPEC_TWODISCRETE = ActionSpec.create_discrete((2, 3))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_CONTINUOUS\n        ),\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_TWODISCRETE",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "documentation": {}
    },
    {
        "label": "ACTIONSPEC_TWODISCRETE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "peekOfCode": "ACTIONSPEC_TWODISCRETE = ActionSpec.create_discrete((2, 3))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_CONTINUOUS\n        ),\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_TWODISCRETE\n        ),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_extrinsic",
        "documentation": {}
    },
    {
        "label": "test_construction",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "peekOfCode": "def test_construction(behavior_spec: BehaviorSpec) -> None:\n    gail_settings = GAILSettings(demo_path=CONTINUOUS_PATH)\n    gail_rp = GAILRewardProvider(behavior_spec, gail_settings)\n    assert gail_rp.name == \"GAIL\"\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [BehaviorSpec(create_observation_specs_with_shapes([(8,)]), ACTIONSPEC_CONTINUOUS)],\n)\ndef test_factory(behavior_spec: BehaviorSpec) -> None:\n    gail_settings = GAILSettings(demo_path=CONTINUOUS_PATH)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "documentation": {}
    },
    {
        "label": "test_factory",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "peekOfCode": "def test_factory(behavior_spec: BehaviorSpec) -> None:\n    gail_settings = GAILSettings(demo_path=CONTINUOUS_PATH)\n    gail_rp = create_reward_provider(\n        RewardSignalType.GAIL, behavior_spec, gail_settings\n    )\n    assert gail_rp.name == \"GAIL\"\n@pytest.mark.parametrize(\"seed\", SEED)\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "documentation": {}
    },
    {
        "label": "test_reward_decreases",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "peekOfCode": "def test_reward_decreases(\n    demo_to_buffer: Any, use_actions: bool, behavior_spec: BehaviorSpec, seed: int\n) -> None:\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    buffer_expert = create_agent_buffer(behavior_spec, 1000)\n    buffer_policy = create_agent_buffer(behavior_spec, 1000)\n    demo_to_buffer.return_value = None, buffer_expert\n    gail_settings = GAILSettings(\n        demo_path=\"\", learning_rate=0.005, use_vail=False, use_actions=use_actions",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "documentation": {}
    },
    {
        "label": "test_reward_decreases_vail",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "peekOfCode": "def test_reward_decreases_vail(\n    demo_to_buffer: Any, use_actions: bool, behavior_spec: BehaviorSpec, seed: int\n) -> None:\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    buffer_expert = create_agent_buffer(behavior_spec, 1000)\n    buffer_policy = create_agent_buffer(behavior_spec, 1000)\n    demo_to_buffer.return_value = None, buffer_expert\n    gail_settings = GAILSettings(\n        demo_path=\"\", learning_rate=0.005, use_vail=True, use_actions=use_actions",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "documentation": {}
    },
    {
        "label": "CONTINUOUS_PATH",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "peekOfCode": "CONTINUOUS_PATH = (\n    os.path.join(os.path.dirname(os.path.abspath(__file__)), os.pardir, os.pardir)\n    + \"/test.demo\"\n)\nDISCRETE_PATH = (\n    os.path.join(os.path.dirname(os.path.abspath(__file__)), os.pardir, os.pardir)\n    + \"/testdcvis.demo\"\n)\nSEED = [42]\nACTIONSPEC_CONTINUOUS = ActionSpec.create_continuous(2)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "documentation": {}
    },
    {
        "label": "DISCRETE_PATH",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "peekOfCode": "DISCRETE_PATH = (\n    os.path.join(os.path.dirname(os.path.abspath(__file__)), os.pardir, os.pardir)\n    + \"/testdcvis.demo\"\n)\nSEED = [42]\nACTIONSPEC_CONTINUOUS = ActionSpec.create_continuous(2)\nACTIONSPEC_FOURDISCRETE = ActionSpec.create_discrete((2, 3, 3, 3))\nACTIONSPEC_DISCRETE = ActionSpec.create_discrete((20,))\n@pytest.mark.parametrize(\n    \"behavior_spec\",",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "documentation": {}
    },
    {
        "label": "SEED",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "peekOfCode": "SEED = [42]\nACTIONSPEC_CONTINUOUS = ActionSpec.create_continuous(2)\nACTIONSPEC_FOURDISCRETE = ActionSpec.create_discrete((2, 3, 3, 3))\nACTIONSPEC_DISCRETE = ActionSpec.create_discrete((20,))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [BehaviorSpec(create_observation_specs_with_shapes([(8,)]), ACTIONSPEC_CONTINUOUS)],\n)\ndef test_construction(behavior_spec: BehaviorSpec) -> None:\n    gail_settings = GAILSettings(demo_path=CONTINUOUS_PATH)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "documentation": {}
    },
    {
        "label": "ACTIONSPEC_CONTINUOUS",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "peekOfCode": "ACTIONSPEC_CONTINUOUS = ActionSpec.create_continuous(2)\nACTIONSPEC_FOURDISCRETE = ActionSpec.create_discrete((2, 3, 3, 3))\nACTIONSPEC_DISCRETE = ActionSpec.create_discrete((20,))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [BehaviorSpec(create_observation_specs_with_shapes([(8,)]), ACTIONSPEC_CONTINUOUS)],\n)\ndef test_construction(behavior_spec: BehaviorSpec) -> None:\n    gail_settings = GAILSettings(demo_path=CONTINUOUS_PATH)\n    gail_rp = GAILRewardProvider(behavior_spec, gail_settings)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "documentation": {}
    },
    {
        "label": "ACTIONSPEC_FOURDISCRETE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "peekOfCode": "ACTIONSPEC_FOURDISCRETE = ActionSpec.create_discrete((2, 3, 3, 3))\nACTIONSPEC_DISCRETE = ActionSpec.create_discrete((20,))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [BehaviorSpec(create_observation_specs_with_shapes([(8,)]), ACTIONSPEC_CONTINUOUS)],\n)\ndef test_construction(behavior_spec: BehaviorSpec) -> None:\n    gail_settings = GAILSettings(demo_path=CONTINUOUS_PATH)\n    gail_rp = GAILRewardProvider(behavior_spec, gail_settings)\n    assert gail_rp.name == \"GAIL\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "documentation": {}
    },
    {
        "label": "ACTIONSPEC_DISCRETE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "peekOfCode": "ACTIONSPEC_DISCRETE = ActionSpec.create_discrete((20,))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [BehaviorSpec(create_observation_specs_with_shapes([(8,)]), ACTIONSPEC_CONTINUOUS)],\n)\ndef test_construction(behavior_spec: BehaviorSpec) -> None:\n    gail_settings = GAILSettings(demo_path=CONTINUOUS_PATH)\n    gail_rp = GAILRewardProvider(behavior_spec, gail_settings)\n    assert gail_rp.name == \"GAIL\"\n@pytest.mark.parametrize(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_gail",
        "documentation": {}
    },
    {
        "label": "test_construction",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "peekOfCode": "def test_construction(behavior_spec: BehaviorSpec) -> None:\n    curiosity_settings = RNDSettings(32, 0.01)\n    curiosity_settings.strength = 0.1\n    curiosity_rp = RNDRewardProvider(behavior_spec, curiosity_settings)\n    assert curiosity_rp.strength == 0.1\n    assert curiosity_rp.name == \"RND\"\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [\n        BehaviorSpec(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "documentation": {}
    },
    {
        "label": "test_factory",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "peekOfCode": "def test_factory(behavior_spec: BehaviorSpec) -> None:\n    curiosity_settings = RNDSettings(32, 0.01)\n    curiosity_rp = create_reward_provider(\n        RewardSignalType.RND, behavior_spec, curiosity_settings\n    )\n    assert curiosity_rp.name == \"RND\"\n@pytest.mark.parametrize(\"seed\", SEED)\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "documentation": {}
    },
    {
        "label": "test_reward_decreases",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "peekOfCode": "def test_reward_decreases(behavior_spec: BehaviorSpec, seed: int) -> None:\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    rnd_settings = RNDSettings(32, 0.01)\n    rnd_rp = RNDRewardProvider(behavior_spec, rnd_settings)\n    buffer = create_agent_buffer(behavior_spec, 5)\n    rnd_rp.update(buffer)\n    reward_old = rnd_rp.evaluate(buffer)[0]\n    for _ in range(100):\n        rnd_rp.update(buffer)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "documentation": {}
    },
    {
        "label": "SEED",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "peekOfCode": "SEED = [42]\nACTIONSPEC_CONTINUOUS = ActionSpec.create_continuous(5)\nACTIONSPEC_TWODISCRETE = ActionSpec.create_discrete((2, 3))\nACTIONSPEC_DISCRETE = ActionSpec.create_discrete((2,))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_CONTINUOUS\n        ),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "documentation": {}
    },
    {
        "label": "ACTIONSPEC_CONTINUOUS",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "peekOfCode": "ACTIONSPEC_CONTINUOUS = ActionSpec.create_continuous(5)\nACTIONSPEC_TWODISCRETE = ActionSpec.create_discrete((2, 3))\nACTIONSPEC_DISCRETE = ActionSpec.create_discrete((2,))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_CONTINUOUS\n        ),\n        BehaviorSpec(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "documentation": {}
    },
    {
        "label": "ACTIONSPEC_TWODISCRETE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "peekOfCode": "ACTIONSPEC_TWODISCRETE = ActionSpec.create_discrete((2, 3))\nACTIONSPEC_DISCRETE = ActionSpec.create_discrete((2,))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_CONTINUOUS\n        ),\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_TWODISCRETE",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "documentation": {}
    },
    {
        "label": "ACTIONSPEC_DISCRETE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "peekOfCode": "ACTIONSPEC_DISCRETE = ActionSpec.create_discrete((2,))\n@pytest.mark.parametrize(\n    \"behavior_spec\",\n    [\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_CONTINUOUS\n        ),\n        BehaviorSpec(\n            create_observation_specs_with_shapes([(10,)]), ACTIONSPEC_TWODISCRETE\n        ),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.test_rnd",
        "documentation": {}
    },
    {
        "label": "create_agent_buffer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.utils",
        "peekOfCode": "def create_agent_buffer(\n    behavior_spec: BehaviorSpec, number: int, reward: float = 0.0\n) -> AgentBuffer:\n    buffer = AgentBuffer()\n    curr_obs = [\n        np.random.normal(size=obs_spec.shape).astype(np.float32)\n        for obs_spec in behavior_spec.observation_specs\n    ]\n    next_obs = [\n        np.random.normal(size=obs_spec.shape).astype(np.float32)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_reward_providers.utils",
        "documentation": {}
    },
    {
        "label": "create_action_model",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "peekOfCode": "def create_action_model(inp_size, act_size, deterministic=False):\n    mask = torch.ones([1, act_size ** 2])\n    action_spec = ActionSpec(act_size, tuple(act_size for _ in range(act_size)))\n    action_model = ActionModel(inp_size, action_spec, deterministic=deterministic)\n    return action_model, mask\ndef test_get_dists():\n    inp_size = 4\n    act_size = 2\n    action_model, masks = create_action_model(inp_size, act_size)\n    sample_inp = torch.ones((1, inp_size))",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "documentation": {}
    },
    {
        "label": "test_get_dists",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "peekOfCode": "def test_get_dists():\n    inp_size = 4\n    act_size = 2\n    action_model, masks = create_action_model(inp_size, act_size)\n    sample_inp = torch.ones((1, inp_size))\n    dists = action_model._get_dists(sample_inp, masks=masks)\n    assert isinstance(dists.continuous, GaussianDistInstance)\n    assert len(dists.discrete) == 2\n    for _dist in dists.discrete:\n        assert isinstance(_dist, CategoricalDistInstance)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "documentation": {}
    },
    {
        "label": "test_sample_action",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "peekOfCode": "def test_sample_action():\n    inp_size = 4\n    act_size = 2\n    action_model, masks = create_action_model(inp_size, act_size)\n    sample_inp = torch.ones((1, inp_size))\n    dists = action_model._get_dists(sample_inp, masks=masks)\n    agent_action = action_model._sample_action(dists)\n    assert agent_action.continuous_tensor.shape == (1, 2)\n    assert len(agent_action.discrete_list) == 2\n    for _disc in agent_action.discrete_list:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "documentation": {}
    },
    {
        "label": "test_deterministic_sample_action",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "peekOfCode": "def test_deterministic_sample_action():\n    inp_size = 4\n    act_size = 8\n    action_model, masks = create_action_model(inp_size, act_size, deterministic=True)\n    sample_inp = torch.ones((1, inp_size))\n    dists = action_model._get_dists(sample_inp, masks=masks)\n    agent_action1 = action_model._sample_action(dists)\n    agent_action2 = action_model._sample_action(dists)\n    agent_action3 = action_model._sample_action(dists)\n    assert torch.equal(agent_action1.continuous_tensor, agent_action2.continuous_tensor)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "documentation": {}
    },
    {
        "label": "test_get_probs_and_entropy",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "peekOfCode": "def test_get_probs_and_entropy():\n    inp_size = 4\n    act_size = 2\n    action_model, masks = create_action_model(inp_size, act_size)\n    _continuous_dist = GaussianDistInstance(torch.zeros((1, 2)), torch.ones((1, 2)))\n    act_size = 2\n    test_prob = torch.tensor([[1.0 - 0.1 * (act_size - 1)] + [0.1] * (act_size - 1)])\n    _discrete_dist_list = [\n        CategoricalDistInstance(test_prob),\n        CategoricalDistInstance(test_prob),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "documentation": {}
    },
    {
        "label": "test_get_onnx_deterministic_tensors",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "peekOfCode": "def test_get_onnx_deterministic_tensors():\n    inp_size = 4\n    act_size = 2\n    action_model, masks = create_action_model(inp_size, act_size)\n    sample_inp = torch.ones((1, inp_size))\n    out_tensors = action_model.get_action_out(sample_inp, masks=masks)\n    (\n        continuous_out,\n        discrete_out,\n        action_out_deprecated,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_action_model",
        "documentation": {}
    },
    {
        "label": "test_agent_action_group_from_buffer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_agent_action",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_agent_action",
        "peekOfCode": "def test_agent_action_group_from_buffer():\n    buff = AgentBuffer()\n    # Create some actions\n    for _ in range(3):\n        buff[BufferKey.GROUP_CONTINUOUS_ACTION].append(\n            3 * [np.ones((5,), dtype=np.float32)]\n        )\n        buff[BufferKey.GROUP_DISCRETE_ACTION].append(\n            3 * [np.ones((4,), dtype=np.float32)]\n        )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_agent_action",
        "documentation": {}
    },
    {
        "label": "test_slice",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_agent_action",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_agent_action",
        "peekOfCode": "def test_slice():\n    # Both continuous and discrete\n    aa = AgentAction(\n        torch.tensor([[1.0], [1.0], [1.0]]),\n        [torch.tensor([2, 1, 0]), torch.tensor([1, 2, 0])],\n    )\n    saa = aa.slice(0, 2)\n    assert saa.continuous_tensor.shape == (2, 1)\n    assert saa.discrete_tensor.shape == (2, 2)\ndef test_to_flat():",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_agent_action",
        "documentation": {}
    },
    {
        "label": "test_to_flat",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_agent_action",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_agent_action",
        "peekOfCode": "def test_to_flat():\n    # Both continuous and discrete\n    aa = AgentAction(\n        torch.tensor([[1.0, 1.0, 1.0]]), [torch.tensor([2]), torch.tensor([1])]\n    )\n    flattened_actions = aa.to_flat([3, 3])\n    assert torch.eq(\n        flattened_actions, torch.tensor([[1, 1, 1, 0, 0, 1, 0, 1, 0]])\n    ).all()\n    # Just continuous",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_agent_action",
        "documentation": {}
    },
    {
        "label": "test_multi_head_attention_initialization",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "peekOfCode": "def test_multi_head_attention_initialization():\n    n_h, emb_size = 4, 12\n    n_k, n_q, b = 13, 14, 15\n    mha = MultiHeadAttention(emb_size, n_h)\n    query = torch.ones((b, n_q, emb_size))\n    key = torch.ones((b, n_k, emb_size))\n    value = torch.ones((b, n_k, emb_size))\n    output, attention = mha.forward(query, key, value, n_q, n_k)\n    assert output.shape == (b, n_q, emb_size)\n    assert attention.shape == (b, n_h, n_q, n_k)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "documentation": {}
    },
    {
        "label": "test_multi_head_attention_masking",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "peekOfCode": "def test_multi_head_attention_masking():\n    epsilon = 0.0001\n    n_h, emb_size = 4, 12\n    n_k, n_q, b = 13, 14, 15\n    mha = MultiHeadAttention(emb_size, n_h)\n    # create a key input with some keys all 0\n    query = torch.ones((b, n_q, emb_size))\n    key = torch.ones((b, n_k, emb_size))\n    value = torch.ones((b, n_k, emb_size))\n    mask = torch.zeros((b, n_k))",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "documentation": {}
    },
    {
        "label": "test_zero_mask_layer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "peekOfCode": "def test_zero_mask_layer():\n    batch_size, size = 10, 30\n    def generate_input_helper(pattern):\n        _input = torch.zeros((batch_size, 0, size))\n        for i in range(len(pattern)):\n            if i % 2 == 0:\n                _input = torch.cat(\n                    [_input, torch.rand((batch_size, pattern[i], size))], dim=1\n                )\n            else:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "documentation": {}
    },
    {
        "label": "test_all_masking",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "peekOfCode": "def test_all_masking(mask_value):\n    # We make sure that a mask of all zeros or all ones will not trigger an error\n    np.random.seed(1336)\n    torch.manual_seed(1336)\n    size, n_k, = 3, 5\n    embedding_size = 64\n    entity_embeddings = EntityEmbedding(size, n_k, embedding_size)\n    entity_embeddings.add_self_embedding(size)\n    transformer = ResidualSelfAttention(embedding_size, n_k)\n    l_layer = linear_layer(embedding_size, size)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "documentation": {}
    },
    {
        "label": "test_predict_closest_training",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "peekOfCode": "def test_predict_closest_training():\n    np.random.seed(1336)\n    torch.manual_seed(1336)\n    size, n_k, = 3, 5\n    embedding_size = 64\n    entity_embeddings = EntityEmbedding(size, n_k, embedding_size)\n    entity_embeddings.add_self_embedding(size)\n    transformer = ResidualSelfAttention(embedding_size, n_k)\n    l_layer = linear_layer(embedding_size, size)\n    optimizer = torch.optim.Adam(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "documentation": {}
    },
    {
        "label": "test_predict_minimum_training",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "peekOfCode": "def test_predict_minimum_training():\n    # of 5 numbers, predict index of min\n    np.random.seed(1336)\n    torch.manual_seed(1336)\n    n_k = 5\n    size = n_k + 1\n    embedding_size = 64\n    entity_embedding = EntityEmbedding(size, n_k, embedding_size)  # no self\n    transformer = ResidualSelfAttention(embedding_size)\n    l_layer = LinearEncoder(embedding_size, 2, n_k)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_attention",
        "documentation": {}
    },
    {
        "label": "create_bc_module",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "peekOfCode": "def create_bc_module(mock_behavior_specs, bc_settings, use_rnn, tanhresample):\n    # model_path = env.external_brain_names[0]\n    trainer_config = TrainerSettings()\n    trainer_config.network_settings.memory = (\n        NetworkSettings.MemorySettings() if use_rnn else None\n    )\n    policy = TorchPolicy(\n        0, mock_behavior_specs, trainer_config, tanhresample, tanhresample\n    )\n    bc_module = BCModule(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "documentation": {}
    },
    {
        "label": "assert_stats_are_float",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "peekOfCode": "def assert_stats_are_float(stats):\n    for _, item in stats.items():\n        assert isinstance(item, float)\n# Test default values\ndef test_bcmodule_defaults():\n    # See if default values match\n    mock_specs = mb.create_mock_3dball_behavior_specs()\n    bc_settings = BehavioralCloningSettings(\n        demo_path=os.path.dirname(os.path.abspath(__file__)) + \"/\" + \"test.demo\"\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "documentation": {}
    },
    {
        "label": "test_bcmodule_defaults",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "peekOfCode": "def test_bcmodule_defaults():\n    # See if default values match\n    mock_specs = mb.create_mock_3dball_behavior_specs()\n    bc_settings = BehavioralCloningSettings(\n        demo_path=os.path.dirname(os.path.abspath(__file__)) + \"/\" + \"test.demo\"\n    )\n    bc_module = create_bc_module(mock_specs, bc_settings, False, False)\n    assert bc_module.num_epoch == 3\n    assert bc_module.batch_size == TrainerSettings().hyperparameters.batch_size\n    # Assign strange values and see if it overrides properly",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "documentation": {}
    },
    {
        "label": "test_bcmodule_update",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "peekOfCode": "def test_bcmodule_update(is_sac):\n    mock_specs = mb.create_mock_3dball_behavior_specs()\n    bc_settings = BehavioralCloningSettings(\n        demo_path=os.path.dirname(os.path.abspath(__file__)) + \"/\" + \"test.demo\"\n    )\n    bc_module = create_bc_module(mock_specs, bc_settings, False, is_sac)\n    stats = bc_module.update()\n    assert_stats_are_float(stats)\n# Test with constant pretraining learning rate\n@pytest.mark.parametrize(\"is_sac\", [True, False], ids=[\"sac\", \"ppo\"])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "documentation": {}
    },
    {
        "label": "test_bcmodule_constant_lr_update",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "peekOfCode": "def test_bcmodule_constant_lr_update(is_sac):\n    mock_specs = mb.create_mock_3dball_behavior_specs()\n    bc_settings = BehavioralCloningSettings(\n        demo_path=os.path.dirname(os.path.abspath(__file__)) + \"/\" + \"test.demo\",\n        steps=0,\n    )\n    bc_module = create_bc_module(mock_specs, bc_settings, False, is_sac)\n    stats = bc_module.update()\n    assert_stats_are_float(stats)\n    old_learning_rate = bc_module.current_lr",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "documentation": {}
    },
    {
        "label": "test_bcmodule_linear_lr_update",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "peekOfCode": "def test_bcmodule_linear_lr_update(is_sac):\n    mock_specs = mb.create_mock_3dball_behavior_specs()\n    bc_settings = BehavioralCloningSettings(\n        demo_path=os.path.dirname(os.path.abspath(__file__)) + \"/\" + \"test.demo\",\n        steps=100,\n    )\n    bc_module = create_bc_module(mock_specs, bc_settings, False, is_sac)\n    # Should decay by 10/100 * 0.0003 = 0.00003\n    bc_module.policy.get_current_step = MagicMock(return_value=10)\n    old_learning_rate = bc_module.current_lr",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "documentation": {}
    },
    {
        "label": "test_bcmodule_rnn_update",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "peekOfCode": "def test_bcmodule_rnn_update(is_sac):\n    mock_specs = mb.create_mock_3dball_behavior_specs()\n    bc_settings = BehavioralCloningSettings(\n        demo_path=os.path.dirname(os.path.abspath(__file__)) + \"/\" + \"test.demo\"\n    )\n    bc_module = create_bc_module(mock_specs, bc_settings, True, is_sac)\n    stats = bc_module.update()\n    assert_stats_are_float(stats)\n# Test with discrete control and visual observations\n@pytest.mark.parametrize(\"is_sac\", [True, False], ids=[\"sac\", \"ppo\"])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "documentation": {}
    },
    {
        "label": "test_bcmodule_dc_visual_update",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "peekOfCode": "def test_bcmodule_dc_visual_update(is_sac):\n    mock_specs = mb.create_mock_banana_behavior_specs()\n    bc_settings = BehavioralCloningSettings(\n        demo_path=os.path.dirname(os.path.abspath(__file__)) + \"/\" + \"testdcvis.demo\"\n    )\n    bc_module = create_bc_module(mock_specs, bc_settings, False, is_sac)\n    stats = bc_module.update()\n    assert_stats_are_float(stats)\n# Test with discrete control, visual observations and RNN\n@pytest.mark.parametrize(\"is_sac\", [True, False], ids=[\"sac\", \"ppo\"])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "documentation": {}
    },
    {
        "label": "test_bcmodule_rnn_dc_update",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "peekOfCode": "def test_bcmodule_rnn_dc_update(is_sac):\n    mock_specs = mb.create_mock_banana_behavior_specs()\n    bc_settings = BehavioralCloningSettings(\n        demo_path=os.path.dirname(os.path.abspath(__file__)) + \"/\" + \"testdcvis.demo\"\n    )\n    bc_module = create_bc_module(mock_specs, bc_settings, True, is_sac)\n    stats = bc_module.update()\n    assert_stats_are_float(stats)\nif __name__ == \"__main__\":\n    pytest.main()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_bcmodule",
        "documentation": {}
    },
    {
        "label": "test_conditional_layer_initialization",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_conditioning",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_conditioning",
        "peekOfCode": "def test_conditional_layer_initialization():\n    b, input_size, goal_size, h, num_cond_layers, num_normal_layers = 7, 10, 8, 16, 2, 1\n    conditional_enc = ConditionalEncoder(\n        input_size, goal_size, h, num_normal_layers + num_cond_layers, num_cond_layers\n    )\n    input_tensor = torch.ones(b, input_size)\n    goal_tensor = torch.ones(b, goal_size)\n    output = conditional_enc.forward(input_tensor, goal_tensor)\n    assert output.shape == (b, h)\n@pytest.mark.parametrize(\"num_cond_layers\", [1, 2, 3])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_conditioning",
        "documentation": {}
    },
    {
        "label": "test_predict_with_condition",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_conditioning",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_conditioning",
        "peekOfCode": "def test_predict_with_condition(num_cond_layers):\n    np.random.seed(1336)\n    torch.manual_seed(1336)\n    input_size, goal_size, h, num_normal_layers = 10, 1, 16, 1\n    conditional_enc = ConditionalEncoder(\n        input_size, goal_size, h, num_normal_layers + num_cond_layers, num_cond_layers\n    )\n    l_layer = linear_layer(h, 1)\n    optimizer = torch.optim.Adam(\n        list(conditional_enc.parameters()) + list(l_layer.parameters()), lr=0.001",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_conditioning",
        "documentation": {}
    },
    {
        "label": "test_valueheads",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_decoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_decoders",
        "peekOfCode": "def test_valueheads():\n    stream_names = [f\"reward_signal_{num}\" for num in range(5)]\n    input_size = 5\n    batch_size = 4\n    # Test default 1 value per head\n    value_heads = ValueHeads(stream_names, input_size)\n    input_data = torch.ones((batch_size, input_size))\n    value_out = value_heads(input_data)  # Note: mean value will be removed shortly\n    for stream_name in stream_names:\n        assert value_out[stream_name].shape == (batch_size,)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_decoders",
        "documentation": {}
    },
    {
        "label": "test_gaussian_distribution",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "peekOfCode": "def test_gaussian_distribution(conditional_sigma, tanh_squash):\n    torch.manual_seed(0)\n    hidden_size = 16\n    act_size = 4\n    sample_embedding = torch.ones((1, 16))\n    gauss_dist = GaussianDistribution(\n        hidden_size,\n        act_size,\n        conditional_sigma=conditional_sigma,\n        tanh_squash=tanh_squash,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "documentation": {}
    },
    {
        "label": "test_multi_categorical_distribution",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "peekOfCode": "def test_multi_categorical_distribution():\n    torch.manual_seed(0)\n    hidden_size = 16\n    act_size = [3, 3, 4]\n    sample_embedding = torch.ones((1, 16))\n    gauss_dist = MultiCategoricalDistribution(hidden_size, act_size)\n    # Make sure backprop works\n    optimizer = torch.optim.Adam(gauss_dist.parameters(), lr=3e-3)\n    def create_test_prob(size: int) -> torch.Tensor:\n        test_prob = torch.tensor(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "documentation": {}
    },
    {
        "label": "test_gaussian_dist_instance",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "peekOfCode": "def test_gaussian_dist_instance():\n    torch.manual_seed(0)\n    act_size = 4\n    dist_instance = GaussianDistInstance(\n        torch.zeros(1, act_size), torch.ones(1, act_size)\n    )\n    action = dist_instance.sample()\n    assert action.shape == (1, act_size)\n    for log_prob in (\n        dist_instance.log_prob(torch.zeros((1, act_size))).flatten().tolist()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "documentation": {}
    },
    {
        "label": "test_tanh_gaussian_dist_instance",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "peekOfCode": "def test_tanh_gaussian_dist_instance():\n    torch.manual_seed(0)\n    act_size = 4\n    dist_instance = TanhGaussianDistInstance(\n        torch.zeros(1, act_size), torch.ones(1, act_size)\n    )\n    for _ in range(10):\n        action = dist_instance.sample()\n        assert action.shape == (1, act_size)\n        assert torch.max(action) < 1.0 and torch.min(action) > -1.0",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "documentation": {}
    },
    {
        "label": "test_categorical_dist_instance",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "peekOfCode": "def test_categorical_dist_instance():\n    torch.manual_seed(0)\n    act_size = 4\n    test_prob = torch.tensor(\n        [[1.0 - 0.1 * (act_size - 1)] + [0.1] * (act_size - 1)]\n    )  # High prob for first action\n    dist_instance = CategoricalDistInstance(test_prob)\n    for _ in range(10):\n        action = dist_instance.sample()\n        assert action.shape == (1, 1)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_distributions",
        "documentation": {}
    },
    {
        "label": "compare_models",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "peekOfCode": "def compare_models(module_1, module_2):\n    is_same = True\n    for key_item_1, key_item_2 in zip(\n        module_1.state_dict().items(), module_2.state_dict().items()\n    ):\n        # Compare tensors in state_dict and not the keys.\n        is_same = torch.equal(key_item_1[1], key_item_2[1]) and is_same\n    return is_same\ndef test_normalizer():\n    input_size = 2",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "documentation": {}
    },
    {
        "label": "test_normalizer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "peekOfCode": "def test_normalizer():\n    input_size = 2\n    norm = Normalizer(input_size)\n    # These three inputs should mean to 0.5, and variance 2\n    # with the steps starting at 1\n    vec_input1 = torch.tensor([[1, 1]])\n    vec_input2 = torch.tensor([[1, 1]])\n    vec_input3 = torch.tensor([[0, 0]])\n    norm.update(vec_input1)\n    norm.update(vec_input2)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "documentation": {}
    },
    {
        "label": "test_vector_encoder",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "peekOfCode": "def test_vector_encoder(mock_normalizer):\n    mock_normalizer_inst = mock.Mock()\n    mock_normalizer.return_value = mock_normalizer_inst\n    input_size = 64\n    normalize = False\n    vector_encoder = VectorInput(input_size, normalize)\n    output = vector_encoder(torch.ones((1, input_size)))\n    assert output.shape == (1, input_size)\n    normalize = True\n    vector_encoder = VectorInput(input_size, normalize)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "documentation": {}
    },
    {
        "label": "test_visual_encoder",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "peekOfCode": "def test_visual_encoder(vis_class, image_size):\n    num_outputs = 128\n    enc = vis_class(image_size[0], image_size[1], image_size[2], num_outputs)\n    # Note: NCHW not NHWC\n    sample_input = torch.ones((1, image_size[0], image_size[1], image_size[2]))\n    encoding = enc(sample_input)\n    assert encoding.shape == (1, num_outputs)\n@pytest.mark.parametrize(\n    \"vis_class, size\",\n    [",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "documentation": {}
    },
    {
        "label": "test_visual_encoder_trains",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "peekOfCode": "def test_visual_encoder_trains(vis_class, size):\n    torch.manual_seed(0)\n    image_size = (size, size, 1)\n    batch = 100\n    inputs = torch.cat(\n        [torch.zeros((batch,) + image_size), torch.ones((batch,) + image_size)], dim=0\n    )\n    target = torch.cat([torch.zeros((batch,)), torch.ones((batch,))], dim=0)\n    enc = vis_class(image_size[0], image_size[1], image_size[2], 1)\n    optimizer = torch.optim.Adam(enc.parameters(), lr=0.001)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_encoders",
        "documentation": {}
    },
    {
        "label": "dummy_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "peekOfCode": "def dummy_config():\n    return TrainerSettings(self_play=SelfPlaySettings())\nVECTOR_ACTION_SPACE = 1\nVECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 10241\nNUM_AGENTS = 12\n@pytest.mark.parametrize(\"use_discrete\", [True, False])\ndef test_load_and_set(dummy_config, use_discrete):\n    mock_specs = mb.setup_test_behavior_specs(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "documentation": {}
    },
    {
        "label": "test_load_and_set",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "peekOfCode": "def test_load_and_set(dummy_config, use_discrete):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        False,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,\n        vector_obs_space=VECTOR_OBS_SPACE,\n    )\n    trainer_params = dummy_config",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "documentation": {}
    },
    {
        "label": "test_resume",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "peekOfCode": "def test_resume(dummy_config, tmp_path):\n    mock_specs = mb.setup_test_behavior_specs(\n        True, False, vector_action_space=[2], vector_obs_space=1\n    )\n    behavior_id_team0 = \"test_brain?team=0\"\n    behavior_id_team1 = \"test_brain?team=1\"\n    brain_name = BehaviorIdentifiers.from_name_behavior_id(behavior_id_team0).brain_name\n    tmp_path = tmp_path.as_posix()\n    ppo_trainer = PPOTrainer(brain_name, 0, dummy_config, True, False, 0, tmp_path)\n    controller = GhostController(100)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "documentation": {}
    },
    {
        "label": "test_process_trajectory",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "peekOfCode": "def test_process_trajectory(dummy_config):\n    mock_specs = mb.setup_test_behavior_specs(\n        True, False, vector_action_space=[2], vector_obs_space=1\n    )\n    behavior_id_team0 = \"test_brain?team=0\"\n    behavior_id_team1 = \"test_brain?team=1\"\n    brain_name = BehaviorIdentifiers.from_name_behavior_id(behavior_id_team0).brain_name\n    ppo_trainer = PPOTrainer(brain_name, 0, dummy_config, True, False, 0, \"0\")\n    controller = GhostController(100)\n    trainer = GhostTrainer(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "documentation": {}
    },
    {
        "label": "test_publish_queue",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "peekOfCode": "def test_publish_queue(dummy_config):\n    mock_specs = mb.setup_test_behavior_specs(\n        True, False, vector_action_space=[1], vector_obs_space=8\n    )\n    behavior_id_team0 = \"test_brain?team=0\"\n    behavior_id_team1 = \"test_brain?team=1\"\n    parsed_behavior_id0 = BehaviorIdentifiers.from_name_behavior_id(behavior_id_team0)\n    brain_name = parsed_behavior_id0.brain_name\n    ppo_trainer = PPOTrainer(brain_name, 0, dummy_config, True, False, 0, \"0\")\n    controller = GhostController(100)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "documentation": {}
    },
    {
        "label": "VECTOR_ACTION_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "peekOfCode": "VECTOR_ACTION_SPACE = 1\nVECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 10241\nNUM_AGENTS = 12\n@pytest.mark.parametrize(\"use_discrete\", [True, False])\ndef test_load_and_set(dummy_config, use_discrete):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        False,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "documentation": {}
    },
    {
        "label": "VECTOR_OBS_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "peekOfCode": "VECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 10241\nNUM_AGENTS = 12\n@pytest.mark.parametrize(\"use_discrete\", [True, False])\ndef test_load_and_set(dummy_config, use_discrete):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        False,\n        vector_action_space=DISCRETE_ACTION_SPACE",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "documentation": {}
    },
    {
        "label": "DISCRETE_ACTION_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "peekOfCode": "DISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 10241\nNUM_AGENTS = 12\n@pytest.mark.parametrize(\"use_discrete\", [True, False])\ndef test_load_and_set(dummy_config, use_discrete):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        False,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "documentation": {}
    },
    {
        "label": "BUFFER_INIT_SAMPLES",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "peekOfCode": "BUFFER_INIT_SAMPLES = 10241\nNUM_AGENTS = 12\n@pytest.mark.parametrize(\"use_discrete\", [True, False])\ndef test_load_and_set(dummy_config, use_discrete):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        False,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "documentation": {}
    },
    {
        "label": "NUM_AGENTS",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "peekOfCode": "NUM_AGENTS = 12\n@pytest.mark.parametrize(\"use_discrete\", [True, False])\ndef test_load_and_set(dummy_config, use_discrete):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        False,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,\n        vector_obs_space=VECTOR_OBS_SPACE,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ghost",
        "documentation": {}
    },
    {
        "label": "test_hybrid_ppo",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "peekOfCode": "def test_hybrid_ppo(action_size):\n    env = SimpleEnvironment([BRAIN_NAME], action_sizes=action_size, step_size=0.8)\n    new_network_settings = attr.evolve(PPO_TORCH_CONFIG.network_settings)\n    new_hyperparams = attr.evolve(\n        PPO_TORCH_CONFIG.hyperparameters,\n        batch_size=64,\n        buffer_size=1024,\n        learning_rate=1e-3,\n    )\n    config = attr.evolve(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "documentation": {}
    },
    {
        "label": "test_hybrid_visual_ppo",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "peekOfCode": "def test_hybrid_visual_ppo(num_visual, training_seed):\n    env = SimpleEnvironment(\n        [BRAIN_NAME], num_visual=num_visual, num_vector=0, action_sizes=(1, 1)\n    )\n    new_hyperparams = attr.evolve(\n        PPO_TORCH_CONFIG.hyperparameters,\n        batch_size=64,\n        buffer_size=1024,\n        learning_rate=1e-4,\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "documentation": {}
    },
    {
        "label": "test_hybrid_recurrent_ppo",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "peekOfCode": "def test_hybrid_recurrent_ppo():\n    env = MemoryEnvironment([BRAIN_NAME], action_sizes=(1, 1), step_size=0.5)\n    new_network_settings = attr.evolve(\n        PPO_TORCH_CONFIG.network_settings,\n        memory=NetworkSettings.MemorySettings(memory_size=16),\n    )\n    new_hyperparams = attr.evolve(\n        PPO_TORCH_CONFIG.hyperparameters,\n        learning_rate=1.0e-3,\n        batch_size=64,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "documentation": {}
    },
    {
        "label": "test_hybrid_sac",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "peekOfCode": "def test_hybrid_sac(action_size):\n    env = SimpleEnvironment([BRAIN_NAME], action_sizes=action_size, step_size=0.8)\n    new_hyperparams = attr.evolve(\n        SAC_TORCH_CONFIG.hyperparameters,\n        buffer_size=50000,\n        batch_size=256,\n        buffer_init_steps=0,\n    )\n    config = attr.evolve(\n        SAC_TORCH_CONFIG, hyperparameters=new_hyperparams, max_steps=4000",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "documentation": {}
    },
    {
        "label": "test_hybrid_visual_sac",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "peekOfCode": "def test_hybrid_visual_sac(num_visual, training_seed):\n    env = SimpleEnvironment(\n        [BRAIN_NAME], num_visual=num_visual, num_vector=0, action_sizes=(1, 1)\n    )\n    new_hyperparams = attr.evolve(\n        SAC_TORCH_CONFIG.hyperparameters,\n        buffer_size=50000,\n        batch_size=128,\n        learning_rate=3.0e-4,\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "documentation": {}
    },
    {
        "label": "test_hybrid_recurrent_sac",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "peekOfCode": "def test_hybrid_recurrent_sac():\n    env = MemoryEnvironment([BRAIN_NAME], action_sizes=(1, 1), step_size=0.5)\n    new_networksettings = attr.evolve(\n        SAC_TORCH_CONFIG.network_settings,\n        memory=NetworkSettings.MemorySettings(memory_size=16, sequence_length=16),\n    )\n    new_hyperparams = attr.evolve(\n        SAC_TORCH_CONFIG.hyperparameters,\n        batch_size=256,\n        learning_rate=3e-4,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "documentation": {}
    },
    {
        "label": "BRAIN_NAME",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "peekOfCode": "BRAIN_NAME = \"1D\"\nPPO_TORCH_CONFIG = ppo_dummy_config()\nSAC_TORCH_CONFIG = sac_dummy_config()\n@pytest.mark.check_environment_trains\n@pytest.mark.parametrize(\"action_size\", [(1, 1), (2, 2), (1, 2), (2, 1)])\ndef test_hybrid_ppo(action_size):\n    env = SimpleEnvironment([BRAIN_NAME], action_sizes=action_size, step_size=0.8)\n    new_network_settings = attr.evolve(PPO_TORCH_CONFIG.network_settings)\n    new_hyperparams = attr.evolve(\n        PPO_TORCH_CONFIG.hyperparameters,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "documentation": {}
    },
    {
        "label": "PPO_TORCH_CONFIG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "peekOfCode": "PPO_TORCH_CONFIG = ppo_dummy_config()\nSAC_TORCH_CONFIG = sac_dummy_config()\n@pytest.mark.check_environment_trains\n@pytest.mark.parametrize(\"action_size\", [(1, 1), (2, 2), (1, 2), (2, 1)])\ndef test_hybrid_ppo(action_size):\n    env = SimpleEnvironment([BRAIN_NAME], action_sizes=action_size, step_size=0.8)\n    new_network_settings = attr.evolve(PPO_TORCH_CONFIG.network_settings)\n    new_hyperparams = attr.evolve(\n        PPO_TORCH_CONFIG.hyperparameters,\n        batch_size=64,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "documentation": {}
    },
    {
        "label": "SAC_TORCH_CONFIG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "peekOfCode": "SAC_TORCH_CONFIG = sac_dummy_config()\n@pytest.mark.check_environment_trains\n@pytest.mark.parametrize(\"action_size\", [(1, 1), (2, 2), (1, 2), (2, 1)])\ndef test_hybrid_ppo(action_size):\n    env = SimpleEnvironment([BRAIN_NAME], action_sizes=action_size, step_size=0.8)\n    new_network_settings = attr.evolve(PPO_TORCH_CONFIG.network_settings)\n    new_hyperparams = attr.evolve(\n        PPO_TORCH_CONFIG.hyperparameters,\n        batch_size=64,\n        buffer_size=1024,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_hybrid",
        "documentation": {}
    },
    {
        "label": "test_swish",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "peekOfCode": "def test_swish():\n    layer = Swish()\n    input_tensor = torch.Tensor([[1, 2, 3], [4, 5, 6]])\n    target_tensor = torch.mul(input_tensor, torch.sigmoid(input_tensor))\n    assert torch.all(torch.eq(layer(input_tensor), target_tensor))\ndef test_initialization_layer():\n    torch.manual_seed(0)\n    # Test Zero\n    layer = linear_layer(\n        3, 4, kernel_init=Initialization.Zero, bias_init=Initialization.Zero",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "documentation": {}
    },
    {
        "label": "test_initialization_layer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "peekOfCode": "def test_initialization_layer():\n    torch.manual_seed(0)\n    # Test Zero\n    layer = linear_layer(\n        3, 4, kernel_init=Initialization.Zero, bias_init=Initialization.Zero\n    )\n    assert torch.all(torch.eq(layer.weight.data, torch.zeros_like(layer.weight.data)))\n    assert torch.all(torch.eq(layer.bias.data, torch.zeros_like(layer.bias.data)))\ndef test_lstm_layer():\n    torch.manual_seed(0)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "documentation": {}
    },
    {
        "label": "test_lstm_layer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "peekOfCode": "def test_lstm_layer():\n    torch.manual_seed(0)\n    # Test zero for LSTM\n    layer = lstm_layer(\n        4, 4, kernel_init=Initialization.Zero, bias_init=Initialization.Zero\n    )\n    for name, param in layer.named_parameters():\n        if \"weight\" in name:\n            assert torch.all(torch.eq(param.data, torch.zeros_like(param.data)))\n        elif \"bias\" in name:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "documentation": {}
    },
    {
        "label": "test_lstm_class",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "peekOfCode": "def test_lstm_class():\n    torch.manual_seed(0)\n    input_size = 12\n    memory_size = 64\n    batch_size = 8\n    seq_len = 16\n    lstm = LSTM(input_size, memory_size)\n    assert lstm.memory_size == memory_size\n    sample_input = torch.ones((batch_size, seq_len, input_size))\n    sample_memories = torch.ones((1, batch_size, memory_size))",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "documentation": {}
    },
    {
        "label": "test_layer_norm",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "peekOfCode": "def test_layer_norm():\n    torch.manual_seed(0)\n    torch_ln = torch.nn.LayerNorm(10, elementwise_affine=False)\n    cust_ln = LayerNorm()\n    sample_input = torch.rand(10)\n    assert torch.all(\n        torch.isclose(\n            torch_ln(sample_input), cust_ln(sample_input), atol=1e-5, rtol=0.0\n        )\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_layers",
        "documentation": {}
    },
    {
        "label": "test_networkbody_vector",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "peekOfCode": "def test_networkbody_vector():\n    torch.manual_seed(0)\n    obs_size = 4\n    network_settings = NetworkSettings()\n    obs_shapes = [(obs_size,)]\n    networkbody = NetworkBody(\n        create_observation_specs_with_shapes(obs_shapes),\n        network_settings,\n        encoded_act_size=2,\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "documentation": {}
    },
    {
        "label": "test_networkbody_lstm",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "peekOfCode": "def test_networkbody_lstm():\n    torch.manual_seed(0)\n    obs_size = 4\n    seq_len = 6\n    network_settings = NetworkSettings(\n        memory=NetworkSettings.MemorySettings(sequence_length=seq_len, memory_size=12)\n    )\n    obs_shapes = [(obs_size,)]\n    networkbody = NetworkBody(\n        create_observation_specs_with_shapes(obs_shapes), network_settings",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "documentation": {}
    },
    {
        "label": "test_networkbody_visual",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "peekOfCode": "def test_networkbody_visual():\n    torch.manual_seed(1)\n    vec_obs_size = 4\n    obs_size = (84, 84, 3)\n    network_settings = NetworkSettings()\n    obs_shapes = [(vec_obs_size,), obs_size]\n    networkbody = NetworkBody(\n        create_observation_specs_with_shapes(obs_shapes), network_settings\n    )\n    optimizer = torch.optim.Adam(networkbody.parameters(), lr=3e-3)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "documentation": {}
    },
    {
        "label": "test_multinetworkbody_vector",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "peekOfCode": "def test_multinetworkbody_vector(with_actions):\n    torch.manual_seed(0)\n    obs_size = 4\n    act_size = 2\n    n_agents = 3\n    network_settings = NetworkSettings()\n    obs_shapes = [(obs_size,)]\n    action_spec = ActionSpec(act_size, tuple(act_size for _ in range(act_size)))\n    networkbody = MultiAgentNetworkBody(\n        create_observation_specs_with_shapes(obs_shapes), network_settings, action_spec",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "documentation": {}
    },
    {
        "label": "test_multinetworkbody_lstm",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "peekOfCode": "def test_multinetworkbody_lstm(with_actions):\n    torch.manual_seed(0)\n    obs_size = 4\n    act_size = 2\n    seq_len = 16\n    n_agents = 3\n    network_settings = NetworkSettings(\n        memory=NetworkSettings.MemorySettings(sequence_length=seq_len, memory_size=12)\n    )\n    obs_shapes = [(obs_size,)]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "documentation": {}
    },
    {
        "label": "test_multinetworkbody_visual",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "peekOfCode": "def test_multinetworkbody_visual(with_actions):\n    torch.manual_seed(0)\n    act_size = 2\n    n_agents = 3\n    obs_size = 4\n    vis_obs_size = (84, 84, 3)\n    network_settings = NetworkSettings()\n    obs_shapes = [(obs_size,), vis_obs_size]\n    action_spec = ActionSpec(act_size, tuple(act_size for _ in range(act_size)))\n    networkbody = MultiAgentNetworkBody(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "documentation": {}
    },
    {
        "label": "test_valuenetwork",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "peekOfCode": "def test_valuenetwork():\n    torch.manual_seed(0)\n    obs_size = 4\n    num_outputs = 2\n    network_settings = NetworkSettings()\n    obs_spec = create_observation_specs_with_shapes([(obs_size,)])\n    stream_names = [f\"stream_name{n}\" for n in range(4)]\n    value_net = ValueNetwork(\n        stream_names, obs_spec, network_settings, outputs_per_stream=num_outputs\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "documentation": {}
    },
    {
        "label": "test_actor_critic",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "peekOfCode": "def test_actor_critic(lstm, shared):\n    obs_size = 4\n    network_settings = NetworkSettings(\n        memory=NetworkSettings.MemorySettings() if lstm else None, normalize=True\n    )\n    obs_spec = create_observation_specs_with_shapes([(obs_size,)])\n    act_size = 2\n    mask = torch.ones([1, act_size * 2])\n    stream_names = [f\"stream_name{n}\" for n in range(4)]\n    action_spec = ActionSpec(act_size, tuple(act_size for _ in range(act_size)))",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "documentation": {}
    },
    {
        "label": "test_multinetworkbody_num_agents",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "peekOfCode": "def test_multinetworkbody_num_agents(with_actions):\n    torch.manual_seed(0)\n    act_size = 2\n    obs_size = 4\n    network_settings = NetworkSettings()\n    obs_shapes = [(obs_size,)]\n    action_spec = ActionSpec(act_size, tuple(act_size for _ in range(act_size)))\n    networkbody = MultiAgentNetworkBody(\n        create_observation_specs_with_shapes(obs_shapes), network_settings, action_spec\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_networks",
        "documentation": {}
    },
    {
        "label": "dummy_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "def dummy_config():\n    return poca_dummy_config()\nVECTOR_ACTION_SPACE = 2\nVECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 4\nCONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_poca_optimizer(dummy_config, use_rnn, use_discrete, use_visual):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "create_test_poca_optimizer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "def create_test_poca_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,\n        vector_obs_space=VECTOR_OBS_SPACE,\n    )\n    trainer_settings = attr.evolve(dummy_config)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "test_poca_optimizer_update",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "def test_poca_optimizer_update(dummy_config, rnn, visual, discrete):\n    # Test evaluate\n    optimizer = create_test_poca_optimizer(\n        dummy_config, use_rnn=rnn, use_discrete=discrete, use_visual=visual\n    )\n    # Test update\n    update_buffer = mb.simulate_rollout(\n        BUFFER_INIT_SAMPLES,\n        optimizer.policy.behavior_spec,\n        memory_size=optimizer.policy.m_size,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "test_poca_get_value_estimates",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "def test_poca_get_value_estimates(dummy_config, rnn, visual, discrete):\n    optimizer = create_test_poca_optimizer(\n        dummy_config, use_rnn=rnn, use_discrete=discrete, use_visual=visual\n    )\n    time_horizon = 30\n    trajectory = make_fake_trajectory(\n        length=time_horizon,\n        observation_specs=optimizer.policy.behavior_spec.observation_specs,\n        action_spec=DISCRETE_ACTION_SPEC if discrete else CONTINUOUS_ACTION_SPEC,\n        max_step_complete=True,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "test_poca_optimizer_update_curiosity",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "def test_poca_optimizer_update_curiosity(\n    dummy_config, curiosity_dummy_config, rnn, visual, discrete  # noqa: F811\n):\n    # Test evaluate\n    dummy_config.reward_signals = curiosity_dummy_config\n    optimizer = create_test_poca_optimizer(\n        dummy_config, use_rnn=rnn, use_discrete=discrete, use_visual=visual\n    )\n    # Test update\n    update_buffer = mb.simulate_rollout(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "test_poca_optimizer_update_gail",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "def test_poca_optimizer_update_gail(gail_dummy_config, dummy_config):  # noqa: F811\n    # Test evaluate\n    dummy_config.reward_signals = gail_dummy_config\n    config = poca_dummy_config()\n    optimizer = create_test_poca_optimizer(\n        config, use_rnn=False, use_discrete=False, use_visual=False\n    )\n    # Test update\n    update_buffer = mb.simulate_rollout(\n        BUFFER_INIT_SAMPLES, optimizer.policy.behavior_spec",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "test_poca_end_episode",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "def test_poca_end_episode():\n    name_behavior_id = \"test_trainer\"\n    trainer = POCATrainer(\n        name_behavior_id,\n        10,\n        TrainerSettings(max_steps=100, checkpoint_interval=10, summary_freq=20),\n        True,\n        False,\n        0,\n        \"mock_model_path\",",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "VECTOR_ACTION_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "VECTOR_ACTION_SPACE = 2\nVECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 4\nCONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_poca_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "VECTOR_OBS_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "VECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 4\nCONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_poca_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "DISCRETE_ACTION_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "DISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 4\nCONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_poca_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "BUFFER_INIT_SAMPLES",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "BUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 4\nCONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_poca_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "NUM_AGENTS",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "NUM_AGENTS = 4\nCONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_poca_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "CONTINUOUS_ACTION_SPEC",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "CONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_poca_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,\n        vector_obs_space=VECTOR_OBS_SPACE,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "DISCRETE_ACTION_SPEC",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "peekOfCode": "DISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_poca_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,\n        vector_obs_space=VECTOR_OBS_SPACE,\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_poca",
        "documentation": {}
    },
    {
        "label": "create_policy_mock",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "peekOfCode": "def create_policy_mock(\n    dummy_config: TrainerSettings,\n    use_rnn: bool = False,\n    use_discrete: bool = True,\n    use_visual: bool = False,\n    seed: int = 0,\n) -> TorchPolicy:\n    mock_spec = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "documentation": {}
    },
    {
        "label": "test_policy_evaluate",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "peekOfCode": "def test_policy_evaluate(rnn, visual, discrete):\n    # Test evaluate\n    policy = create_policy_mock(\n        TrainerSettings(), use_rnn=rnn, use_discrete=discrete, use_visual=visual\n    )\n    decision_step, terminal_step = mb.create_steps_from_behavior_spec(\n        policy.behavior_spec, num_agents=NUM_AGENTS\n    )\n    run_out = policy.evaluate(decision_step, list(decision_step.agent_id))\n    if discrete:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "documentation": {}
    },
    {
        "label": "test_evaluate_actions",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "peekOfCode": "def test_evaluate_actions(rnn, visual, discrete):\n    policy = create_policy_mock(\n        TrainerSettings(), use_rnn=rnn, use_discrete=discrete, use_visual=visual\n    )\n    buffer = mb.simulate_rollout(64, policy.behavior_spec, memory_size=policy.m_size)\n    act_masks = ModelUtils.list_to_tensor(buffer[BufferKey.ACTION_MASK])\n    agent_action = AgentAction.from_buffer(buffer)\n    np_obs = ObsUtil.from_buffer(buffer, len(policy.behavior_spec.observation_specs))\n    tensor_obs = [ModelUtils.list_to_tensor(obs) for obs in np_obs]\n    memories = [",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "documentation": {}
    },
    {
        "label": "test_sample_actions",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "peekOfCode": "def test_sample_actions(rnn, visual, discrete):\n    policy = create_policy_mock(\n        TrainerSettings(), use_rnn=rnn, use_discrete=discrete, use_visual=visual\n    )\n    buffer = mb.simulate_rollout(64, policy.behavior_spec, memory_size=policy.m_size)\n    act_masks = ModelUtils.list_to_tensor(buffer[BufferKey.ACTION_MASK])\n    np_obs = ObsUtil.from_buffer(buffer, len(policy.behavior_spec.observation_specs))\n    tensor_obs = [ModelUtils.list_to_tensor(obs) for obs in np_obs]\n    memories = [\n        ModelUtils.list_to_tensor(buffer[BufferKey.MEMORY][i])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "documentation": {}
    },
    {
        "label": "test_step_overflow",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "peekOfCode": "def test_step_overflow():\n    policy = create_policy_mock(TrainerSettings())\n    policy.set_step(2 ** 31 - 1)\n    assert policy.get_current_step() == 2 ** 31 - 1  # step = 2147483647\n    policy.increment_step(3)\n    assert policy.get_current_step() == 2 ** 31 + 2  # step = 2147483650",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "documentation": {}
    },
    {
        "label": "VECTOR_ACTION_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "peekOfCode": "VECTOR_ACTION_SPACE = 2\nVECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 32\nNUM_AGENTS = 12\nEPSILON = 1e-7\ndef create_policy_mock(\n    dummy_config: TrainerSettings,\n    use_rnn: bool = False,\n    use_discrete: bool = True,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "documentation": {}
    },
    {
        "label": "VECTOR_OBS_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "peekOfCode": "VECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 32\nNUM_AGENTS = 12\nEPSILON = 1e-7\ndef create_policy_mock(\n    dummy_config: TrainerSettings,\n    use_rnn: bool = False,\n    use_discrete: bool = True,\n    use_visual: bool = False,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "documentation": {}
    },
    {
        "label": "DISCRETE_ACTION_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "peekOfCode": "DISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 32\nNUM_AGENTS = 12\nEPSILON = 1e-7\ndef create_policy_mock(\n    dummy_config: TrainerSettings,\n    use_rnn: bool = False,\n    use_discrete: bool = True,\n    use_visual: bool = False,\n    seed: int = 0,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "documentation": {}
    },
    {
        "label": "BUFFER_INIT_SAMPLES",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "peekOfCode": "BUFFER_INIT_SAMPLES = 32\nNUM_AGENTS = 12\nEPSILON = 1e-7\ndef create_policy_mock(\n    dummy_config: TrainerSettings,\n    use_rnn: bool = False,\n    use_discrete: bool = True,\n    use_visual: bool = False,\n    seed: int = 0,\n) -> TorchPolicy:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "documentation": {}
    },
    {
        "label": "NUM_AGENTS",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "peekOfCode": "NUM_AGENTS = 12\nEPSILON = 1e-7\ndef create_policy_mock(\n    dummy_config: TrainerSettings,\n    use_rnn: bool = False,\n    use_discrete: bool = True,\n    use_visual: bool = False,\n    seed: int = 0,\n) -> TorchPolicy:\n    mock_spec = mb.setup_test_behavior_specs(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "documentation": {}
    },
    {
        "label": "EPSILON",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "peekOfCode": "EPSILON = 1e-7\ndef create_policy_mock(\n    dummy_config: TrainerSettings,\n    use_rnn: bool = False,\n    use_discrete: bool = True,\n    use_visual: bool = False,\n    seed: int = 0,\n) -> TorchPolicy:\n    mock_spec = mb.setup_test_behavior_specs(\n        use_discrete,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_policy",
        "documentation": {}
    },
    {
        "label": "dummy_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "peekOfCode": "def dummy_config():\n    return ppo_dummy_config()\nVECTOR_ACTION_SPACE = 2\nVECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 12\nCONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_ppo_optimizer(dummy_config, use_rnn, use_discrete, use_visual):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "documentation": {}
    },
    {
        "label": "create_test_ppo_optimizer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "peekOfCode": "def create_test_ppo_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,\n        vector_obs_space=VECTOR_OBS_SPACE,\n    )\n    trainer_settings = attr.evolve(dummy_config)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "documentation": {}
    },
    {
        "label": "test_ppo_optimizer_update",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "peekOfCode": "def test_ppo_optimizer_update(dummy_config, rnn, visual, discrete):\n    # Test evaluate\n    optimizer = create_test_ppo_optimizer(\n        dummy_config, use_rnn=rnn, use_discrete=discrete, use_visual=visual\n    )\n    # Test update\n    update_buffer = mb.simulate_rollout(\n        BUFFER_INIT_SAMPLES,\n        optimizer.policy.behavior_spec,\n        memory_size=optimizer.policy.m_size,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "documentation": {}
    },
    {
        "label": "test_ppo_optimizer_update_curiosity",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "peekOfCode": "def test_ppo_optimizer_update_curiosity(\n    dummy_config, curiosity_dummy_config, rnn, visual, discrete  # noqa: F811\n):\n    # Test evaluate\n    dummy_config.reward_signals = curiosity_dummy_config\n    optimizer = create_test_ppo_optimizer(\n        dummy_config, use_rnn=rnn, use_discrete=discrete, use_visual=visual\n    )\n    # Test update\n    update_buffer = mb.simulate_rollout(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "documentation": {}
    },
    {
        "label": "test_ppo_optimizer_update_gail",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "peekOfCode": "def test_ppo_optimizer_update_gail(gail_dummy_config, dummy_config):  # noqa: F811\n    # Test evaluate\n    dummy_config.reward_signals = gail_dummy_config\n    config = ppo_dummy_config()\n    optimizer = create_test_ppo_optimizer(\n        config, use_rnn=False, use_discrete=False, use_visual=False\n    )\n    # Test update\n    update_buffer = mb.simulate_rollout(\n        BUFFER_INIT_SAMPLES, optimizer.policy.behavior_spec",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "documentation": {}
    },
    {
        "label": "test_ppo_get_value_estimates",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "peekOfCode": "def test_ppo_get_value_estimates(dummy_config, rnn, visual, discrete):\n    optimizer = create_test_ppo_optimizer(\n        dummy_config, use_rnn=rnn, use_discrete=discrete, use_visual=visual\n    )\n    # Time horizon is longer than sequence length, make sure to test\n    # process trajectory on multiple sequences in trajectory + some padding\n    time_horizon = 30\n    trajectory = make_fake_trajectory(\n        length=time_horizon,\n        observation_specs=optimizer.policy.behavior_spec.observation_specs,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "documentation": {}
    },
    {
        "label": "VECTOR_ACTION_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "peekOfCode": "VECTOR_ACTION_SPACE = 2\nVECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 12\nCONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_ppo_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "documentation": {}
    },
    {
        "label": "VECTOR_OBS_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "peekOfCode": "VECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 12\nCONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_ppo_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "documentation": {}
    },
    {
        "label": "DISCRETE_ACTION_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "peekOfCode": "DISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 12\nCONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_ppo_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "documentation": {}
    },
    {
        "label": "BUFFER_INIT_SAMPLES",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "peekOfCode": "BUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 12\nCONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_ppo_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "documentation": {}
    },
    {
        "label": "NUM_AGENTS",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "peekOfCode": "NUM_AGENTS = 12\nCONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_ppo_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "documentation": {}
    },
    {
        "label": "CONTINUOUS_ACTION_SPEC",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "peekOfCode": "CONTINUOUS_ACTION_SPEC = ActionSpec.create_continuous(VECTOR_ACTION_SPACE)\nDISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_ppo_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,\n        vector_obs_space=VECTOR_OBS_SPACE,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "documentation": {}
    },
    {
        "label": "DISCRETE_ACTION_SPEC",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "peekOfCode": "DISCRETE_ACTION_SPEC = ActionSpec.create_discrete(tuple(DISCRETE_ACTION_SPACE))\ndef create_test_ppo_optimizer(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_specs = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,\n        vector_obs_space=VECTOR_OBS_SPACE,\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_ppo",
        "documentation": {}
    },
    {
        "label": "dummy_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "peekOfCode": "def dummy_config():\n    return sac_dummy_config()\nVECTOR_ACTION_SPACE = 2\nVECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 12\ndef create_sac_optimizer_mock(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_brain = mb.setup_test_behavior_specs(\n        use_discrete,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "documentation": {}
    },
    {
        "label": "create_sac_optimizer_mock",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "peekOfCode": "def create_sac_optimizer_mock(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_brain = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,\n        vector_obs_space=VECTOR_OBS_SPACE if not use_visual else 0,\n    )\n    trainer_settings = dummy_config",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "documentation": {}
    },
    {
        "label": "test_sac_optimizer_update",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "peekOfCode": "def test_sac_optimizer_update(dummy_config, rnn, visual, discrete):\n    torch.manual_seed(0)\n    # Test evaluate\n    optimizer = create_sac_optimizer_mock(\n        dummy_config, use_rnn=rnn, use_discrete=discrete, use_visual=visual\n    )\n    # Test update\n    update_buffer = mb.simulate_rollout(\n        BUFFER_INIT_SAMPLES, optimizer.policy.behavior_spec, memory_size=12\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "documentation": {}
    },
    {
        "label": "test_sac_update_reward_signals",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "peekOfCode": "def test_sac_update_reward_signals(\n    dummy_config, curiosity_dummy_config, discrete  # noqa: F811\n):\n    # Add a Curiosity module\n    dummy_config.reward_signals = curiosity_dummy_config\n    optimizer = create_sac_optimizer_mock(\n        dummy_config, use_rnn=False, use_discrete=discrete, use_visual=False\n    )\n    # Test update, while removing PPO-specific buffer elements.\n    update_buffer = mb.simulate_rollout(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "documentation": {}
    },
    {
        "label": "VECTOR_ACTION_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "peekOfCode": "VECTOR_ACTION_SPACE = 2\nVECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 12\ndef create_sac_optimizer_mock(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_brain = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "documentation": {}
    },
    {
        "label": "VECTOR_OBS_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "peekOfCode": "VECTOR_OBS_SPACE = 8\nDISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 12\ndef create_sac_optimizer_mock(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_brain = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "documentation": {}
    },
    {
        "label": "DISCRETE_ACTION_SPACE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "peekOfCode": "DISCRETE_ACTION_SPACE = [3, 3, 3, 2]\nBUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 12\ndef create_sac_optimizer_mock(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_brain = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "documentation": {}
    },
    {
        "label": "BUFFER_INIT_SAMPLES",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "peekOfCode": "BUFFER_INIT_SAMPLES = 64\nNUM_AGENTS = 12\ndef create_sac_optimizer_mock(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_brain = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,\n        vector_obs_space=VECTOR_OBS_SPACE if not use_visual else 0,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "documentation": {}
    },
    {
        "label": "NUM_AGENTS",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "peekOfCode": "NUM_AGENTS = 12\ndef create_sac_optimizer_mock(dummy_config, use_rnn, use_discrete, use_visual):\n    mock_brain = mb.setup_test_behavior_specs(\n        use_discrete,\n        use_visual,\n        vector_action_space=DISCRETE_ACTION_SPACE\n        if use_discrete\n        else VECTOR_ACTION_SPACE,\n        vector_obs_space=VECTOR_OBS_SPACE if not use_visual else 0,\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_sac",
        "documentation": {}
    },
    {
        "label": "test_simple_poca",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_simple_poca(action_sizes):\n    env = MultiAgentEnvironment([BRAIN_NAME], action_sizes=action_sizes, num_agents=2)\n    config = attr.evolve(POCA_TORCH_CONFIG)\n    check_environment_trains(env, {BRAIN_NAME: config})\n@pytest.mark.parametrize(\"num_visual\", [1, 2])\ndef test_visual_poca(num_visual):\n    env = MultiAgentEnvironment(\n        [BRAIN_NAME], action_sizes=(0, 1), num_agents=2, num_visual=num_visual\n    )\n    new_hyperparams = attr.evolve(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_visual_poca",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_visual_poca(num_visual):\n    env = MultiAgentEnvironment(\n        [BRAIN_NAME], action_sizes=(0, 1), num_agents=2, num_visual=num_visual\n    )\n    new_hyperparams = attr.evolve(\n        POCA_TORCH_CONFIG.hyperparameters, learning_rate=3.0e-4\n    )\n    config = attr.evolve(POCA_TORCH_CONFIG, hyperparameters=new_hyperparams)\n    check_environment_trains(env, {BRAIN_NAME: config})\n@pytest.mark.parametrize(\"conditioning_type\", [ConditioningType.HYPER])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_var_len_obs_and_goal_poca",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_var_len_obs_and_goal_poca(num_vis, num_vector, num_var_len, conditioning_type):\n    env = MultiAgentEnvironment(\n        [BRAIN_NAME],\n        action_sizes=(0, 1),\n        num_visual=num_vis,\n        num_vector=num_vector,\n        num_var_len=num_var_len,\n        step_size=0.2,\n        num_agents=2,\n        goal_indices=[0],",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_recurrent_poca",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_recurrent_poca(action_sizes, is_multiagent):\n    if is_multiagent:\n        # This is not a recurrent environment, just check if LSTM doesn't crash\n        env = MultiAgentEnvironment(\n            [BRAIN_NAME], action_sizes=action_sizes, num_agents=2\n        )\n    else:\n        # Actually test LSTM here\n        env = MemoryEnvironment([BRAIN_NAME], action_sizes=action_sizes)\n    new_network_settings = attr.evolve(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_simple_ppo",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_simple_ppo(action_sizes):\n    env = SimpleEnvironment([BRAIN_NAME], action_sizes=action_sizes)\n    config = attr.evolve(PPO_TORCH_CONFIG)\n    check_environment_trains(env, {BRAIN_NAME: config})\n@pytest.mark.parametrize(\"action_sizes\", [(0, 2), (2, 0)])\ndef test_2d_ppo(action_sizes):\n    env = SimpleEnvironment([BRAIN_NAME], action_sizes=action_sizes, step_size=0.8)\n    new_hyperparams = attr.evolve(\n        PPO_TORCH_CONFIG.hyperparameters, batch_size=64, buffer_size=640\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_2d_ppo",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_2d_ppo(action_sizes):\n    env = SimpleEnvironment([BRAIN_NAME], action_sizes=action_sizes, step_size=0.8)\n    new_hyperparams = attr.evolve(\n        PPO_TORCH_CONFIG.hyperparameters, batch_size=64, buffer_size=640\n    )\n    config = attr.evolve(\n        PPO_TORCH_CONFIG, hyperparameters=new_hyperparams, max_steps=10000\n    )\n    check_environment_trains(env, {BRAIN_NAME: config})\n@pytest.mark.parametrize(\"action_sizes\", [(0, 1), (1, 0)])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_visual_ppo",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_visual_ppo(num_visual, action_sizes):\n    env = SimpleEnvironment(\n        [BRAIN_NAME],\n        action_sizes=action_sizes,\n        num_visual=num_visual,\n        num_vector=0,\n        step_size=0.2,\n    )\n    new_hyperparams = attr.evolve(\n        PPO_TORCH_CONFIG.hyperparameters, learning_rate=3.0e-4",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_var_len_obs_and_goal_ppo",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_var_len_obs_and_goal_ppo(\n    num_vis, num_vector, num_var_len, action_sizes, conditioning_type\n):\n    env = SimpleEnvironment(\n        [BRAIN_NAME],\n        action_sizes=action_sizes,\n        num_visual=num_vis,\n        num_vector=num_vector,\n        num_var_len=num_var_len,\n        step_size=0.2,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_visual_advanced_ppo",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_visual_advanced_ppo(vis_encode_type, num_visual):\n    env = SimpleEnvironment(\n        [BRAIN_NAME],\n        action_sizes=(0, 1),\n        num_visual=num_visual,\n        num_vector=0,\n        step_size=0.5,\n        vis_obs_size=(5, 5, 5) if vis_encode_type == \"match3\" else (36, 36, 3),\n    )\n    new_networksettings = attr.evolve(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_recurrent_ppo",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_recurrent_ppo(action_sizes):\n    env = MemoryEnvironment([BRAIN_NAME], action_sizes=action_sizes)\n    new_network_settings = attr.evolve(\n        PPO_TORCH_CONFIG.network_settings,\n        memory=NetworkSettings.MemorySettings(memory_size=16),\n    )\n    new_hyperparams = attr.evolve(\n        PPO_TORCH_CONFIG.hyperparameters,\n        learning_rate=1.0e-3,\n        batch_size=64,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_simple_sac",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_simple_sac(action_sizes):\n    env = SimpleEnvironment([BRAIN_NAME], action_sizes=action_sizes)\n    config = attr.evolve(SAC_TORCH_CONFIG)\n    check_environment_trains(env, {BRAIN_NAME: config})\n@pytest.mark.parametrize(\"action_sizes\", [(0, 2), (2, 0)])\ndef test_2d_sac(action_sizes):\n    env = SimpleEnvironment([BRAIN_NAME], action_sizes=action_sizes, step_size=0.8)\n    new_hyperparams = attr.evolve(\n        SAC_TORCH_CONFIG.hyperparameters, buffer_init_steps=2000\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_2d_sac",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_2d_sac(action_sizes):\n    env = SimpleEnvironment([BRAIN_NAME], action_sizes=action_sizes, step_size=0.8)\n    new_hyperparams = attr.evolve(\n        SAC_TORCH_CONFIG.hyperparameters, buffer_init_steps=2000\n    )\n    config = attr.evolve(\n        SAC_TORCH_CONFIG, hyperparameters=new_hyperparams, max_steps=3000\n    )\n    check_environment_trains(env, {BRAIN_NAME: config}, success_threshold=0.8)\n@pytest.mark.parametrize(\"action_sizes\", [(0, 1), (1, 0)])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_visual_sac",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_visual_sac(num_visual, action_sizes):\n    env = SimpleEnvironment(\n        [BRAIN_NAME],\n        action_sizes=action_sizes,\n        num_visual=num_visual,\n        num_vector=0,\n        step_size=0.2,\n    )\n    new_hyperparams = attr.evolve(\n        SAC_TORCH_CONFIG.hyperparameters, batch_size=16, learning_rate=3e-4",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_var_len_obs_sac",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_var_len_obs_sac(num_var_len, action_sizes):\n    env = SimpleEnvironment(\n        [BRAIN_NAME],\n        action_sizes=action_sizes,\n        num_visual=0,\n        num_var_len=num_var_len,\n        num_vector=0,\n        step_size=0.2,\n    )\n    new_hyperparams = attr.evolve(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_visual_advanced_sac",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_visual_advanced_sac(vis_encode_type, num_visual):\n    env = SimpleEnvironment(\n        [BRAIN_NAME],\n        action_sizes=(0, 1),\n        num_visual=num_visual,\n        num_vector=0,\n        step_size=0.5,\n        vis_obs_size=(5, 5, 5) if vis_encode_type == \"match3\" else (36, 36, 3),\n    )\n    new_networksettings = attr.evolve(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_recurrent_sac",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_recurrent_sac(action_sizes):\n    step_size = 0.2 if action_sizes == (0, 1) else 0.5\n    env = MemoryEnvironment(\n        [BRAIN_NAME], action_sizes=action_sizes, step_size=step_size\n    )\n    new_networksettings = attr.evolve(\n        SAC_TORCH_CONFIG.network_settings,\n        memory=NetworkSettings.MemorySettings(memory_size=16, sequence_length=16),\n    )\n    new_hyperparams = attr.evolve(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_simple_ghost",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_simple_ghost(action_sizes):\n    env = SimpleEnvironment(\n        [BRAIN_NAME + \"?team=0\", BRAIN_NAME + \"?team=1\"], action_sizes=action_sizes\n    )\n    self_play_settings = SelfPlaySettings(\n        play_against_latest_model_ratio=1.0, save_steps=2000, swap_steps=2000\n    )\n    config = attr.evolve(PPO_TORCH_CONFIG, self_play=self_play_settings, max_steps=2500)\n    check_environment_trains(env, {BRAIN_NAME: config})\n@pytest.mark.parametrize(\"action_sizes\", [(0, 1), (1, 0)])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_simple_ghost_fails",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_simple_ghost_fails(action_sizes):\n    env = SimpleEnvironment(\n        [BRAIN_NAME + \"?team=0\", BRAIN_NAME + \"?team=1\"], action_sizes=action_sizes\n    )\n    # This config should fail because the ghosted policy is never swapped with a competent policy.\n    # Swap occurs after max step is reached.\n    self_play_settings = SelfPlaySettings(\n        play_against_latest_model_ratio=1.0, save_steps=2000, swap_steps=4000\n    )\n    config = attr.evolve(PPO_TORCH_CONFIG, self_play=self_play_settings, max_steps=2500)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_simple_asymm_ghost",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_simple_asymm_ghost(action_sizes):\n    # Make opponent for asymmetric case\n    brain_name_opp = BRAIN_NAME + \"Opp\"\n    env = SimpleEnvironment(\n        [BRAIN_NAME + \"?team=0\", brain_name_opp + \"?team=1\"], action_sizes=action_sizes\n    )\n    self_play_settings = SelfPlaySettings(\n        play_against_latest_model_ratio=1.0,\n        save_steps=10000,\n        swap_steps=10000,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_simple_asymm_ghost_fails",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_simple_asymm_ghost_fails(action_sizes):\n    # Make opponent for asymmetric case\n    brain_name_opp = BRAIN_NAME + \"Opp\"\n    env = SimpleEnvironment(\n        [BRAIN_NAME + \"?team=0\", brain_name_opp + \"?team=1\"], action_sizes=action_sizes\n    )\n    # This config should fail because the team that us not learning when both have reached\n    # max step should be executing the initial, untrained poliy.\n    self_play_settings = SelfPlaySettings(\n        play_against_latest_model_ratio=0.0,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "simple_record",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def simple_record(tmpdir_factory):\n    def record_demo(action_sizes, num_visual=0, num_vector=1):\n        env = RecordEnvironment(\n            [BRAIN_NAME],\n            action_sizes=action_sizes,\n            num_visual=num_visual,\n            num_vector=num_vector,\n            n_demos=100,\n        )\n        # If we want to use true demos, we can solve the env in the usual way",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_gail",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_gail(simple_record, action_sizes, trainer_config):\n    demo_path = simple_record(action_sizes)\n    env = SimpleEnvironment([BRAIN_NAME], action_sizes=action_sizes, step_size=0.2)\n    bc_settings = BehavioralCloningSettings(demo_path=demo_path, steps=1000)\n    reward_signals = {\n        RewardSignalType.GAIL: GAILSettings(encoding_size=32, demo_path=demo_path)\n    }\n    config = attr.evolve(\n        trainer_config,\n        reward_signals=reward_signals,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_gail_visual_ppo",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_gail_visual_ppo(simple_record, action_sizes):\n    demo_path = simple_record(action_sizes, num_visual=1, num_vector=0)\n    env = SimpleEnvironment(\n        [BRAIN_NAME],\n        num_visual=1,\n        num_vector=0,\n        action_sizes=action_sizes,\n        step_size=0.3,\n    )\n    bc_settings = BehavioralCloningSettings(demo_path=demo_path, steps=1500)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_gail_visual_sac",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "def test_gail_visual_sac(simple_record, action_sizes):\n    demo_path = simple_record(action_sizes, num_visual=1, num_vector=0)\n    env = SimpleEnvironment(\n        [BRAIN_NAME],\n        num_visual=1,\n        num_vector=0,\n        action_sizes=action_sizes,\n        step_size=0.2,\n    )\n    bc_settings = BehavioralCloningSettings(demo_path=demo_path, steps=1000)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "BRAIN_NAME",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "BRAIN_NAME = \"1D\"\nPPO_TORCH_CONFIG = ppo_dummy_config()\nSAC_TORCH_CONFIG = sac_dummy_config()\nPOCA_TORCH_CONFIG = poca_dummy_config()\n# tests in this file won't be tested on GPU machine\npytestmark = pytest.mark.check_environment_trains\n@pytest.mark.parametrize(\"action_sizes\", [(0, 1), (1, 0)])\ndef test_simple_poca(action_sizes):\n    env = MultiAgentEnvironment([BRAIN_NAME], action_sizes=action_sizes, num_agents=2)\n    config = attr.evolve(POCA_TORCH_CONFIG)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "PPO_TORCH_CONFIG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "PPO_TORCH_CONFIG = ppo_dummy_config()\nSAC_TORCH_CONFIG = sac_dummy_config()\nPOCA_TORCH_CONFIG = poca_dummy_config()\n# tests in this file won't be tested on GPU machine\npytestmark = pytest.mark.check_environment_trains\n@pytest.mark.parametrize(\"action_sizes\", [(0, 1), (1, 0)])\ndef test_simple_poca(action_sizes):\n    env = MultiAgentEnvironment([BRAIN_NAME], action_sizes=action_sizes, num_agents=2)\n    config = attr.evolve(POCA_TORCH_CONFIG)\n    check_environment_trains(env, {BRAIN_NAME: config})",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "SAC_TORCH_CONFIG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "SAC_TORCH_CONFIG = sac_dummy_config()\nPOCA_TORCH_CONFIG = poca_dummy_config()\n# tests in this file won't be tested on GPU machine\npytestmark = pytest.mark.check_environment_trains\n@pytest.mark.parametrize(\"action_sizes\", [(0, 1), (1, 0)])\ndef test_simple_poca(action_sizes):\n    env = MultiAgentEnvironment([BRAIN_NAME], action_sizes=action_sizes, num_agents=2)\n    config = attr.evolve(POCA_TORCH_CONFIG)\n    check_environment_trains(env, {BRAIN_NAME: config})\n@pytest.mark.parametrize(\"num_visual\", [1, 2])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "POCA_TORCH_CONFIG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "POCA_TORCH_CONFIG = poca_dummy_config()\n# tests in this file won't be tested on GPU machine\npytestmark = pytest.mark.check_environment_trains\n@pytest.mark.parametrize(\"action_sizes\", [(0, 1), (1, 0)])\ndef test_simple_poca(action_sizes):\n    env = MultiAgentEnvironment([BRAIN_NAME], action_sizes=action_sizes, num_agents=2)\n    config = attr.evolve(POCA_TORCH_CONFIG)\n    check_environment_trains(env, {BRAIN_NAME: config})\n@pytest.mark.parametrize(\"num_visual\", [1, 2])\ndef test_visual_poca(num_visual):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "pytestmark",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "peekOfCode": "pytestmark = pytest.mark.check_environment_trains\n@pytest.mark.parametrize(\"action_sizes\", [(0, 1), (1, 0)])\ndef test_simple_poca(action_sizes):\n    env = MultiAgentEnvironment([BRAIN_NAME], action_sizes=action_sizes, num_agents=2)\n    config = attr.evolve(POCA_TORCH_CONFIG)\n    check_environment_trains(env, {BRAIN_NAME: config})\n@pytest.mark.parametrize(\"num_visual\", [1, 2])\ndef test_visual_poca(num_visual):\n    env = MultiAgentEnvironment(\n        [BRAIN_NAME], action_sizes=(0, 1), num_agents=2, num_visual=num_visual",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_simple_rl",
        "documentation": {}
    },
    {
        "label": "test_min_visual_size",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "peekOfCode": "def test_min_visual_size():\n    # Make sure each EncoderType has an entry in MIS_RESOLUTION_FOR_ENCODER\n    assert set(ModelUtils.MIN_RESOLUTION_FOR_ENCODER.keys()) == set(EncoderType)\n    for encoder_type in EncoderType:\n        good_size = ModelUtils.MIN_RESOLUTION_FOR_ENCODER[encoder_type]\n        vis_input = torch.ones((1, good_size, good_size, 3))\n        ModelUtils._check_resolution_for_encoder(good_size, good_size, encoder_type)\n        enc_func = ModelUtils.get_encoder_for_type(encoder_type)\n        enc = enc_func(good_size, good_size, 3, 1)\n        enc.forward(vis_input)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "documentation": {}
    },
    {
        "label": "test_invalid_visual_input_size",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "peekOfCode": "def test_invalid_visual_input_size(encoder_type):\n    with pytest.raises(UnityTrainerException):\n        obs_spec = create_observation_specs_with_shapes(\n            [\n                (\n                    ModelUtils.MIN_RESOLUTION_FOR_ENCODER[encoder_type] - 1,\n                    ModelUtils.MIN_RESOLUTION_FOR_ENCODER[encoder_type],\n                    1,\n                )\n            ]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "documentation": {}
    },
    {
        "label": "test_create_inputs",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "peekOfCode": "def test_create_inputs(encoder_type, normalize, num_vector, num_visual):\n    vec_obs_shape = (5,)\n    vis_obs_shape = (84, 84, 3)\n    obs_shapes = []\n    for _ in range(num_vector):\n        obs_shapes.append(vec_obs_shape)\n    for _ in range(num_visual):\n        obs_shapes.append(vis_obs_shape)\n    h_size = 128\n    obs_spec = create_observation_specs_with_shapes(obs_shapes)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "documentation": {}
    },
    {
        "label": "test_decayed_value",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "peekOfCode": "def test_decayed_value():\n    test_steps = [0, 4, 9]\n    # Test constant decay\n    param = ModelUtils.DecayedValue(ScheduleType.CONSTANT, 1.0, 0.2, test_steps[-1])\n    for _step in test_steps:\n        _param = param.get_value(_step)\n        assert _param == 1.0\n    test_results = [1.0, 0.6444, 0.2]\n    # Test linear decay\n    param = ModelUtils.DecayedValue(ScheduleType.LINEAR, 1.0, 0.2, test_steps[-1])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "documentation": {}
    },
    {
        "label": "test_polynomial_decay",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "peekOfCode": "def test_polynomial_decay():\n    test_steps = [0, 4, 9]\n    test_results = [1.0, 0.7, 0.2]\n    for _step, _result in zip(test_steps, test_results):\n        decayed = ModelUtils.polynomial_decay(\n            1.0, 0.2, test_steps[-1], _step, power=0.8\n        )\n        assert decayed == pytest.approx(_result, abs=0.01)\ndef test_list_to_tensor():\n    # Test converting pure list",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "documentation": {}
    },
    {
        "label": "test_list_to_tensor",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "peekOfCode": "def test_list_to_tensor():\n    # Test converting pure list\n    unconverted_list = [[1.0, 2], [1, 3], [1, 4]]\n    tensor = ModelUtils.list_to_tensor(unconverted_list)\n    # Should be equivalent to torch.tensor conversion\n    assert torch.equal(tensor, torch.tensor(unconverted_list))\n    # Test converting pure numpy array\n    np_list = np.asarray(unconverted_list)\n    tensor = ModelUtils.list_to_tensor(np_list)\n    # Should be equivalent to torch.tensor conversion",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "documentation": {}
    },
    {
        "label": "test_break_into_branches",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "peekOfCode": "def test_break_into_branches():\n    # Test normal multi-branch case\n    all_actions = torch.tensor([[1, 2, 3, 4, 5, 6]])\n    action_size = [2, 1, 3]\n    broken_actions = ModelUtils.break_into_branches(all_actions, action_size)\n    assert len(action_size) == len(broken_actions)\n    for i, _action in enumerate(broken_actions):\n        assert _action.shape == (1, action_size[i])\n    # Test 1-branch case\n    action_size = [6]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "documentation": {}
    },
    {
        "label": "test_actions_to_onehot",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "peekOfCode": "def test_actions_to_onehot():\n    all_actions = torch.tensor([[1, 0, 2], [1, 0, 2]])\n    action_size = [2, 1, 3]\n    oh_actions = ModelUtils.actions_to_onehot(all_actions, action_size)\n    expected_result = [\n        torch.tensor([[0, 1], [0, 1]], dtype=torch.float),\n        torch.tensor([[1], [1]], dtype=torch.float),\n        torch.tensor([[0, 0, 1], [0, 0, 1]], dtype=torch.float),\n    ]\n    for res, exp in zip(oh_actions, expected_result):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "documentation": {}
    },
    {
        "label": "test_masked_mean",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "peekOfCode": "def test_masked_mean():\n    test_input = torch.tensor([1, 2, 3, 4, 5])\n    masks = torch.ones_like(test_input).bool()\n    mean = ModelUtils.masked_mean(test_input, masks=masks)\n    assert mean == 3.0\n    masks = torch.tensor([False, False, True, True, True])\n    mean = ModelUtils.masked_mean(test_input, masks=masks)\n    assert mean == 4.0\n    # Make sure it works if all masks are off\n    masks = torch.tensor([False, False, False, False, False])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "documentation": {}
    },
    {
        "label": "test_soft_update",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "peekOfCode": "def test_soft_update():\n    class TestModule(torch.nn.Module):\n        def __init__(self, vals):\n            super().__init__()\n            self.parameter = torch.nn.Parameter(torch.ones(5, 5, 5) * vals)\n    tm1 = TestModule(0)\n    tm2 = TestModule(1)\n    tm3 = TestModule(2)\n    ModelUtils.soft_update(tm1, tm3, tau=0.5)\n    assert torch.equal(tm3.parameter, torch.ones(5, 5, 5))",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.torch.test_utils",
        "documentation": {}
    },
    {
        "label": "DebugWriter",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.check_env_trains",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.check_env_trains",
        "peekOfCode": "class DebugWriter(StatsWriter):\n    \"\"\"\n    Print to stdout so stats can be viewed in pytest\n    \"\"\"\n    def __init__(self):\n        self._last_reward_summary: Dict[str, float] = {}\n    def get_last_rewards(self):\n        return self._last_reward_summary\n    def write_stats(\n        self, category: str, values: Dict[str, StatsSummary], step: int",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.check_env_trains",
        "documentation": {}
    },
    {
        "label": "default_reward_processor",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.check_env_trains",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.check_env_trains",
        "peekOfCode": "def default_reward_processor(rewards, last_n_rewards=5):\n    rewards_to_use = rewards[-last_n_rewards:]\n    # For debugging tests\n    print(f\"Last {last_n_rewards} rewards:\", rewards_to_use)\n    return np.array(rewards[-last_n_rewards:], dtype=np.float32).mean()\ndef check_environment_trains(\n    env,\n    trainer_config,\n    reward_processor=default_reward_processor,\n    env_parameter_manager=None,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.check_env_trains",
        "documentation": {}
    },
    {
        "label": "check_environment_trains",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.check_env_trains",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.check_env_trains",
        "peekOfCode": "def check_environment_trains(\n    env,\n    trainer_config,\n    reward_processor=default_reward_processor,\n    env_parameter_manager=None,\n    success_threshold=0.9,\n    env_manager=None,\n    training_seed=None,\n):\n    if env_parameter_manager is None:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.check_env_trains",
        "documentation": {}
    },
    {
        "label": "ppo_dummy_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "peekOfCode": "def ppo_dummy_config():\n    return copy.deepcopy(_PPO_CONFIG)\ndef sac_dummy_config():\n    return copy.deepcopy(_SAC_CONFIG)\ndef poca_dummy_config():\n    return copy.deepcopy(_POCA_CONFIG)\n@pytest.fixture\ndef gail_dummy_config():\n    return {RewardSignalType.GAIL: GAILSettings(demo_path=CONTINUOUS_DEMO_PATH)}\n@pytest.fixture",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "sac_dummy_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "peekOfCode": "def sac_dummy_config():\n    return copy.deepcopy(_SAC_CONFIG)\ndef poca_dummy_config():\n    return copy.deepcopy(_POCA_CONFIG)\n@pytest.fixture\ndef gail_dummy_config():\n    return {RewardSignalType.GAIL: GAILSettings(demo_path=CONTINUOUS_DEMO_PATH)}\n@pytest.fixture\ndef curiosity_dummy_config():\n    return {RewardSignalType.CURIOSITY: CuriositySettings()}",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "poca_dummy_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "peekOfCode": "def poca_dummy_config():\n    return copy.deepcopy(_POCA_CONFIG)\n@pytest.fixture\ndef gail_dummy_config():\n    return {RewardSignalType.GAIL: GAILSettings(demo_path=CONTINUOUS_DEMO_PATH)}\n@pytest.fixture\ndef curiosity_dummy_config():\n    return {RewardSignalType.CURIOSITY: CuriositySettings()}\n@pytest.fixture\ndef extrinsic_dummy_config():",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "gail_dummy_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "peekOfCode": "def gail_dummy_config():\n    return {RewardSignalType.GAIL: GAILSettings(demo_path=CONTINUOUS_DEMO_PATH)}\n@pytest.fixture\ndef curiosity_dummy_config():\n    return {RewardSignalType.CURIOSITY: CuriositySettings()}\n@pytest.fixture\ndef extrinsic_dummy_config():\n    return {RewardSignalType.EXTRINSIC: RewardSignalSettings()}\ndef create_observation_specs_with_shapes(\n    shapes: List[Tuple[int, ...]]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "curiosity_dummy_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "peekOfCode": "def curiosity_dummy_config():\n    return {RewardSignalType.CURIOSITY: CuriositySettings()}\n@pytest.fixture\ndef extrinsic_dummy_config():\n    return {RewardSignalType.EXTRINSIC: RewardSignalSettings()}\ndef create_observation_specs_with_shapes(\n    shapes: List[Tuple[int, ...]]\n) -> List[ObservationSpec]:\n    obs_specs: List[ObservationSpec] = []\n    for i, shape in enumerate(shapes):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "extrinsic_dummy_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "peekOfCode": "def extrinsic_dummy_config():\n    return {RewardSignalType.EXTRINSIC: RewardSignalSettings()}\ndef create_observation_specs_with_shapes(\n    shapes: List[Tuple[int, ...]]\n) -> List[ObservationSpec]:\n    obs_specs: List[ObservationSpec] = []\n    for i, shape in enumerate(shapes):\n        dim_prop = (DimensionProperty.UNSPECIFIED,) * len(shape)\n        if len(shape) == 2:\n            dim_prop = (DimensionProperty.VARIABLE_SIZE, DimensionProperty.NONE)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_observation_specs_with_shapes",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "peekOfCode": "def create_observation_specs_with_shapes(\n    shapes: List[Tuple[int, ...]]\n) -> List[ObservationSpec]:\n    obs_specs: List[ObservationSpec] = []\n    for i, shape in enumerate(shapes):\n        dim_prop = (DimensionProperty.UNSPECIFIED,) * len(shape)\n        if len(shape) == 2:\n            dim_prop = (DimensionProperty.VARIABLE_SIZE, DimensionProperty.NONE)\n        spec = ObservationSpec(\n            name=f\"observation {i} with shape {shape}\",",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "CONTINUOUS_DEMO_PATH",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "peekOfCode": "CONTINUOUS_DEMO_PATH = os.path.dirname(os.path.abspath(__file__)) + \"/test.demo\"\nDISCRETE_DEMO_PATH = os.path.dirname(os.path.abspath(__file__)) + \"/testdcvis.demo\"\n_PPO_CONFIG = TrainerSettings(\n    trainer_type=TrainerType.PPO,\n    hyperparameters=PPOSettings(\n        learning_rate=5.0e-3,\n        learning_rate_schedule=ScheduleType.CONSTANT,\n        batch_size=16,\n        buffer_size=64,\n    ),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "DISCRETE_DEMO_PATH",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "peekOfCode": "DISCRETE_DEMO_PATH = os.path.dirname(os.path.abspath(__file__)) + \"/testdcvis.demo\"\n_PPO_CONFIG = TrainerSettings(\n    trainer_type=TrainerType.PPO,\n    hyperparameters=PPOSettings(\n        learning_rate=5.0e-3,\n        learning_rate_schedule=ScheduleType.CONSTANT,\n        batch_size=16,\n        buffer_size=64,\n    ),\n    network_settings=NetworkSettings(num_layers=1, hidden_units=32),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "_PPO_CONFIG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "peekOfCode": "_PPO_CONFIG = TrainerSettings(\n    trainer_type=TrainerType.PPO,\n    hyperparameters=PPOSettings(\n        learning_rate=5.0e-3,\n        learning_rate_schedule=ScheduleType.CONSTANT,\n        batch_size=16,\n        buffer_size=64,\n    ),\n    network_settings=NetworkSettings(num_layers=1, hidden_units=32),\n    summary_freq=500,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "_SAC_CONFIG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "peekOfCode": "_SAC_CONFIG = TrainerSettings(\n    trainer_type=TrainerType.SAC,\n    hyperparameters=SACSettings(\n        learning_rate=5.0e-3,\n        learning_rate_schedule=ScheduleType.CONSTANT,\n        batch_size=8,\n        buffer_init_steps=100,\n        buffer_size=5000,\n        tau=0.01,\n        init_entcoef=0.01,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "_POCA_CONFIG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "peekOfCode": "_POCA_CONFIG = TrainerSettings(\n    trainer_type=TrainerType.POCA,\n    hyperparameters=POCASettings(\n        learning_rate=5.0e-3,\n        learning_rate_schedule=ScheduleType.CONSTANT,\n        batch_size=16,\n        buffer_size=64,\n    ),\n    network_settings=NetworkSettings(num_layers=1, hidden_units=32),\n    summary_freq=500,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.dummy_config",
        "documentation": {}
    },
    {
        "label": "create_mock_steps",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "peekOfCode": "def create_mock_steps(\n    num_agents: int,\n    observation_specs: List[ObservationSpec],\n    action_spec: ActionSpec,\n    done: bool = False,\n    grouped: bool = False,\n    agent_ids: Optional[List[int]] = None,\n) -> Tuple[DecisionSteps, TerminalSteps]:\n    \"\"\"\n    Creates a mock Tuple[DecisionSteps, TerminalSteps] with observations.",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "create_steps_from_behavior_spec",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "peekOfCode": "def create_steps_from_behavior_spec(\n    behavior_spec: BehaviorSpec, num_agents: int = 1\n) -> Tuple[DecisionSteps, TerminalSteps]:\n    return create_mock_steps(\n        num_agents=num_agents,\n        observation_specs=behavior_spec.observation_specs,\n        action_spec=behavior_spec.action_spec,\n    )\ndef make_fake_trajectory(\n    length: int,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "make_fake_trajectory",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "peekOfCode": "def make_fake_trajectory(\n    length: int,\n    observation_specs: List[ObservationSpec],\n    action_spec: ActionSpec,\n    max_step_complete: bool = False,\n    memory_size: int = 10,\n    num_other_agents_in_group: int = 0,\n    group_reward: float = 0.0,\n    is_terminal: bool = True,\n) -> Trajectory:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "copy_buffer_fields",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "peekOfCode": "def copy_buffer_fields(\n    buffer: AgentBuffer, src_key: AgentBufferKey, dst_keys: List[AgentBufferKey]\n) -> None:\n    for dst_key in dst_keys:\n        buffer[dst_key] = buffer[src_key]\ndef simulate_rollout(\n    length: int,\n    behavior_spec: BehaviorSpec,\n    memory_size: int = 10,\n    exclude_key_list: List[str] = None,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "simulate_rollout",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "peekOfCode": "def simulate_rollout(\n    length: int,\n    behavior_spec: BehaviorSpec,\n    memory_size: int = 10,\n    exclude_key_list: List[str] = None,\n    num_other_agents_in_group: int = 0,\n) -> AgentBuffer:\n    trajectory = make_fake_trajectory(\n        length,\n        behavior_spec.observation_specs,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "setup_test_behavior_specs",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "peekOfCode": "def setup_test_behavior_specs(\n    use_discrete=True, use_visual=False, vector_action_space=2, vector_obs_space=8\n):\n    if use_discrete:\n        action_spec = ActionSpec.create_discrete(tuple(vector_action_space))\n    else:\n        action_spec = ActionSpec.create_continuous(vector_action_space)\n    observation_shapes = [(84, 84, 3)] * int(use_visual) + [(vector_obs_space,)]\n    obs_spec = create_observation_specs_with_shapes(observation_shapes)\n    behavior_spec = BehaviorSpec(obs_spec, action_spec)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "create_mock_3dball_behavior_specs",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "peekOfCode": "def create_mock_3dball_behavior_specs():\n    return setup_test_behavior_specs(\n        False, False, vector_action_space=2, vector_obs_space=8\n    )\ndef create_mock_pushblock_behavior_specs():\n    return setup_test_behavior_specs(\n        True, False, vector_action_space=7, vector_obs_space=70\n    )\ndef create_mock_banana_behavior_specs():\n    return setup_test_behavior_specs(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "create_mock_pushblock_behavior_specs",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "peekOfCode": "def create_mock_pushblock_behavior_specs():\n    return setup_test_behavior_specs(\n        True, False, vector_action_space=7, vector_obs_space=70\n    )\ndef create_mock_banana_behavior_specs():\n    return setup_test_behavior_specs(\n        True, True, vector_action_space=[3, 3, 3, 2], vector_obs_space=0\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "create_mock_banana_behavior_specs",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "peekOfCode": "def create_mock_banana_behavior_specs():\n    return setup_test_behavior_specs(\n        True, True, vector_action_space=[3, 3, 3, 2], vector_obs_space=0\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.mock_brain",
        "documentation": {}
    },
    {
        "label": "SimpleEnvironment",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "peekOfCode": "class SimpleEnvironment(BaseEnv):\n    \"\"\"\n    Very simple \"game\" - the agent has a position on [-1, 1], gets a reward of 1 if it reaches 1, and a reward of -1 if\n    it reaches -1. The position is incremented by the action amount (clamped to [-step_size, step_size]).\n    \"\"\"\n    def __init__(\n        self,\n        brain_names,\n        step_size=STEP_SIZE,\n        num_visual=0,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "MemoryEnvironment",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "peekOfCode": "class MemoryEnvironment(SimpleEnvironment):\n    def __init__(self, brain_names, action_sizes=(1, 0), step_size=0.2):\n        super().__init__(brain_names, action_sizes=action_sizes, step_size=step_size)\n        # Number of steps to reveal the goal for. Lower is harder. Should be\n        # less than 1/step_size to force agent to use memory\n        self.num_show_steps = 2\n    def _make_batched_step(\n        self, name: str, done: bool, reward: float, group_reward: float\n    ) -> Tuple[DecisionSteps, TerminalSteps]:\n        recurrent_obs_val = (",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "MultiAgentEnvironment",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "peekOfCode": "class MultiAgentEnvironment(BaseEnv):\n    \"\"\"\n    The MultiAgentEnvironment maintains a list of SimpleEnvironment, one for each agent.\n    When sending DecisionSteps and TerminalSteps to the trainers, it first batches the\n    decision steps from the individual environments. When setting actions, it indexes the\n    batched ActionTuple to obtain the ActionTuple for individual agents\n    \"\"\"\n    def __init__(\n        self,\n        brain_names,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "RecordEnvironment",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "peekOfCode": "class RecordEnvironment(SimpleEnvironment):\n    def __init__(\n        self,\n        brain_names,\n        step_size=0.2,\n        num_visual=0,\n        num_vector=1,\n        action_sizes=(1, 0),\n        n_demos=30,\n    ):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "UnexpectedExceptionEnvironment",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "peekOfCode": "class UnexpectedExceptionEnvironment(SimpleEnvironment):\n    def __init__(self, brain_names, use_discrete, to_raise):\n        super().__init__(brain_names, use_discrete)\n        self.to_raise = to_raise\n    def step(self) -> None:\n        raise self.to_raise()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "clamp",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "peekOfCode": "def clamp(x, min_val, max_val):\n    return max(min_val, min(x, max_val))\nclass SimpleEnvironment(BaseEnv):\n    \"\"\"\n    Very simple \"game\" - the agent has a position on [-1, 1], gets a reward of 1 if it reaches 1, and a reward of -1 if\n    it reaches -1. The position is incremented by the action amount (clamped to [-step_size, step_size]).\n    \"\"\"\n    def __init__(\n        self,\n        brain_names,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "OBS_SIZE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "peekOfCode": "OBS_SIZE = 1\nVIS_OBS_SIZE = (20, 20, 3)\nVAR_LEN_SIZE = (10, 5)\nSTEP_SIZE = 0.2\nTIME_PENALTY = 0.01\nMIN_STEPS = int(1.0 / STEP_SIZE) + 1\nSUCCESS_REWARD = 1.0 + MIN_STEPS * TIME_PENALTY\ndef clamp(x, min_val, max_val):\n    return max(min_val, min(x, max_val))\nclass SimpleEnvironment(BaseEnv):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "VIS_OBS_SIZE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "peekOfCode": "VIS_OBS_SIZE = (20, 20, 3)\nVAR_LEN_SIZE = (10, 5)\nSTEP_SIZE = 0.2\nTIME_PENALTY = 0.01\nMIN_STEPS = int(1.0 / STEP_SIZE) + 1\nSUCCESS_REWARD = 1.0 + MIN_STEPS * TIME_PENALTY\ndef clamp(x, min_val, max_val):\n    return max(min_val, min(x, max_val))\nclass SimpleEnvironment(BaseEnv):\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "VAR_LEN_SIZE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "peekOfCode": "VAR_LEN_SIZE = (10, 5)\nSTEP_SIZE = 0.2\nTIME_PENALTY = 0.01\nMIN_STEPS = int(1.0 / STEP_SIZE) + 1\nSUCCESS_REWARD = 1.0 + MIN_STEPS * TIME_PENALTY\ndef clamp(x, min_val, max_val):\n    return max(min_val, min(x, max_val))\nclass SimpleEnvironment(BaseEnv):\n    \"\"\"\n    Very simple \"game\" - the agent has a position on [-1, 1], gets a reward of 1 if it reaches 1, and a reward of -1 if",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "STEP_SIZE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "peekOfCode": "STEP_SIZE = 0.2\nTIME_PENALTY = 0.01\nMIN_STEPS = int(1.0 / STEP_SIZE) + 1\nSUCCESS_REWARD = 1.0 + MIN_STEPS * TIME_PENALTY\ndef clamp(x, min_val, max_val):\n    return max(min_val, min(x, max_val))\nclass SimpleEnvironment(BaseEnv):\n    \"\"\"\n    Very simple \"game\" - the agent has a position on [-1, 1], gets a reward of 1 if it reaches 1, and a reward of -1 if\n    it reaches -1. The position is incremented by the action amount (clamped to [-step_size, step_size]).",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "TIME_PENALTY",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "peekOfCode": "TIME_PENALTY = 0.01\nMIN_STEPS = int(1.0 / STEP_SIZE) + 1\nSUCCESS_REWARD = 1.0 + MIN_STEPS * TIME_PENALTY\ndef clamp(x, min_val, max_val):\n    return max(min_val, min(x, max_val))\nclass SimpleEnvironment(BaseEnv):\n    \"\"\"\n    Very simple \"game\" - the agent has a position on [-1, 1], gets a reward of 1 if it reaches 1, and a reward of -1 if\n    it reaches -1. The position is incremented by the action amount (clamped to [-step_size, step_size]).\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "MIN_STEPS",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "peekOfCode": "MIN_STEPS = int(1.0 / STEP_SIZE) + 1\nSUCCESS_REWARD = 1.0 + MIN_STEPS * TIME_PENALTY\ndef clamp(x, min_val, max_val):\n    return max(min_val, min(x, max_val))\nclass SimpleEnvironment(BaseEnv):\n    \"\"\"\n    Very simple \"game\" - the agent has a position on [-1, 1], gets a reward of 1 if it reaches 1, and a reward of -1 if\n    it reaches -1. The position is incremented by the action amount (clamped to [-step_size, step_size]).\n    \"\"\"\n    def __init__(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "SUCCESS_REWARD",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "peekOfCode": "SUCCESS_REWARD = 1.0 + MIN_STEPS * TIME_PENALTY\ndef clamp(x, min_val, max_val):\n    return max(min_val, min(x, max_val))\nclass SimpleEnvironment(BaseEnv):\n    \"\"\"\n    Very simple \"game\" - the agent has a position on [-1, 1], gets a reward of 1 if it reaches 1, and a reward of -1 if\n    it reaches -1. The position is incremented by the action amount (clamped to [-step_size, step_size]).\n    \"\"\"\n    def __init__(\n        self,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.simple_test_envs",
        "documentation": {}
    },
    {
        "label": "create_mock_policy",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "peekOfCode": "def create_mock_policy():\n    mock_policy = mock.Mock()\n    mock_policy.reward_signals = {}\n    mock_policy.retrieve_previous_memories.return_value = np.zeros(\n        (1, 1), dtype=np.float32\n    )\n    mock_policy.retrieve_previous_action.return_value = np.zeros((1, 1), dtype=np.int32)\n    return mock_policy\ndef _create_action_info(num_agents: int, agent_ids: List[str]) -> ActionInfo:\n    fake_action_outputs = {",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "documentation": {}
    },
    {
        "label": "test_agentprocessor",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "peekOfCode": "def test_agentprocessor(num_vis_obs):\n    policy = create_mock_policy()\n    tqueue = mock.Mock()\n    name_behavior_id = \"test_brain_name\"\n    processor = AgentProcessor(\n        policy,\n        name_behavior_id,\n        max_trajectory_length=5,\n        stats_reporter=StatsReporter(\"testcat\"),\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "documentation": {}
    },
    {
        "label": "test_group_statuses",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "peekOfCode": "def test_group_statuses():\n    policy = create_mock_policy()\n    tqueue = mock.Mock()\n    name_behavior_id = \"test_brain_name\"\n    processor = AgentProcessor(\n        policy,\n        name_behavior_id,\n        max_trajectory_length=5,\n        stats_reporter=StatsReporter(\"testcat\"),\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "documentation": {}
    },
    {
        "label": "test_agent_deletion",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "peekOfCode": "def test_agent_deletion():\n    policy = create_mock_policy()\n    tqueue = mock.Mock()\n    name_behavior_id = \"test_brain_name\"\n    processor = AgentProcessor(\n        policy,\n        name_behavior_id,\n        max_trajectory_length=5,\n        stats_reporter=StatsReporter(\"testcat\"),\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "documentation": {}
    },
    {
        "label": "test_end_episode",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "peekOfCode": "def test_end_episode():\n    policy = create_mock_policy()\n    tqueue = mock.Mock()\n    name_behavior_id = \"test_brain_name\"\n    processor = AgentProcessor(\n        policy,\n        name_behavior_id,\n        max_trajectory_length=5,\n        stats_reporter=StatsReporter(\"testcat\"),\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "documentation": {}
    },
    {
        "label": "test_agent_manager",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "peekOfCode": "def test_agent_manager():\n    policy = create_mock_policy()\n    name_behavior_id = \"test_brain_name\"\n    manager = AgentManager(\n        policy,\n        name_behavior_id,\n        max_trajectory_length=5,\n        stats_reporter=StatsReporter(\"testcat\"),\n    )\n    assert len(manager._trajectory_queues) == 1",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "documentation": {}
    },
    {
        "label": "test_agent_manager_queue",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "peekOfCode": "def test_agent_manager_queue():\n    queue = AgentManagerQueue(behavior_id=\"testbehavior\")\n    trajectory = mock.Mock(spec=Trajectory)\n    assert queue.empty()\n    queue.put(trajectory)\n    assert not queue.empty()\n    queue_traj = queue.get_nowait()\n    assert isinstance(queue_traj, Trajectory)\n    assert queue.empty()\ndef test_agent_manager_stats():",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "documentation": {}
    },
    {
        "label": "test_agent_manager_stats",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "peekOfCode": "def test_agent_manager_stats():\n    policy = mock.Mock()\n    stats_reporter = StatsReporter(\"FakeCategory\")\n    writer = mock.Mock()\n    stats_reporter.add_writer(writer)\n    manager = AgentManager(policy, \"MyBehavior\", stats_reporter)\n    all_env_stats = [\n        {\n            \"averaged\": [(1.0, StatsAggregationMethod.AVERAGE)],\n            \"most_recent\": [(2.0, StatsAggregationMethod.MOST_RECENT)],",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_agent_processor",
        "documentation": {}
    },
    {
        "label": "assert_array",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "peekOfCode": "def assert_array(a, b):\n    assert a.shape == b.shape\n    la = list(a.flatten())\n    lb = list(b.flatten())\n    for i in range(len(la)):\n        assert la[i] == lb[i]\ndef construct_fake_buffer(fake_agent_id):\n    b = AgentBuffer()\n    for step in range(9):\n        b[ObsUtil.get_name_at(0)].append(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "documentation": {}
    },
    {
        "label": "construct_fake_buffer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "peekOfCode": "def construct_fake_buffer(fake_agent_id):\n    b = AgentBuffer()\n    for step in range(9):\n        b[ObsUtil.get_name_at(0)].append(\n            np.array(\n                [\n                    100 * fake_agent_id + 10 * step + 1,\n                    100 * fake_agent_id + 10 * step + 2,\n                    100 * fake_agent_id + 10 * step + 3,\n                ],",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "documentation": {}
    },
    {
        "label": "test_buffer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "peekOfCode": "def test_buffer():\n    agent_1_buffer = construct_fake_buffer(1)\n    agent_2_buffer = construct_fake_buffer(2)\n    agent_3_buffer = construct_fake_buffer(3)\n    # Test get_batch\n    a = agent_1_buffer[ObsUtil.get_name_at(0)].get_batch(\n        batch_size=2, training_length=1, sequential=True\n    )\n    assert_array(\n        np.array(a), np.array([[171, 172, 173], [181, 182, 183]], dtype=np.float32)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "documentation": {}
    },
    {
        "label": "test_agentbufferfield",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "peekOfCode": "def test_agentbufferfield():\n    # Test constructor\n    a = AgentBufferField([0, 1, 2])\n    for i, num in enumerate(a):\n        assert num == i\n        # Test indexing\n        assert a[i] == num\n    # Test slicing\n    b = a[1:3]\n    assert b == [1, 2]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "documentation": {}
    },
    {
        "label": "fakerandint",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "peekOfCode": "def fakerandint(values):\n    return 19\ndef test_buffer_sample():\n    agent_1_buffer = construct_fake_buffer(1)\n    agent_2_buffer = construct_fake_buffer(2)\n    update_buffer = AgentBuffer()\n    agent_1_buffer.resequence_and_append(\n        update_buffer, batch_size=None, training_length=2\n    )\n    agent_2_buffer.resequence_and_append(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "documentation": {}
    },
    {
        "label": "test_buffer_sample",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "peekOfCode": "def test_buffer_sample():\n    agent_1_buffer = construct_fake_buffer(1)\n    agent_2_buffer = construct_fake_buffer(2)\n    update_buffer = AgentBuffer()\n    agent_1_buffer.resequence_and_append(\n        update_buffer, batch_size=None, training_length=2\n    )\n    agent_2_buffer.resequence_and_append(\n        update_buffer, batch_size=None, training_length=2\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "documentation": {}
    },
    {
        "label": "test_num_experiences",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "peekOfCode": "def test_num_experiences():\n    agent_1_buffer = construct_fake_buffer(1)\n    agent_2_buffer = construct_fake_buffer(2)\n    update_buffer = AgentBuffer()\n    assert len(update_buffer[BufferKey.CONTINUOUS_ACTION]) == 0\n    assert update_buffer.num_experiences == 0\n    agent_1_buffer.resequence_and_append(\n        update_buffer, batch_size=None, training_length=2\n    )\n    agent_2_buffer.resequence_and_append(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "documentation": {}
    },
    {
        "label": "test_buffer_truncate",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "peekOfCode": "def test_buffer_truncate():\n    agent_1_buffer = construct_fake_buffer(1)\n    agent_2_buffer = construct_fake_buffer(2)\n    update_buffer = AgentBuffer()\n    agent_1_buffer.resequence_and_append(\n        update_buffer, batch_size=None, training_length=2\n    )\n    agent_2_buffer.resequence_and_append(\n        update_buffer, batch_size=None, training_length=2\n    )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "documentation": {}
    },
    {
        "label": "test_key_encode_decode",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "peekOfCode": "def test_key_encode_decode():\n    keys = (\n        list(BufferKey)\n        + [(k, 42) for k in ObservationKeyPrefix]\n        + [(k, \"gail\") for k in RewardSignalKeyPrefix]\n    )\n    for k in keys:\n        assert k == AgentBuffer._decode_key(AgentBuffer._encode_key(k))\ndef test_buffer_save_load():\n    original = construct_fake_buffer(3)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "documentation": {}
    },
    {
        "label": "test_buffer_save_load",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "peekOfCode": "def test_buffer_save_load():\n    original = construct_fake_buffer(3)\n    import io\n    write_buffer = io.BytesIO()\n    original.save_to_file(write_buffer)\n    loaded = AgentBuffer()\n    loaded.load_from_file(write_buffer)\n    assert len(original) == len(loaded)\n    for k in original.keys():\n        assert np.allclose(original[k], loaded[k])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_buffer",
        "documentation": {}
    },
    {
        "label": "test_convert_behaviors",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "peekOfCode": "def test_convert_behaviors(trainer_type, use_recurrent):\n    if trainer_type == TrainerType.PPO:\n        trainer_config = PPO_CONFIG\n        trainer_settings_type = PPOSettings\n    else:\n        trainer_config = SAC_CONFIG\n        trainer_settings_type = SACSettings\n    old_config = yaml.safe_load(trainer_config)\n    old_config[BRAIN_NAME][\"use_recurrent\"] = use_recurrent\n    new_config = convert_behaviors(old_config)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "documentation": {}
    },
    {
        "label": "test_convert",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "peekOfCode": "def test_convert():\n    old_behaviors = yaml.safe_load(PPO_CONFIG)\n    old_curriculum = yaml.safe_load(CURRICULUM)\n    old_sampler = yaml.safe_load(RANDOMIZATION)\n    config = convert(old_behaviors, old_curriculum, old_sampler)\n    assert BRAIN_NAME in config[\"behaviors\"]\n    assert \"big_wall_min_height\" in config[\"environment_parameters\"]\n    curriculum = config[\"environment_parameters\"][\"big_wall_min_height\"][\"curriculum\"]\n    assert len(curriculum) == 4\n    for i, expected_value in enumerate([0.0, 4.0, 6.0, 8.0]):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "documentation": {}
    },
    {
        "label": "test_remove_nones",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "peekOfCode": "def test_remove_nones():\n    dict_with_nones = {\"hello\": {\"hello2\": 2, \"hello3\": None}, \"hello4\": None}\n    dict_without_nones = {\"hello\": {\"hello2\": 2}}\n    output = remove_nones(dict_with_nones)\n    assert output == dict_without_nones",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "documentation": {}
    },
    {
        "label": "BRAIN_NAME",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "peekOfCode": "BRAIN_NAME = \"testbehavior\"\n# Check one per category\nBATCH_SIZE = 256\nHIDDEN_UNITS = 32\nSUMMARY_FREQ = 500\nPPO_CONFIG = f\"\"\"\n    default:\n        trainer: ppo\n        batch_size: 1024\n        beta: 5.0e-3",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "documentation": {}
    },
    {
        "label": "BATCH_SIZE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "peekOfCode": "BATCH_SIZE = 256\nHIDDEN_UNITS = 32\nSUMMARY_FREQ = 500\nPPO_CONFIG = f\"\"\"\n    default:\n        trainer: ppo\n        batch_size: 1024\n        beta: 5.0e-3\n        buffer_size: 10240\n        epsilon: 0.2",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "documentation": {}
    },
    {
        "label": "HIDDEN_UNITS",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "peekOfCode": "HIDDEN_UNITS = 32\nSUMMARY_FREQ = 500\nPPO_CONFIG = f\"\"\"\n    default:\n        trainer: ppo\n        batch_size: 1024\n        beta: 5.0e-3\n        buffer_size: 10240\n        epsilon: 0.2\n        hidden_units: 128",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "documentation": {}
    },
    {
        "label": "SUMMARY_FREQ",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "peekOfCode": "SUMMARY_FREQ = 500\nPPO_CONFIG = f\"\"\"\n    default:\n        trainer: ppo\n        batch_size: 1024\n        beta: 5.0e-3\n        buffer_size: 10240\n        epsilon: 0.2\n        hidden_units: 128\n        lambd: 0.95",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "documentation": {}
    },
    {
        "label": "PPO_CONFIG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "peekOfCode": "PPO_CONFIG = f\"\"\"\n    default:\n        trainer: ppo\n        batch_size: 1024\n        beta: 5.0e-3\n        buffer_size: 10240\n        epsilon: 0.2\n        hidden_units: 128\n        lambd: 0.95\n        learning_rate: 3.0e-4",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "documentation": {}
    },
    {
        "label": "SAC_CONFIG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "peekOfCode": "SAC_CONFIG = f\"\"\"\n    default:\n        trainer: sac\n        batch_size: 128\n        buffer_size: 50000\n        buffer_init_steps: 0\n        hidden_units: 128\n        init_entcoef: 1.0\n        learning_rate: 3.0e-4\n        learning_rate_schedule: constant",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "documentation": {}
    },
    {
        "label": "CURRICULUM",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "peekOfCode": "CURRICULUM = \"\"\"\n  BigWallJump:\n    measure: progress\n    thresholds: [0.1, 0.3, 0.5]\n    min_lesson_length: 200\n    signal_smoothing: true\n    parameters:\n      big_wall_min_height: [0.0, 4.0, 6.0, 8.0]\n      big_wall_max_height: [4.0, 7.0, 8.0, 8.0]\n  SmallWallJump:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "documentation": {}
    },
    {
        "label": "RANDOMIZATION",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "peekOfCode": "RANDOMIZATION = \"\"\"\n  resampling-interval: 5000\n  mass:\n    sampler-type: uniform\n    min_value: 0.5\n    max_value: 10\n  gravity:\n    sampler-type: uniform\n    min_value: 7\n    max_value: 12",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_config_conversion",
        "documentation": {}
    },
    {
        "label": "test_load_demo",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "peekOfCode": "def test_load_demo():\n    path_prefix = os.path.dirname(os.path.abspath(__file__))\n    behavior_spec, pair_infos, total_expected = load_demonstration(\n        path_prefix + \"/test.demo\"\n    )\n    assert np.sum(behavior_spec.observation_specs[0].shape) == 8\n    assert len(pair_infos) == total_expected\n    _, demo_buffer = demo_to_buffer(path_prefix + \"/test.demo\", 1, BEHAVIOR_SPEC)\n    assert (\n        len(demo_buffer[BufferKey.CONTINUOUS_ACTION]) == total_expected - 1",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "documentation": {}
    },
    {
        "label": "test_load_demo_dir",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "peekOfCode": "def test_load_demo_dir():\n    path_prefix = os.path.dirname(os.path.abspath(__file__))\n    behavior_spec, pair_infos, total_expected = load_demonstration(\n        path_prefix + \"/test_demo_dir\"\n    )\n    assert np.sum(behavior_spec.observation_specs[0].shape) == 8\n    assert len(pair_infos) == total_expected\n    _, demo_buffer = demo_to_buffer(path_prefix + \"/test_demo_dir\", 1, BEHAVIOR_SPEC)\n    assert (\n        len(demo_buffer[BufferKey.CONTINUOUS_ACTION]) == total_expected - 1",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "documentation": {}
    },
    {
        "label": "test_demo_mismatch",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "peekOfCode": "def test_demo_mismatch():\n    path_prefix = os.path.dirname(os.path.abspath(__file__))\n    # observation size mismatch\n    with pytest.raises(RuntimeError):\n        mismatch_obs = setup_test_behavior_specs(\n            False, False, vector_action_space=2, vector_obs_space=9\n        )\n        _, demo_buffer = demo_to_buffer(path_prefix + \"/test.demo\", 1, mismatch_obs)\n    # action mismatch\n    with pytest.raises(RuntimeError):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "documentation": {}
    },
    {
        "label": "test_edge_cases",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "peekOfCode": "def test_edge_cases():\n    path_prefix = os.path.dirname(os.path.abspath(__file__))\n    # nonexistent file and directory\n    with pytest.raises(FileNotFoundError):\n        get_demo_files(os.path.join(path_prefix, \"nonexistent_file.demo\"))\n    with pytest.raises(FileNotFoundError):\n        get_demo_files(os.path.join(path_prefix, \"nonexistent_directory\"))\n    with tempfile.TemporaryDirectory() as tmpdirname:\n        # empty directory\n        with pytest.raises(ValueError):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "documentation": {}
    },
    {
        "label": "test_unsupported_version_raises_error",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "peekOfCode": "def test_unsupported_version_raises_error(mock_get_demo_files):\n    # Create a metadata proto with an unsupported version\n    bad_metadata = DemonstrationMetaProto()\n    bad_metadata.api_version = 1337\n    # Write the metadata to a temporary buffer, which will get returned by open()\n    buffer = io.BytesIO()\n    write_delimited(buffer, bad_metadata)\n    m = mock.mock_open(read_data=buffer.getvalue())\n    # Make sure that we get a RuntimeError when trying to load this.\n    with mock.patch(\"builtins.open\", m):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "documentation": {}
    },
    {
        "label": "BEHAVIOR_SPEC",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "peekOfCode": "BEHAVIOR_SPEC = create_mock_3dball_behavior_specs()\ndef test_load_demo():\n    path_prefix = os.path.dirname(os.path.abspath(__file__))\n    behavior_spec, pair_infos, total_expected = load_demonstration(\n        path_prefix + \"/test.demo\"\n    )\n    assert np.sum(behavior_spec.observation_specs[0].shape) == 8\n    assert len(pair_infos) == total_expected\n    _, demo_buffer = demo_to_buffer(path_prefix + \"/test.demo\", 1, BEHAVIOR_SPEC)\n    assert (",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_demo_loader",
        "documentation": {}
    },
    {
        "label": "test_sampler_conversion",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "def test_sampler_conversion():\n    run_options = RunOptions.from_dict(yaml.safe_load(test_sampler_config_yaml))\n    assert run_options.environment_parameters is not None\n    assert \"param_1\" in run_options.environment_parameters\n    lessons = run_options.environment_parameters[\"param_1\"].curriculum\n    assert len(lessons) == 1\n    assert lessons[0].completion_criteria is None\n    assert isinstance(lessons[0].value, UniformSettings)\n    assert lessons[0].value.min_value == 0.5\n    assert lessons[0].value.max_value == 10",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "test_sampler_and_constant_conversion",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "def test_sampler_and_constant_conversion():\n    run_options = RunOptions.from_dict(\n        yaml.safe_load(test_sampler_and_constant_config_yaml)\n    )\n    assert \"param_1\" in run_options.environment_parameters\n    assert \"param_2\" in run_options.environment_parameters\n    lessons_1 = run_options.environment_parameters[\"param_1\"].curriculum\n    lessons_2 = run_options.environment_parameters[\"param_2\"].curriculum\n    # gaussian\n    assert isinstance(lessons_1[0].value, GaussianSettings)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "test_curriculum_conversion",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "def test_curriculum_conversion():\n    run_options = RunOptions.from_dict(yaml.safe_load(test_curriculum_config_yaml))\n    assert \"param_1\" in run_options.environment_parameters\n    lessons = run_options.environment_parameters[\"param_1\"].curriculum\n    assert len(lessons) == 3\n    # First lesson\n    lesson = lessons[0]\n    assert lesson.completion_criteria is not None\n    assert (\n        lesson.completion_criteria.measure",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "test_curriculum_raises_no_completion_criteria_conversion",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "def test_curriculum_raises_no_completion_criteria_conversion():\n    with pytest.raises(TrainerConfigError):\n        RunOptions.from_dict(\n            yaml.safe_load(test_bad_curriculum_no_competion_criteria_config_yaml)\n        )\ndef test_curriculum_raises_all_completion_criteria_conversion():\n    with pytest.warns(TrainerConfigWarning):\n        run_options = RunOptions.from_dict(\n            yaml.safe_load(test_bad_curriculum_all_competion_criteria_config_yaml)\n        )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "test_curriculum_raises_all_completion_criteria_conversion",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "def test_curriculum_raises_all_completion_criteria_conversion():\n    with pytest.warns(TrainerConfigWarning):\n        run_options = RunOptions.from_dict(\n            yaml.safe_load(test_bad_curriculum_all_competion_criteria_config_yaml)\n        )\n    param_manager = EnvironmentParameterManager(\n        run_options.environment_parameters, 1337, False\n    )\n    assert param_manager.update_lessons(\n        trainer_steps={\"fake_behavior\": 500},",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "test_create_manager",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "def test_create_manager():\n    run_options = RunOptions.from_dict(yaml.safe_load(test_everything_config_yaml))\n    param_manager = EnvironmentParameterManager(\n        run_options.environment_parameters, 1337, False\n    )\n    assert param_manager.get_minimum_reward_buffer_size(\"fake_behavior\") == 100\n    assert param_manager.get_current_lesson_number() == {\n        \"param_1\": 0,\n        \"param_2\": 0,\n        \"param_3\": 0,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "test_curriculum_no_behavior",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "def test_curriculum_no_behavior():\n    with pytest.raises(TypeError):\n        run_options = RunOptions.from_dict(\n            yaml.safe_load(test_curriculum_no_behavior_yaml)\n        )\n        EnvironmentParameterManager(run_options.environment_parameters, 1337, False)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "test_sampler_config_yaml",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "test_sampler_config_yaml = \"\"\"\nenvironment_parameters:\n  param_1:\n    sampler_type: uniform\n    sampler_parameters:\n      min_value: 0.5\n      max_value: 10\n\"\"\"\ndef test_sampler_conversion():\n    run_options = RunOptions.from_dict(yaml.safe_load(test_sampler_config_yaml))",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "test_sampler_and_constant_config_yaml",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "test_sampler_and_constant_config_yaml = \"\"\"\nenvironment_parameters:\n  param_1:\n    sampler_type: gaussian\n    sampler_parameters:\n      mean: 4\n      st_dev: 5\n  param_2: 20\n\"\"\"\ndef test_sampler_and_constant_conversion():",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "test_curriculum_config_yaml",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "test_curriculum_config_yaml = \"\"\"\nenvironment_parameters:\n    param_1:\n      curriculum:\n          - name: Lesson1\n            completion_criteria:\n                measure: reward\n                behavior: fake_behavior\n                threshold: 30\n                min_lesson_length: 100",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "test_bad_curriculum_no_competion_criteria_config_yaml",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "test_bad_curriculum_no_competion_criteria_config_yaml = \"\"\"\nenvironment_parameters:\n    param_1:\n      curriculum:\n          - name: Lesson1\n            completion_criteria:\n                measure: reward\n                behavior: fake_behavior\n                threshold: 30\n                min_lesson_length: 100",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "test_bad_curriculum_all_competion_criteria_config_yaml",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "test_bad_curriculum_all_competion_criteria_config_yaml = \"\"\"\nenvironment_parameters:\n    param_1:\n      curriculum:\n          - name: Lesson1\n            completion_criteria:\n                measure: reward\n                behavior: fake_behavior\n                threshold: 30\n                min_lesson_length: 100",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "test_everything_config_yaml",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "test_everything_config_yaml = \"\"\"\nenvironment_parameters:\n    param_1:\n      curriculum:\n          - name: Lesson1\n            completion_criteria:\n                measure: reward\n                behavior: fake_behavior\n                threshold: 30\n                min_lesson_length: 100",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "test_curriculum_no_behavior_yaml",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "peekOfCode": "test_curriculum_no_behavior_yaml = \"\"\"\nenvironment_parameters:\n    param_1:\n      curriculum:\n          - name: Lesson1\n            completion_criteria:\n                measure: reward\n                threshold: 30\n                min_lesson_length: 100\n                require_reset: true",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_env_param_manager",
        "documentation": {}
    },
    {
        "label": "basic_options",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "peekOfCode": "def basic_options(extra_args=None):\n    extra_args = extra_args or {}\n    args = [\"basic_path\"]\n    if extra_args:\n        args += [f\"{k}={v}\" for k, v in extra_args.items()]\n    return parse_command_line(args)\nMOCK_YAML = \"\"\"\n    behaviors:\n        {}\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "documentation": {}
    },
    {
        "label": "test_run_training",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "peekOfCode": "def test_run_training(\n    load_config,\n    create_environment_factory,\n    subproc_env_mock,\n    trainer_factory_mock,\n    handle_dir_mock,\n    write_run_options_mock,\n    write_timing_tree_mock,\n):\n    mock_env = MagicMock()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "documentation": {}
    },
    {
        "label": "test_bad_env_path",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "peekOfCode": "def test_bad_env_path():\n    with pytest.raises(UnityEnvironmentException):\n        factory = learn.create_environment_factory(\n            env_path=\"/foo/bar\",\n            no_graphics=True,\n            seed=-1,\n            num_areas=1,\n            start_port=8000,\n            env_args=None,\n            log_folder=\"results/log_folder\",",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "documentation": {}
    },
    {
        "label": "test_commandline_args",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "peekOfCode": "def test_commandline_args(mock_file):\n    # No args raises\n    # with pytest.raises(SystemExit):\n    #     parse_command_line([])\n    # Test with defaults\n    opt = parse_command_line([\"mytrainerpath\"])\n    assert opt.behaviors == {}\n    assert opt.env_settings.env_path is None\n    assert opt.checkpoint_settings.resume is False\n    assert opt.checkpoint_settings.inference is False",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "documentation": {}
    },
    {
        "label": "test_yaml_args",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "peekOfCode": "def test_yaml_args(mock_file):\n    # Test with opts loaded from YAML\n    DetectDefault.non_default_args.clear()\n    opt = parse_command_line([\"mytrainerpath\"])\n    assert opt.behaviors == {}\n    assert opt.env_settings.env_path == \"./oldenvfile\"\n    assert opt.checkpoint_settings.run_id == \"uselessrun\"\n    assert opt.checkpoint_settings.initialize_from == \"notuselessrun\"\n    assert opt.env_settings.seed == 9870\n    assert opt.env_settings.base_port == 4001",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "documentation": {}
    },
    {
        "label": "test_env_args",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "peekOfCode": "def test_env_args(mock_file):\n    full_args = [\n        \"mytrainerpath\",\n        \"--env=./myenvfile\",\n        \"--env-args\",  # Everything after here will be grouped in a list\n        \"--foo=bar\",\n        \"--blah\",\n        \"baz\",\n        \"100\",\n    ]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "documentation": {}
    },
    {
        "label": "MOCK_YAML",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "peekOfCode": "MOCK_YAML = \"\"\"\n    behaviors:\n        {}\n    \"\"\"\nMOCK_INITIALIZE_YAML = \"\"\"\n    behaviors:\n        {}\n    checkpoint_settings:\n        initialize_from: notuselessrun\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "documentation": {}
    },
    {
        "label": "MOCK_INITIALIZE_YAML",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "peekOfCode": "MOCK_INITIALIZE_YAML = \"\"\"\n    behaviors:\n        {}\n    checkpoint_settings:\n        initialize_from: notuselessrun\n    \"\"\"\nMOCK_PARAMETER_YAML = \"\"\"\n    behaviors:\n        {}\n    env_settings:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "documentation": {}
    },
    {
        "label": "MOCK_PARAMETER_YAML",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "peekOfCode": "MOCK_PARAMETER_YAML = \"\"\"\n    behaviors:\n        {}\n    env_settings:\n        env_path: \"./oldenvfile\"\n        num_envs: 4\n        num_areas: 4\n        base_port: 4001\n        seed: 9870\n    checkpoint_settings:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_learn",
        "documentation": {}
    },
    {
        "label": "FakeTrainer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "peekOfCode": "class FakeTrainer(RLTrainer):\n    def set_is_policy_updating(self, is_updating):\n        self.update_policy = is_updating\n    def get_policy(self, name_behavior_id):\n        return mock.Mock()\n    def _is_ready_update(self):\n        return True\n    def _update_policy(self):\n        return self.update_policy\n    def add_policy(self, mock_behavior_id, mock_policy):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "documentation": {}
    },
    {
        "label": "RLTrainerWarningTest",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "peekOfCode": "class RLTrainerWarningTest(unittest.TestCase):\n    def test_warning_group_reward(self):\n        with self.assertLogs(\"mlagents.trainers\", level=\"WARN\") as cm:\n            rl_trainer = create_rl_trainer()\n            # This one should warn\n            trajectory = mb.make_fake_trajectory(\n                length=10,\n                observation_specs=create_observation_specs_with_shapes([(1,)]),\n                max_step_complete=True,\n                action_spec=ActionSpec.create_discrete((2,)),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "documentation": {}
    },
    {
        "label": "create_rl_trainer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "peekOfCode": "def create_rl_trainer():\n    trainer = FakeTrainer(\n        \"test_trainer\",\n        TrainerSettings(max_steps=100, checkpoint_interval=10, summary_freq=20),\n        True,\n        False,\n        \"mock_model_path\",\n        0,\n    )\n    trainer.set_is_policy_updating(True)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "documentation": {}
    },
    {
        "label": "test_rl_trainer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "peekOfCode": "def test_rl_trainer():\n    trainer = create_rl_trainer()\n    agent_id = \"0\"\n    trainer.collected_rewards[\"extrinsic\"] = {agent_id: 3}\n    # Test end episode\n    trainer.end_episode()\n    for rewards in trainer.collected_rewards.values():\n        for agent_id in rewards:\n            assert rewards[agent_id] == 0\ndef test_clear_update_buffer():",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "documentation": {}
    },
    {
        "label": "test_clear_update_buffer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "peekOfCode": "def test_clear_update_buffer():\n    trainer = create_rl_trainer()\n    trainer.update_buffer = construct_fake_buffer(0)\n    trainer._clear_update_buffer()\n    for _, arr in trainer.update_buffer.items():\n        assert len(arr) == 0\n@mock.patch(\"mlagents.trainers.trainer.trainer.Trainer.save_model\")\ndef test_advance(mocked_save_model):\n    trainer = create_rl_trainer()\n    mock_policy = mock.Mock()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "documentation": {}
    },
    {
        "label": "test_advance",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "peekOfCode": "def test_advance(mocked_save_model):\n    trainer = create_rl_trainer()\n    mock_policy = mock.Mock()\n    trainer.add_policy(\"TestBrain\", mock_policy)\n    trajectory_queue = AgentManagerQueue(\"testbrain\")\n    policy_queue = AgentManagerQueue(\"testbrain\")\n    trainer.subscribe_trajectory_queue(trajectory_queue)\n    trainer.publish_policy_queue(policy_queue)\n    time_horizon = 10\n    trajectory = mb.make_fake_trajectory(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "documentation": {}
    },
    {
        "label": "test_summary_checkpoint",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "peekOfCode": "def test_summary_checkpoint(mock_add_checkpoint, mock_write_summary):\n    trainer = create_rl_trainer()\n    mock_policy = mock.Mock()\n    trainer.add_policy(\"TestBrain\", mock_policy)\n    trajectory_queue = AgentManagerQueue(\"testbrain\")\n    policy_queue = AgentManagerQueue(\"testbrain\")\n    trainer.subscribe_trajectory_queue(trajectory_queue)\n    trainer.publish_policy_queue(policy_queue)\n    time_horizon = 10\n    summary_freq = trainer.trainer_settings.summary_freq",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "documentation": {}
    },
    {
        "label": "test_update_buffer_append",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "peekOfCode": "def test_update_buffer_append():\n    trainer = create_rl_trainer()\n    mock_policy = mock.Mock()\n    trainer.add_policy(\"TestBrain\", mock_policy)\n    trajectory_queue = AgentManagerQueue(\"testbrain\")\n    policy_queue = AgentManagerQueue(\"testbrain\")\n    trainer.subscribe_trajectory_queue(trajectory_queue)\n    trainer.publish_policy_queue(policy_queue)\n    time_horizon = 10\n    trajectory = mb.make_fake_trajectory(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_rl_trainer",
        "documentation": {}
    },
    {
        "label": "check_if_different",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def check_if_different(testobj1: object, testobj2: object) -> None:\n    assert testobj1 is not testobj2\n    if attr.has(testobj1.__class__) and attr.has(testobj2.__class__):\n        for key, val in attr.asdict(testobj1, recurse=False).items():\n            if isinstance(val, dict) or isinstance(val, list) or attr.has(val):\n                # Note: this check doesn't check the contents of mutables.\n                check_if_different(val, attr.asdict(testobj2, recurse=False)[key])\ndef check_dict_is_at_least(\n    testdict1: Dict, testdict2: Dict, exceptions: Optional[List[str]] = None\n) -> None:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "check_dict_is_at_least",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def check_dict_is_at_least(\n    testdict1: Dict, testdict2: Dict, exceptions: Optional[List[str]] = None\n) -> None:\n    \"\"\"\n    Check if everything present in the 1st dict is the same in the second dict.\n    Excludes things that the second dict has but is not present in the heirarchy of the\n    1st dict. Used to compare an underspecified config dict structure (e.g. as\n    would be provided by a user) with a complete one (e.g. as exported by RunOptions).\n    \"\"\"\n    for key, val in testdict1.items():",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_is_new_instance",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_is_new_instance():\n    \"\"\"\n    Verify that every instance of RunOptions() and its subclasses\n    is a new instance (i.e. all factory methods are used properly.)\n    \"\"\"\n    check_if_different(RunOptions(), RunOptions())\n    check_if_different(TrainerSettings(), TrainerSettings())\ndef test_no_configuration():\n    \"\"\"\n    Verify that a new config will have a PPO trainer with extrinsic rewards.",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_no_configuration",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_no_configuration():\n    \"\"\"\n    Verify that a new config will have a PPO trainer with extrinsic rewards.\n    \"\"\"\n    blank_runoptions = RunOptions()\n    blank_runoptions.behaviors.set_config_specified(False)\n    assert isinstance(blank_runoptions.behaviors[\"test\"], TrainerSettings)\n    assert isinstance(blank_runoptions.behaviors[\"test\"].hyperparameters, PPOSettings)\n    assert (\n        RewardSignalType.EXTRINSIC in blank_runoptions.behaviors[\"test\"].reward_signals",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_strict_to_cls",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_strict_to_cls():\n    \"\"\"\n    Test strict structuring method.\n    \"\"\"\n    @attr.s(auto_attribs=True)\n    class TestAttrsClass:\n        field1: int = 0\n        field2: str = \"test\"\n    correct_dict = {\"field1\": 1, \"field2\": \"test2\"}\n    assert strict_to_cls(correct_dict, TestAttrsClass) == TestAttrsClass(**correct_dict)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_deep_update_dict",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_deep_update_dict():\n    dict1 = {\"a\": 1, \"b\": 2, \"c\": {\"d\": 3}}\n    dict2 = {\"a\": 2, \"c\": {\"d\": 4, \"e\": 5}}\n    deep_update_dict(dict1, dict2)\n    assert dict1 == {\"a\": 2, \"b\": 2, \"c\": {\"d\": 4, \"e\": 5}}\ndef test_trainersettings_structure():\n    \"\"\"\n    Test structuring method for TrainerSettings\n    \"\"\"\n    trainersettings_dict = {",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_trainersettings_structure",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_trainersettings_structure():\n    \"\"\"\n    Test structuring method for TrainerSettings\n    \"\"\"\n    trainersettings_dict = {\n        \"trainer_type\": \"sac\",\n        \"hyperparameters\": {\"batch_size\": 1024},\n        \"max_steps\": 1.0,\n        \"reward_signals\": {\"curiosity\": {\"encoding_size\": 64}},\n    }",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_trainersettingsschedules_structure",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_trainersettingsschedules_structure():\n    \"\"\"\n    Test structuring method for Trainer Settings Schedule\n    \"\"\"\n    trainersettings_dict = {\n        \"trainer_type\": \"ppo\",\n        \"hyperparameters\": {\n            \"learning_rate_schedule\": \"linear\",\n            \"beta_schedule\": \"constant\",\n        },",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_reward_signal_structure",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_reward_signal_structure():\n    \"\"\"\n    Tests the RewardSignalSettings structure method. This one is special b/c\n    it takes in a Dict[RewardSignalType, RewardSignalSettings].\n    \"\"\"\n    reward_signals_dict = {\n        \"extrinsic\": {\"strength\": 1.0},\n        \"curiosity\": {\"strength\": 1.0},\n    }\n    reward_signals = RewardSignalSettings.structure(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_memory_settings_validation",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_memory_settings_validation():\n    with pytest.raises(TrainerConfigError):\n        NetworkSettings.MemorySettings(sequence_length=128, memory_size=63)\n    with pytest.raises(TrainerConfigError):\n        NetworkSettings.MemorySettings(sequence_length=128, memory_size=0)\ndef test_env_parameter_structure():\n    \"\"\"\n    Tests the EnvironmentParameterSettings structure method and all validators.\n    \"\"\"\n    env_params_dict = {",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_env_parameter_structure",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_env_parameter_structure():\n    \"\"\"\n    Tests the EnvironmentParameterSettings structure method and all validators.\n    \"\"\"\n    env_params_dict = {\n        \"mass\": {\n            \"sampler_type\": \"uniform\",\n            \"sampler_parameters\": {\"min_value\": 1.0, \"max_value\": 2.0},\n        },\n        \"scale\": {",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_exportable_settings",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_exportable_settings(use_defaults):\n    \"\"\"\n    Test that structuring and unstructuring a RunOptions object results in the same\n    configuration representation.\n    \"\"\"\n    # Try to enable as many features as possible in this test YAML to hit all the\n    # edge cases. Set as much as possible as non-default values to ensure no flukes.\n    test_yaml = \"\"\"\n    behaviors:\n        3DBall:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_environment_settings",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_environment_settings():\n    # default args\n    EnvironmentSettings()\n    # 1 env is OK if no env_path\n    EnvironmentSettings(num_envs=1)\n    # 2 areas are OK\n    EnvironmentSettings(num_areas=2)\n    # multiple envs is OK if env_path is set\n    EnvironmentSettings(num_envs=42, env_path=\"/foo/bar.exe\")\n    # Multiple environments with no env_path is an error",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_default_settings",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_default_settings():\n    # Make default settings, one nested and one not.\n    default_settings = {\n        \"max_steps\": 1,\n        \"network_settings\": {\"num_layers\": 1000, \"deterministic\": True},\n    }\n    behaviors = {\"test1\": {\"max_steps\": 2, \"network_settings\": {\"hidden_units\": 2000}}}\n    run_options_dict = {\"default_settings\": default_settings, \"behaviors\": behaviors}\n    run_options = RunOptions.from_dict(run_options_dict)\n    # Check that a new behavior has the default settings",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_config_specified",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_config_specified():\n    # Test require all behavior names to be specified (or not)\n    # Remove any pre-set defaults\n    TrainerSettings.default_override = None\n    behaviors = {\"test1\": {\"max_steps\": 2, \"network_settings\": {\"hidden_units\": 2000}}}\n    run_options_dict = {\"behaviors\": behaviors}\n    ro = RunOptions.from_dict(run_options_dict)\n    # Don't require all behavior names\n    ro.behaviors.set_config_specified(False)\n    # Test that we can grab an entry that is not in the dict.",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "test_pickle",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "peekOfCode": "def test_pickle():\n    # Make sure RunOptions is pickle-able.\n    run_options = RunOptions()\n    p = pickle.dumps(run_options)\n    pickle.loads(p)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "ConsoleWriterTest",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "peekOfCode": "class ConsoleWriterTest(unittest.TestCase):\n    def test_console_writer(self):\n        # Test write_stats\n        with self.assertLogs(\"mlagents.trainers\", level=\"INFO\") as cm:\n            category = \"category1\"\n            console_writer = ConsoleWriter()\n            statssummary1 = StatsSummary(\n                full_dist=[1.0], aggregation_method=StatsAggregationMethod.AVERAGE\n            )\n            console_writer.write_stats(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "documentation": {}
    },
    {
        "label": "test_stat_reporter_add_summary_write",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "peekOfCode": "def test_stat_reporter_add_summary_write():\n    # Test add_writer\n    StatsReporter.writers.clear()\n    mock_writer1 = mock.Mock()\n    mock_writer2 = mock.Mock()\n    StatsReporter.add_writer(mock_writer1)\n    StatsReporter.add_writer(mock_writer2)\n    assert len(StatsReporter.writers) == 2\n    # Test add_stats and summaries\n    statsreporter1 = StatsReporter(\"category1\")",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "documentation": {}
    },
    {
        "label": "test_stat_reporter_property",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "peekOfCode": "def test_stat_reporter_property():\n    # Test add_writer\n    mock_writer = mock.Mock()\n    StatsReporter.writers.clear()\n    StatsReporter.add_writer(mock_writer)\n    assert len(StatsReporter.writers) == 1\n    statsreporter1 = StatsReporter(\"category1\")\n    # Test add_property\n    statsreporter1.add_property(\"key\", \"this is a text\")\n    mock_writer.add_property.assert_called_once_with(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "documentation": {}
    },
    {
        "label": "test_tensorboard_writer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "peekOfCode": "def test_tensorboard_writer(mock_summary):\n    # Test write_stats\n    category = \"category1\"\n    with tempfile.TemporaryDirectory(prefix=\"unittest-\") as base_dir:\n        tb_writer = TensorboardWriter(base_dir, clear_past_data=False)\n        statssummary1 = StatsSummary(\n            full_dist=[1.0], aggregation_method=StatsAggregationMethod.AVERAGE\n        )\n        tb_writer.write_stats(\"category1\", {\"key1\": statssummary1}, 10)\n        # Test that the filewriter has been created and the directory has been created.",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "documentation": {}
    },
    {
        "label": "test_agent_manager_stats_report",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "peekOfCode": "def test_agent_manager_stats_report(aggregation_type):\n    stats_reporter = StatsReporter(\"recorder_name\")\n    manager = AgentManager(None, \"behaviorName\", stats_reporter)\n    values = range(5)\n    env_stats = {\"stat\": [(i, aggregation_type) for i in values]}\n    manager.record_environment_stats(env_stats, 0)\n    summary = stats_reporter.get_stats_summaries(\"stat\")\n    aggregation_result = {\n        StatsAggregationMethod.AVERAGE: sum(values) / len(values),\n        StatsAggregationMethod.MOST_RECENT: values[-1],",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "documentation": {}
    },
    {
        "label": "test_tensorboard_writer_clear",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "peekOfCode": "def test_tensorboard_writer_clear(tmp_path):\n    tb_writer = TensorboardWriter(tmp_path, clear_past_data=False)\n    statssummary1 = StatsSummary(\n        full_dist=[1.0], aggregation_method=StatsAggregationMethod.AVERAGE\n    )\n    tb_writer.write_stats(\"category1\", {\"key1\": statssummary1}, 10)\n    # TB has some sort of timeout before making a new file\n    time.sleep(1.0)\n    assert len(os.listdir(os.path.join(tmp_path, \"category1\"))) > 0\n    # See if creating a new one doesn't delete it",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "documentation": {}
    },
    {
        "label": "test_tensorboard_writer_hidden_keys",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "peekOfCode": "def test_tensorboard_writer_hidden_keys(mock_summary):\n    # Test write_stats\n    category = \"category1\"\n    with tempfile.TemporaryDirectory(prefix=\"unittest-\") as base_dir:\n        tb_writer = TensorboardWriter(\n            base_dir, clear_past_data=False, hidden_keys=\"hiddenKey\"\n        )\n        statssummary1 = StatsSummary(\n            full_dist=[1.0], aggregation_method=StatsAggregationMethod.AVERAGE\n        )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "documentation": {}
    },
    {
        "label": "test_gauge_stat_writer_sanitize",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "peekOfCode": "def test_gauge_stat_writer_sanitize():\n    assert GaugeWriter.sanitize_string(\"Policy/Learning Rate\") == \"Policy.LearningRate\"\n    assert (\n        GaugeWriter.sanitize_string(\"Very/Very/Very Nested Stat\")\n        == \"Very.Very.VeryNestedStat\"\n    )\nclass ConsoleWriterTest(unittest.TestCase):\n    def test_console_writer(self):\n        # Test write_stats\n        with self.assertLogs(\"mlagents.trainers\", level=\"INFO\") as cm:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_stats",
        "documentation": {}
    },
    {
        "label": "MockEnvWorker",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "peekOfCode": "class MockEnvWorker:\n    def __init__(self, worker_id, resp=None):\n        self.worker_id = worker_id\n        self.process = None\n        self.conn = None\n        self.send = Mock()\n        self.recv = Mock(return_value=resp)\n        self.waiting = False\ndef create_worker_mock(worker_id, step_queue, env_factor, engine_c):\n    return MockEnvWorker(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "SubprocessEnvManagerTest",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "peekOfCode": "class SubprocessEnvManagerTest(unittest.TestCase):\n    @mock.patch(\n        \"mlagents.trainers.subprocess_env_manager.SubprocessEnvManager.create_worker\"\n    )\n    def test_environments_are_created(self, mock_create_worker):\n        mock_create_worker.side_effect = create_worker_mock\n        run_options = RunOptions()\n        env = SubprocessEnvManager(mock_env_factory, run_options, 2)\n        # Creates two processes\n        env.create_worker.assert_has_calls(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "CustomTestOnlyException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "peekOfCode": "class CustomTestOnlyException(Exception):\n    pass\n@pytest.mark.parametrize(\"num_envs\", [1, 4])\ndef test_subprocess_failing_step(num_envs):\n    def failing_step_env_factory(_worker_id, _config):\n        env = UnexpectedExceptionEnvironment(\n            [\"1D\"], use_discrete=True, to_raise=CustomTestOnlyException\n        )\n        return env\n    env_manager = SubprocessEnvManager(failing_step_env_factory, RunOptions())",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "mock_env_factory",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "peekOfCode": "def mock_env_factory(worker_id):\n    return mock.create_autospec(spec=BaseEnv)\nclass MockEnvWorker:\n    def __init__(self, worker_id, resp=None):\n        self.worker_id = worker_id\n        self.process = None\n        self.conn = None\n        self.send = Mock()\n        self.recv = Mock(return_value=resp)\n        self.waiting = False",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "create_worker_mock",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "peekOfCode": "def create_worker_mock(worker_id, step_queue, env_factor, engine_c):\n    return MockEnvWorker(\n        worker_id, EnvironmentResponse(EnvironmentCommand.RESET, worker_id, worker_id)\n    )\nclass SubprocessEnvManagerTest(unittest.TestCase):\n    @mock.patch(\n        \"mlagents.trainers.subprocess_env_manager.SubprocessEnvManager.create_worker\"\n    )\n    def test_environments_are_created(self, mock_create_worker):\n        mock_create_worker.side_effect = create_worker_mock",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "test_subprocess_env_endtoend",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "peekOfCode": "def test_subprocess_env_endtoend(num_envs):\n    def simple_env_factory(worker_id, config):\n        env = SimpleEnvironment([\"1D\"], action_sizes=(0, 1))\n        return env\n    env_manager = SubprocessEnvManager(simple_env_factory, RunOptions(), num_envs)\n    # Run PPO using env_manager\n    check_environment_trains(\n        simple_env_factory(0, []),\n        {\"1D\": ppo_dummy_config()},\n        env_manager=env_manager,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "test_subprocess_failing_step",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "peekOfCode": "def test_subprocess_failing_step(num_envs):\n    def failing_step_env_factory(_worker_id, _config):\n        env = UnexpectedExceptionEnvironment(\n            [\"1D\"], use_discrete=True, to_raise=CustomTestOnlyException\n        )\n        return env\n    env_manager = SubprocessEnvManager(failing_step_env_factory, RunOptions())\n    # Expect the exception raised to be routed back up to the top level.\n    with pytest.raises(CustomTestOnlyException):\n        check_environment_trains(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "test_subprocess_env_raises_errors",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "peekOfCode": "def test_subprocess_env_raises_errors(num_envs):\n    def failing_env_factory(worker_id, config):\n        import time\n        # Sleep momentarily to allow time for the EnvManager to be waiting for the\n        # subprocess response.  We won't be able to capture failures from the subprocess\n        # that cause it to close the pipe before we can send the first message.\n        time.sleep(0.5)\n        raise UnityEnvironmentException()\n    env_manager = SubprocessEnvManager(failing_env_factory, RunOptions(), num_envs)\n    with pytest.raises(UnityEnvironmentException):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "test_set_torch_device",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_torch_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_torch_utils",
        "peekOfCode": "def test_set_torch_device(\n    mock_set_default_tensor_type,\n    device_str,\n    expected_type,\n    expected_index,\n    expected_tensor_type,\n):\n    try:\n        torch_settings = TorchSettings(device=device_str)\n        set_torch_config(torch_settings)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_torch_utils",
        "documentation": {}
    },
    {
        "label": "basic_trainer_controller",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "peekOfCode": "def basic_trainer_controller():\n    trainer_factory_mock = MagicMock()\n    trainer_factory_mock.ghost_controller = GhostController()\n    return TrainerController(\n        trainer_factory=trainer_factory_mock,\n        output_path=\"test_model_path\",\n        run_id=\"test_run_id\",\n        param_manager=EnvironmentParameterManager(),\n        train=True,\n        training_seed=99,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "documentation": {}
    },
    {
        "label": "test_initialization_seed",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "peekOfCode": "def test_initialization_seed(numpy_random_seed, torch_set_seed):\n    seed = 27\n    trainer_factory_mock = MagicMock()\n    trainer_factory_mock.ghost_controller = GhostController()\n    TrainerController(\n        trainer_factory=trainer_factory_mock,\n        output_path=\"\",\n        run_id=\"1\",\n        param_manager=None,\n        train=True,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "documentation": {}
    },
    {
        "label": "trainer_controller_with_start_learning_mocks",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "peekOfCode": "def trainer_controller_with_start_learning_mocks(basic_trainer_controller):\n    trainer_mock = MagicMock()\n    trainer_mock.get_step = 0\n    trainer_mock.get_max_steps = 5\n    trainer_mock.should_still_train = True\n    trainer_mock.parameters = {\"some\": \"parameter\"}\n    trainer_mock.write_tensorboard_text = MagicMock()\n    tc = basic_trainer_controller\n    tc.trainers = {\"testbrain\": trainer_mock}\n    tc.advance = MagicMock()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "documentation": {}
    },
    {
        "label": "test_start_learning_trains_forever_if_no_train_model",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "peekOfCode": "def test_start_learning_trains_forever_if_no_train_model(\n    trainer_controller_with_start_learning_mocks\n):\n    tc, trainer_mock = trainer_controller_with_start_learning_mocks\n    tc.train_model = False\n    env_mock = MagicMock()\n    env_mock.close = MagicMock()\n    env_mock.reset = MagicMock()\n    env_mock.training_behaviors = MagicMock()\n    tc.start_learning(env_mock)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "documentation": {}
    },
    {
        "label": "test_start_learning_trains_until_max_steps_then_saves",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "peekOfCode": "def test_start_learning_trains_until_max_steps_then_saves(\n    trainer_controller_with_start_learning_mocks\n):\n    tc, trainer_mock = trainer_controller_with_start_learning_mocks\n    brain_info_mock = MagicMock()\n    env_mock = MagicMock()\n    env_mock.close = MagicMock()\n    env_mock.reset = MagicMock(return_value=brain_info_mock)\n    env_mock.training_behaviors = MagicMock()\n    tc.start_learning(env_mock)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "documentation": {}
    },
    {
        "label": "trainer_controller_with_take_step_mocks",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "peekOfCode": "def trainer_controller_with_take_step_mocks(basic_trainer_controller):\n    trainer_mock = MagicMock()\n    trainer_mock.get_step = 0\n    trainer_mock.get_max_steps = 5\n    trainer_mock.parameters = {\"some\": \"parameter\"}\n    trainer_mock.write_tensorboard_text = MagicMock()\n    tc = basic_trainer_controller\n    tc.trainers = {\"testbrain\": trainer_mock}\n    tc.managers = {\"testbrain\": MagicMock()}\n    return tc, trainer_mock",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "documentation": {}
    },
    {
        "label": "test_advance_adds_experiences_to_trainer_and_trains",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "peekOfCode": "def test_advance_adds_experiences_to_trainer_and_trains(\n    trainer_controller_with_take_step_mocks\n):\n    tc, trainer_mock = trainer_controller_with_take_step_mocks\n    brain_name = \"testbrain\"\n    env_mock = MagicMock()\n    tc.brain_name_to_identifier[brain_name].add(brain_name)\n    tc.advance(env_mock)\n    env_mock.reset.assert_not_called()\n    env_mock.get_steps.assert_called_once()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_controller",
        "documentation": {}
    },
    {
        "label": "dummy_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "peekOfCode": "def dummy_config():\n    return RunOptions(behaviors={\"testbrain\": ppo_dummy_config()})\n@patch(\"mlagents_envs.base_env.BehaviorSpec\")\ndef test_initialize_ppo_trainer(BehaviorSpecMock, dummy_config):\n    brain_name = \"testbrain\"\n    training_behaviors = {\"testbrain\": BehaviorSpecMock()}\n    output_path = \"results_dir\"\n    train_model = True\n    load_model = False\n    seed = 11",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "documentation": {}
    },
    {
        "label": "test_initialize_ppo_trainer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "peekOfCode": "def test_initialize_ppo_trainer(BehaviorSpecMock, dummy_config):\n    brain_name = \"testbrain\"\n    training_behaviors = {\"testbrain\": BehaviorSpecMock()}\n    output_path = \"results_dir\"\n    train_model = True\n    load_model = False\n    seed = 11\n    expected_reward_buff_cap = 1\n    base_config = dummy_config.behaviors\n    expected_config = ppo_dummy_config()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "documentation": {}
    },
    {
        "label": "test_handles_no_config_provided",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "peekOfCode": "def test_handles_no_config_provided():\n    \"\"\"\n    Make sure the trainer setup handles no configs provided at all.\n    \"\"\"\n    brain_name = \"testbrain\"\n    no_default_config = RunOptions().behaviors\n    # Pretend this was created without a YAML file\n    no_default_config.set_config_specified(False)\n    trainer_factory = TrainerFactory(\n        trainer_config=no_default_config,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "documentation": {}
    },
    {
        "label": "test_load_config_missing_file",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "peekOfCode": "def test_load_config_missing_file():\n    with pytest.raises(TrainerConfigError):\n        load_config(\"thisFileDefinitelyDoesNotExist.yaml\")\ndef test_load_config_valid_yaml():\n    file_contents = \"\"\"\nthis:\n  - is fine\n    \"\"\"\n    fp = io.StringIO(file_contents)\n    res = _load_config(fp)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "documentation": {}
    },
    {
        "label": "test_load_config_valid_yaml",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "peekOfCode": "def test_load_config_valid_yaml():\n    file_contents = \"\"\"\nthis:\n  - is fine\n    \"\"\"\n    fp = io.StringIO(file_contents)\n    res = _load_config(fp)\n    assert res == {\"this\": [\"is fine\"]}\ndef test_load_config_invalid_yaml():\n    file_contents = \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "documentation": {}
    },
    {
        "label": "test_load_config_invalid_yaml",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "peekOfCode": "def test_load_config_invalid_yaml():\n    file_contents = \"\"\"\nyou:\n  - will\n- not\n  - parse\n    \"\"\"\n    with pytest.raises(TrainerConfigError):\n        fp = io.StringIO(file_contents)\n        _load_config(fp)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "documentation": {}
    },
    {
        "label": "test_existing_directories",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "peekOfCode": "def test_existing_directories(tmp_path):\n    output_path = os.path.join(tmp_path, \"runid\")\n    # Test fresh new unused path - should do nothing.\n    validate_existing_directories(output_path, False, False)\n    # Test resume with fresh path - should throw an exception.\n    with pytest.raises(UnityTrainerException):\n        validate_existing_directories(output_path, True, False)\n    # make a directory\n    os.mkdir(output_path)\n    # Test try to train w.o. force, should complain",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "documentation": {}
    },
    {
        "label": "test_setup_init_path",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "peekOfCode": "def test_setup_init_path(tmpdir, dir_exists):\n    \"\"\"\n    :return:\n    \"\"\"\n    test_yaml = \"\"\"\n    behaviors:\n        BigWallJump:\n            init_path: BigWallJump-6540981.pt #full path\n            trainer_type: ppo\n        MediumWallJump:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainer_util",
        "documentation": {}
    },
    {
        "label": "ppo_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "peekOfCode": "def ppo_config():\n    return RunOptions(behaviors={\"test_brain\": ppo_dummy_config()})\n@pytest.fixture\ndef sac_config():\n    return RunOptions(behaviors={\"test_brain\": sac_dummy_config()})\n@pytest.fixture\ndef poca_config():\n    return RunOptions(behaviors={\"test_brain\": poca_dummy_config()})\ndef test_ppo_trainer_update_normalization(ppo_config):\n    behavior_id_team0 = \"test_brain?team=0\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "documentation": {}
    },
    {
        "label": "sac_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "peekOfCode": "def sac_config():\n    return RunOptions(behaviors={\"test_brain\": sac_dummy_config()})\n@pytest.fixture\ndef poca_config():\n    return RunOptions(behaviors={\"test_brain\": poca_dummy_config()})\ndef test_ppo_trainer_update_normalization(ppo_config):\n    behavior_id_team0 = \"test_brain?team=0\"\n    brain_name = BehaviorIdentifiers.from_name_behavior_id(behavior_id_team0).brain_name\n    mock_specs = mb.setup_test_behavior_specs(\n        True, False, vector_action_space=[2], vector_obs_space=1",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "documentation": {}
    },
    {
        "label": "poca_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "peekOfCode": "def poca_config():\n    return RunOptions(behaviors={\"test_brain\": poca_dummy_config()})\ndef test_ppo_trainer_update_normalization(ppo_config):\n    behavior_id_team0 = \"test_brain?team=0\"\n    brain_name = BehaviorIdentifiers.from_name_behavior_id(behavior_id_team0).brain_name\n    mock_specs = mb.setup_test_behavior_specs(\n        True, False, vector_action_space=[2], vector_obs_space=1\n    )\n    base_config = ppo_config.behaviors\n    output_path = \"results_dir\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "documentation": {}
    },
    {
        "label": "test_ppo_trainer_update_normalization",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "peekOfCode": "def test_ppo_trainer_update_normalization(ppo_config):\n    behavior_id_team0 = \"test_brain?team=0\"\n    brain_name = BehaviorIdentifiers.from_name_behavior_id(behavior_id_team0).brain_name\n    mock_specs = mb.setup_test_behavior_specs(\n        True, False, vector_action_space=[2], vector_obs_space=1\n    )\n    base_config = ppo_config.behaviors\n    output_path = \"results_dir\"\n    train_model = True\n    load_model = False",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "documentation": {}
    },
    {
        "label": "test_sac_trainer_update_normalization",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "peekOfCode": "def test_sac_trainer_update_normalization(sac_config):\n    behavior_id_team0 = \"test_brain?team=0\"\n    brain_name = BehaviorIdentifiers.from_name_behavior_id(behavior_id_team0).brain_name\n    mock_specs = mb.setup_test_behavior_specs(\n        True, False, vector_action_space=[2], vector_obs_space=1\n    )\n    base_config = sac_config.behaviors\n    output_path = \"results_dir\"\n    train_model = True\n    load_model = False",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "documentation": {}
    },
    {
        "label": "test_poca_trainer_update_normalization",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "peekOfCode": "def test_poca_trainer_update_normalization(poca_config):\n    behavior_id_team0 = \"test_brain?team=0\"\n    brain_name = BehaviorIdentifiers.from_name_behavior_id(behavior_id_team0).brain_name\n    mock_specs = mb.setup_test_behavior_specs(\n        True, False, vector_action_space=[2], vector_obs_space=1\n    )\n    base_config = poca_config.behaviors\n    output_path = \"results_dir\"\n    train_model = True\n    load_model = False",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trainers",
        "documentation": {}
    },
    {
        "label": "test_sanitize_run_options",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_analytics_side_channel",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_analytics_side_channel",
        "peekOfCode": "def test_sanitize_run_options():\n    run_options = RunOptions.from_dict(yaml.safe_load(test_curriculum_config_yaml))\n    sanitized = TrainingAnalyticsSideChannel._sanitize_run_options(run_options)\n    assert \"param_1\" not in sanitized[\"environment_parameters\"]\n    assert \"fake_behavior\" not in sanitized[\"environment_parameters\"]\n    assert (\n        TrainingAnalyticsSideChannel._hash(\"param_1\")\n        in sanitized[\"environment_parameters\"]\n    )\n    level1 = TrainingAnalyticsSideChannel._hash(\"param_1\")",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_analytics_side_channel",
        "documentation": {}
    },
    {
        "label": "test_curriculum_config_yaml",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_analytics_side_channel",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_analytics_side_channel",
        "peekOfCode": "test_curriculum_config_yaml = \"\"\"\nenvironment_parameters:\n    param_1:\n      curriculum:\n          - name: Lesson1\n            completion_criteria:\n                measure: reward\n                behavior: fake_behavior\n                threshold: 30\n                min_lesson_length: 100",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_analytics_side_channel",
        "documentation": {}
    },
    {
        "label": "StatsMetaDataTest",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_status",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_status",
        "peekOfCode": "class StatsMetaDataTest(unittest.TestCase):\n    def test_metadata_compare(self):\n        # Test write_stats\n        with self.assertLogs(\"mlagents.trainers\", level=\"WARNING\") as cm:\n            default_metadata = StatusMetaData()\n            version_statsmetadata = StatusMetaData(mlagents_version=\"test\")\n            default_metadata.check_compatibility(version_statsmetadata)\n            torch_version_statsmetadata = StatusMetaData(torch_version=\"test\")\n            default_metadata.check_compatibility(torch_version_statsmetadata)\n        # Assert that 2 warnings have been thrown",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_status",
        "documentation": {}
    },
    {
        "label": "test_globaltrainingstatus",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_status",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_status",
        "peekOfCode": "def test_globaltrainingstatus(tmpdir):\n    path_dir = os.path.join(tmpdir, \"test.json\")\n    GlobalTrainingStatus.set_parameter_state(\"Category1\", StatusType.LESSON_NUM, 3)\n    GlobalTrainingStatus.save_state(path_dir)\n    with open(path_dir) as fp:\n        test_json = json.load(fp)\n    assert \"Category1\" in test_json\n    assert StatusType.LESSON_NUM.value in test_json[\"Category1\"]\n    assert test_json[\"Category1\"][StatusType.LESSON_NUM.value] == 3\n    assert \"metadata\" in test_json",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_status",
        "documentation": {}
    },
    {
        "label": "test_model_management",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_status",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_status",
        "peekOfCode": "def test_model_management(tmpdir):\n    results_path = os.path.join(tmpdir, \"results\")\n    brain_name = \"Mock_brain\"\n    final_model_path = os.path.join(results_path, brain_name)\n    test_checkpoint_list = [\n        {\n            \"steps\": 1,\n            \"file_path\": os.path.join(final_model_path, f\"{brain_name}-1.nn\"),\n            \"reward\": 1.312,\n            \"creation_time\": time.time(),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_training_status",
        "documentation": {}
    },
    {
        "label": "test_trajectory_to_agentbuffer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trajectory",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trajectory",
        "peekOfCode": "def test_trajectory_to_agentbuffer():\n    length = 15\n    # These keys should be of type np.ndarray\n    wanted_keys = [\n        (ObservationKeyPrefix.OBSERVATION, 0),\n        (ObservationKeyPrefix.OBSERVATION, 1),\n        (ObservationKeyPrefix.NEXT_OBSERVATION, 0),\n        (ObservationKeyPrefix.NEXT_OBSERVATION, 1),\n        BufferKey.MEMORY,\n        BufferKey.MASKS,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trajectory",
        "documentation": {}
    },
    {
        "label": "test_obsutil_group_from_buffer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trajectory",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trajectory",
        "peekOfCode": "def test_obsutil_group_from_buffer():\n    buff = AgentBuffer()\n    # Create some obs\n    for _ in range(3):\n        buff[GroupObsUtil.get_name_at(0)].append(3 * [np.ones((5,), dtype=np.float32)])\n    # Some agents have died\n    for _ in range(2):\n        buff[GroupObsUtil.get_name_at(0)].append(1 * [np.ones((5,), dtype=np.float32)])\n    # Get the group obs, which will be a List of Lists of np.ndarray, where each element is the same\n    # length as the AgentBuffer but contains only one agent's obs. Dead agents are padded by",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trajectory",
        "documentation": {}
    },
    {
        "label": "VEC_OBS_SIZE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trajectory",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trajectory",
        "peekOfCode": "VEC_OBS_SIZE = 6\nACTION_SIZE = 4\ndef test_trajectory_to_agentbuffer():\n    length = 15\n    # These keys should be of type np.ndarray\n    wanted_keys = [\n        (ObservationKeyPrefix.OBSERVATION, 0),\n        (ObservationKeyPrefix.OBSERVATION, 1),\n        (ObservationKeyPrefix.NEXT_OBSERVATION, 0),\n        (ObservationKeyPrefix.NEXT_OBSERVATION, 1),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trajectory",
        "documentation": {}
    },
    {
        "label": "ACTION_SIZE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trajectory",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trajectory",
        "peekOfCode": "ACTION_SIZE = 4\ndef test_trajectory_to_agentbuffer():\n    length = 15\n    # These keys should be of type np.ndarray\n    wanted_keys = [\n        (ObservationKeyPrefix.OBSERVATION, 0),\n        (ObservationKeyPrefix.OBSERVATION, 1),\n        (ObservationKeyPrefix.NEXT_OBSERVATION, 0),\n        (ObservationKeyPrefix.NEXT_OBSERVATION, 1),\n        BufferKey.MEMORY,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.tests.test_trajectory",
        "documentation": {}
    },
    {
        "label": "BCModule",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.bc.module",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.bc.module",
        "peekOfCode": "class BCModule:\n    def __init__(\n        self,\n        policy: TorchPolicy,\n        settings: BehavioralCloningSettings,\n        policy_learning_rate: float,\n        default_batch_size: int,\n        default_num_epoch: int,\n    ):\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.bc.module",
        "documentation": {}
    },
    {
        "label": "BaseRewardProvider",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "peekOfCode": "class BaseRewardProvider(ABC):\n    def __init__(self, specs: BehaviorSpec, settings: RewardSignalSettings) -> None:\n        self._policy_specs = specs\n        self._gamma = settings.gamma\n        self._strength = settings.strength\n        self._ignore_done = False\n    @property\n    def gamma(self) -> float:\n        \"\"\"\n        The discount factor for the reward signal",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.base_reward_provider",
        "documentation": {}
    },
    {
        "label": "ActionPredictionTuple",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "peekOfCode": "class ActionPredictionTuple(NamedTuple):\n    continuous: torch.Tensor\n    discrete: torch.Tensor\nclass CuriosityRewardProvider(BaseRewardProvider):\n    beta = 0.2  # Forward vs Inverse loss weight\n    loss_multiplier = 10.0  # Loss multiplier\n    def __init__(self, specs: BehaviorSpec, settings: CuriositySettings) -> None:\n        super().__init__(specs, settings)\n        self._ignore_done = True\n        self._network = CuriosityNetwork(specs, settings)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "documentation": {}
    },
    {
        "label": "CuriosityRewardProvider",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "peekOfCode": "class CuriosityRewardProvider(BaseRewardProvider):\n    beta = 0.2  # Forward vs Inverse loss weight\n    loss_multiplier = 10.0  # Loss multiplier\n    def __init__(self, specs: BehaviorSpec, settings: CuriositySettings) -> None:\n        super().__init__(specs, settings)\n        self._ignore_done = True\n        self._network = CuriosityNetwork(specs, settings)\n        self._network.to(default_device())\n        self.optimizer = torch.optim.Adam(\n            self._network.parameters(), lr=settings.learning_rate",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "documentation": {}
    },
    {
        "label": "CuriosityNetwork",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "peekOfCode": "class CuriosityNetwork(torch.nn.Module):\n    EPSILON = 1e-10\n    def __init__(self, specs: BehaviorSpec, settings: CuriositySettings) -> None:\n        super().__init__()\n        self._action_spec = specs.action_spec\n        state_encoder_settings = settings.network_settings\n        if state_encoder_settings.memory is not None:\n            state_encoder_settings.memory = None\n            logger.warning(\n                \"memory was specified in network_settings but is not supported by Curiosity. It is being ignored.\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "peekOfCode": "logger = logging_util.get_logger(__name__)\nclass ActionPredictionTuple(NamedTuple):\n    continuous: torch.Tensor\n    discrete: torch.Tensor\nclass CuriosityRewardProvider(BaseRewardProvider):\n    beta = 0.2  # Forward vs Inverse loss weight\n    loss_multiplier = 10.0  # Loss multiplier\n    def __init__(self, specs: BehaviorSpec, settings: CuriositySettings) -> None:\n        super().__init__(specs, settings)\n        self._ignore_done = True",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.curiosity_reward_provider",
        "documentation": {}
    },
    {
        "label": "ExtrinsicRewardProvider",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.extrinsic_reward_provider",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.extrinsic_reward_provider",
        "peekOfCode": "class ExtrinsicRewardProvider(BaseRewardProvider):\n    \"\"\"\n    Evaluates extrinsic reward. For single-agent, this equals the individual reward\n    given to the agent. For the POCA algorithm, we want not only the individual reward\n    but also the team and the individual rewards of the other agents.\n    \"\"\"\n    def __init__(self, specs: BehaviorSpec, settings: RewardSignalSettings) -> None:\n        super().__init__(specs, settings)\n        self.add_groupmate_rewards = False\n    def evaluate(self, mini_batch: AgentBuffer) -> np.ndarray:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.extrinsic_reward_provider",
        "documentation": {}
    },
    {
        "label": "GAILRewardProvider",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "peekOfCode": "class GAILRewardProvider(BaseRewardProvider):\n    def __init__(self, specs: BehaviorSpec, settings: GAILSettings) -> None:\n        super().__init__(specs, settings)\n        self._ignore_done = False\n        self._discriminator_network = DiscriminatorNetwork(specs, settings)\n        self._discriminator_network.to(default_device())\n        _, self._demo_buffer = demo_to_buffer(\n            settings.demo_path, 1, specs\n        )  # This is supposed to be the sequence length but we do not have access here\n        params = list(self._discriminator_network.parameters())",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "documentation": {}
    },
    {
        "label": "DiscriminatorNetwork",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "peekOfCode": "class DiscriminatorNetwork(torch.nn.Module):\n    gradient_penalty_weight = 10.0\n    z_size = 128\n    alpha = 0.0005\n    mutual_information = 0.5\n    EPSILON = 1e-7\n    initial_beta = 0.0\n    def __init__(self, specs: BehaviorSpec, settings: GAILSettings) -> None:\n        super().__init__()\n        self._use_vail = settings.use_vail",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "peekOfCode": "logger = logging_util.get_logger(__name__)\nclass GAILRewardProvider(BaseRewardProvider):\n    def __init__(self, specs: BehaviorSpec, settings: GAILSettings) -> None:\n        super().__init__(specs, settings)\n        self._ignore_done = False\n        self._discriminator_network = DiscriminatorNetwork(specs, settings)\n        self._discriminator_network.to(default_device())\n        _, self._demo_buffer = demo_to_buffer(\n            settings.demo_path, 1, specs\n        )  # This is supposed to be the sequence length but we do not have access here",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.gail_reward_provider",
        "documentation": {}
    },
    {
        "label": "create_reward_provider",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.reward_provider_factory",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.reward_provider_factory",
        "peekOfCode": "def create_reward_provider(\n    name: RewardSignalType, specs: BehaviorSpec, settings: RewardSignalSettings\n) -> BaseRewardProvider:\n    \"\"\"\n    Creates a reward provider class based on the name and config entry provided as a dict.\n    :param name: The name of the reward signal\n    :param specs: The BehaviorSpecs of the policy\n    :param settings: The RewardSignalSettings for that reward signal\n    :return: The reward signal class instantiated\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.reward_provider_factory",
        "documentation": {}
    },
    {
        "label": "RNDRewardProvider",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.rnd_reward_provider",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.rnd_reward_provider",
        "peekOfCode": "class RNDRewardProvider(BaseRewardProvider):\n    \"\"\"\n    Implementation of Random Network Distillation : https://arxiv.org/pdf/1810.12894.pdf\n    \"\"\"\n    def __init__(self, specs: BehaviorSpec, settings: RNDSettings) -> None:\n        super().__init__(specs, settings)\n        self._ignore_done = True\n        self._random_network = RNDNetwork(specs, settings)\n        self._training_network = RNDNetwork(specs, settings)\n        self.optimizer = torch.optim.Adam(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.rnd_reward_provider",
        "documentation": {}
    },
    {
        "label": "RNDNetwork",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.rnd_reward_provider",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.rnd_reward_provider",
        "peekOfCode": "class RNDNetwork(torch.nn.Module):\n    EPSILON = 1e-10\n    def __init__(self, specs: BehaviorSpec, settings: RNDSettings) -> None:\n        super().__init__()\n        state_encoder_settings = settings.network_settings\n        if state_encoder_settings.memory is not None:\n            state_encoder_settings.memory = None\n            logger.warning(\n                \"memory was specified in network_settings but is not supported by RND. It is being ignored.\"\n            )",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.rnd_reward_provider",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.rnd_reward_provider",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.rnd_reward_provider",
        "peekOfCode": "logger = logging_util.get_logger(__name__)\nclass RNDRewardProvider(BaseRewardProvider):\n    \"\"\"\n    Implementation of Random Network Distillation : https://arxiv.org/pdf/1810.12894.pdf\n    \"\"\"\n    def __init__(self, specs: BehaviorSpec, settings: RNDSettings) -> None:\n        super().__init__(specs, settings)\n        self._ignore_done = True\n        self._random_network = RNDNetwork(specs, settings)\n        self._training_network = RNDNetwork(specs, settings)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.components.reward_providers.rnd_reward_provider",
        "documentation": {}
    },
    {
        "label": "ActionFlattener",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_flattener",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_flattener",
        "peekOfCode": "class ActionFlattener:\n    def __init__(self, action_spec: ActionSpec):\n        \"\"\"\n        A torch module that creates the flattened form of an AgentAction object.\n        The flattened form is the continuous action concatenated with the\n        concatenated one hot encodings of the discrete actions.\n        :param action_spec: An ActionSpec that describes the action space dimensions\n        \"\"\"\n        self._specs = action_spec\n    @property",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_flattener",
        "documentation": {}
    },
    {
        "label": "LogProbsTuple",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_log_probs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_log_probs",
        "peekOfCode": "class LogProbsTuple(_ActionTupleBase):\n    \"\"\"\n    An object whose fields correspond to the log probs of actions of different types.\n    Continuous and discrete are numpy arrays\n    Dimensions are of (n_agents, continuous_size) and (n_agents, discrete_size),\n    respectively. Note, this also holds when continuous or discrete size is\n    zero.\n    \"\"\"\n    @property\n    def discrete_dtype(self) -> np.dtype:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_log_probs",
        "documentation": {}
    },
    {
        "label": "ActionLogProbs",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_log_probs",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_log_probs",
        "peekOfCode": "class ActionLogProbs(NamedTuple):\n    \"\"\"\n    A NamedTuple containing the tensor for continuous log probs and list of tensors for\n    discrete log probs of individual actions as well as all the log probs for an entire branch.\n    Utility functions provide numpy <=> tensor conversions to be used by the optimizers.\n    :param continuous_tensor: Torch tensor corresponding to log probs of continuous actions\n    :param discrete_list: List of Torch tensors each corresponding to log probs of the discrete actions that were\n    sampled.\n    :param all_discrete_list: List of Torch tensors each corresponding to all log probs of\n    a discrete action branch, even the discrete actions that were not sampled. all_discrete_list is a list of Tensors,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_log_probs",
        "documentation": {}
    },
    {
        "label": "DistInstances",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_model",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_model",
        "peekOfCode": "class DistInstances(NamedTuple):\n    \"\"\"\n    A NamedTuple with fields corresponding the the DistInstance objects\n    output by continuous and discrete distributions, respectively. Discrete distributions\n    output a list of DistInstance objects whereas continuous distributions output a single\n    DistInstance object.\n    \"\"\"\n    continuous: Optional[DistInstance]\n    discrete: Optional[List[DiscreteDistInstance]]\nclass ActionModel(nn.Module):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_model",
        "documentation": {}
    },
    {
        "label": "ActionModel",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_model",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_model",
        "peekOfCode": "class ActionModel(nn.Module):\n    def __init__(\n        self,\n        hidden_size: int,\n        action_spec: ActionSpec,\n        conditional_sigma: bool = False,\n        tanh_squash: bool = False,\n        deterministic: bool = False,\n    ):\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_model",
        "documentation": {}
    },
    {
        "label": "EPSILON",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_model",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_model",
        "peekOfCode": "EPSILON = 1e-7  # Small value to avoid divide by zero\nclass DistInstances(NamedTuple):\n    \"\"\"\n    A NamedTuple with fields corresponding the the DistInstance objects\n    output by continuous and discrete distributions, respectively. Discrete distributions\n    output a list of DistInstance objects whereas continuous distributions output a single\n    DistInstance object.\n    \"\"\"\n    continuous: Optional[DistInstance]\n    discrete: Optional[List[DiscreteDistInstance]]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.action_model",
        "documentation": {}
    },
    {
        "label": "AgentAction",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.agent_action",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.agent_action",
        "peekOfCode": "class AgentAction(NamedTuple):\n    \"\"\"\n    A NamedTuple containing the tensor for continuous actions and list of tensors for\n    discrete actions. Utility functions provide numpy <=> tensor conversions to be\n    sent as actions to the environment manager as well as used by the optimizers.\n    :param continuous_tensor: Torch tensor corresponding to continuous actions\n    :param discrete_list: List of Torch tensors each corresponding to discrete actions\n    \"\"\"\n    continuous_tensor: torch.Tensor\n    discrete_list: Optional[List[torch.Tensor]]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.agent_action",
        "documentation": {}
    },
    {
        "label": "MultiHeadAttention",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.attention",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.attention",
        "peekOfCode": "class MultiHeadAttention(torch.nn.Module):\n    NEG_INF = -1e6\n    def __init__(self, embedding_size: int, num_heads: int):\n        \"\"\"\n        Multi Head Attention module. We do not use the regular Torch implementation since\n        Barracuda does not support some operators it uses.\n        Takes as input to the forward method 3 tensors:\n        - query: of dimensions (batch_size, number_of_queries, embedding_size)\n        - key: of dimensions (batch_size, number_of_keys, embedding_size)\n        - value: of dimensions (batch_size, number_of_keys, embedding_size)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.attention",
        "documentation": {}
    },
    {
        "label": "EntityEmbedding",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.attention",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.attention",
        "peekOfCode": "class EntityEmbedding(torch.nn.Module):\n    \"\"\"\n    A module used to embed entities before passing them to a self-attention block.\n    Used in conjunction with ResidualSelfAttention to encode information about a self\n    and additional entities. Can also concatenate self to entities for ego-centric self-\n    attention. Inspired by architecture used in https://arxiv.org/pdf/1909.07528.pdf.\n    \"\"\"\n    def __init__(\n        self,\n        entity_size: int,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.attention",
        "documentation": {}
    },
    {
        "label": "ResidualSelfAttention",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.attention",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.attention",
        "peekOfCode": "class ResidualSelfAttention(torch.nn.Module):\n    \"\"\"\n    Residual self attentioninspired from https://arxiv.org/pdf/1909.07528.pdf. Can be used\n    with an EntityEmbedding module, to apply multi head self attention to encode information\n    about a \"Self\" and a list of relevant \"Entities\".\n    \"\"\"\n    EPSILON = 1e-7\n    def __init__(\n        self,\n        embedding_size: int,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.attention",
        "documentation": {}
    },
    {
        "label": "get_zero_entities_mask",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.attention",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.attention",
        "peekOfCode": "def get_zero_entities_mask(entities: List[torch.Tensor]) -> List[torch.Tensor]:\n    \"\"\"\n    Takes a List of Tensors and returns a List of mask Tensor with 1 if the input was\n    all zeros (on dimension 2) and 0 otherwise. This is used in the Attention\n    layer to mask the padding observations.\n    \"\"\"\n    with torch.no_grad():\n        if exporting_to_onnx.is_exporting():\n            with warnings.catch_warnings():\n                # We ignore a TracerWarning from PyTorch that warns that doing",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.attention",
        "documentation": {}
    },
    {
        "label": "ConditionalEncoder",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.conditioning",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.conditioning",
        "peekOfCode": "class ConditionalEncoder(torch.nn.Module):\n    def __init__(\n        self,\n        input_size: int,\n        goal_size: int,\n        hidden_size: int,\n        num_layers: int,\n        num_conditional_layers: int,\n        kernel_init: Initialization = Initialization.KaimingHeNormal,\n        kernel_gain: float = 1.0,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.conditioning",
        "documentation": {}
    },
    {
        "label": "HyperNetwork",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.conditioning",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.conditioning",
        "peekOfCode": "class HyperNetwork(torch.nn.Module):\n    def __init__(\n        self, input_size, output_size, hyper_input_size, layer_size, num_layers\n    ):\n        \"\"\"\n        Hyper Network module. This module will use the hyper_input tensor to generate\n        the weights of the main network. The main network is a single fully connected\n        layer.\n        :param input_size: The size of the input of the main network\n        :param output_size: The size of the output of the main network",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.conditioning",
        "documentation": {}
    },
    {
        "label": "ValueHeads",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.decoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.decoders",
        "peekOfCode": "class ValueHeads(nn.Module):\n    def __init__(self, stream_names: List[str], input_size: int, output_size: int = 1):\n        super().__init__()\n        self.stream_names = stream_names\n        _value_heads = {}\n        for name in stream_names:\n            value = linear_layer(input_size, output_size)\n            _value_heads[name] = value\n        self.value_heads = nn.ModuleDict(_value_heads)\n    def forward(self, hidden: torch.Tensor) -> Dict[str, torch.Tensor]:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.decoders",
        "documentation": {}
    },
    {
        "label": "DistInstance",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "peekOfCode": "class DistInstance(nn.Module, abc.ABC):\n    @abc.abstractmethod\n    def sample(self) -> torch.Tensor:\n        \"\"\"\n        Return a sample from this distribution.\n        \"\"\"\n        pass\n    @abc.abstractmethod\n    def deterministic_sample(self) -> torch.Tensor:\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "DiscreteDistInstance",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "peekOfCode": "class DiscreteDistInstance(DistInstance):\n    @abc.abstractmethod\n    def all_log_prob(self) -> torch.Tensor:\n        \"\"\"\n        Returns the log probabilities of all actions represented by this distribution.\n        \"\"\"\n        pass\nclass GaussianDistInstance(DistInstance):\n    def __init__(self, mean, std):\n        super().__init__()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "GaussianDistInstance",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "peekOfCode": "class GaussianDistInstance(DistInstance):\n    def __init__(self, mean, std):\n        super().__init__()\n        self.mean = mean\n        self.std = std\n    def sample(self):\n        sample = self.mean + torch.randn_like(self.mean) * self.std\n        return sample\n    def deterministic_sample(self):\n        return self.mean",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "TanhGaussianDistInstance",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "peekOfCode": "class TanhGaussianDistInstance(GaussianDistInstance):\n    def __init__(self, mean, std):\n        super().__init__(mean, std)\n        self.transform = torch.distributions.transforms.TanhTransform(cache_size=1)\n    def sample(self):\n        unsquashed_sample = super().sample()\n        squashed = self.transform(unsquashed_sample)\n        return squashed\n    def _inverse_tanh(self, value):\n        capped_value = torch.clamp(value, -1 + EPSILON, 1 - EPSILON)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "CategoricalDistInstance",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "peekOfCode": "class CategoricalDistInstance(DiscreteDistInstance):\n    def __init__(self, logits):\n        super().__init__()\n        self.logits = logits\n        self.probs = torch.softmax(self.logits, dim=-1)\n    def sample(self):\n        return torch.multinomial(self.probs, 1)\n    def deterministic_sample(self):\n        return torch.argmax(self.probs, dim=1, keepdim=True)\n    def pdf(self, value):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "GaussianDistribution",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "peekOfCode": "class GaussianDistribution(nn.Module):\n    def __init__(\n        self,\n        hidden_size: int,\n        num_outputs: int,\n        conditional_sigma: bool = False,\n        tanh_squash: bool = False,\n    ):\n        super().__init__()\n        self.conditional_sigma = conditional_sigma",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "MultiCategoricalDistribution",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "peekOfCode": "class MultiCategoricalDistribution(nn.Module):\n    def __init__(self, hidden_size: int, act_sizes: List[int]):\n        super().__init__()\n        self.act_sizes = act_sizes\n        self.branches = self._create_policy_branches(hidden_size)\n    def _create_policy_branches(self, hidden_size: int) -> nn.ModuleList:\n        branches = []\n        for size in self.act_sizes:\n            branch_output_layer = linear_layer(\n                hidden_size,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "EPSILON",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "peekOfCode": "EPSILON = 1e-7  # Small value to avoid divide by zero\nclass DistInstance(nn.Module, abc.ABC):\n    @abc.abstractmethod\n    def sample(self) -> torch.Tensor:\n        \"\"\"\n        Return a sample from this distribution.\n        \"\"\"\n        pass\n    @abc.abstractmethod\n    def deterministic_sample(self) -> torch.Tensor:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.distributions",
        "documentation": {}
    },
    {
        "label": "Normalizer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "peekOfCode": "class Normalizer(nn.Module):\n    def __init__(self, vec_obs_size: int):\n        super().__init__()\n        self.register_buffer(\"normalization_steps\", torch.tensor(1))\n        self.register_buffer(\"running_mean\", torch.zeros(vec_obs_size))\n        self.register_buffer(\"running_variance\", torch.ones(vec_obs_size))\n    def forward(self, inputs: torch.Tensor) -> torch.Tensor:\n        normalized_state = torch.clamp(\n            (inputs - self.running_mean)\n            / torch.sqrt(self.running_variance / self.normalization_steps),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "VectorInput",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "peekOfCode": "class VectorInput(nn.Module):\n    def __init__(self, input_size: int, normalize: bool = False):\n        super().__init__()\n        self.normalizer: Optional[Normalizer] = None\n        if normalize:\n            self.normalizer = Normalizer(input_size)\n    def forward(self, inputs: torch.Tensor) -> torch.Tensor:\n        if self.normalizer is not None:\n            inputs = self.normalizer(inputs)\n        return inputs",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "FullyConnectedVisualEncoder",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "peekOfCode": "class FullyConnectedVisualEncoder(nn.Module):\n    def __init__(\n        self, height: int, width: int, initial_channels: int, output_size: int\n    ):\n        super().__init__()\n        self.output_size = output_size\n        self.input_size = height * width * initial_channels\n        self.dense = nn.Sequential(\n            linear_layer(\n                self.input_size,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "SmallVisualEncoder",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "peekOfCode": "class SmallVisualEncoder(nn.Module):\n    \"\"\"\n    CNN architecture used by King in their Candy Crush predictor\n    https://www.researchgate.net/publication/328307928_Human-Like_Playtesting_with_Deep_Learning\n    \"\"\"\n    def __init__(\n        self, height: int, width: int, initial_channels: int, output_size: int\n    ):\n        super().__init__()\n        self.h_size = output_size",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "SimpleVisualEncoder",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "peekOfCode": "class SimpleVisualEncoder(nn.Module):\n    def __init__(\n        self, height: int, width: int, initial_channels: int, output_size: int\n    ):\n        super().__init__()\n        self.h_size = output_size\n        conv_1_hw = conv_output_shape((height, width), 8, 4)\n        conv_2_hw = conv_output_shape(conv_1_hw, 4, 2)\n        self.final_flat = conv_2_hw[0] * conv_2_hw[1] * 32\n        self.conv_layers = nn.Sequential(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "NatureVisualEncoder",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "peekOfCode": "class NatureVisualEncoder(nn.Module):\n    def __init__(\n        self, height: int, width: int, initial_channels: int, output_size: int\n    ):\n        super().__init__()\n        self.h_size = output_size\n        conv_1_hw = conv_output_shape((height, width), 8, 4)\n        conv_2_hw = conv_output_shape(conv_1_hw, 4, 2)\n        conv_3_hw = conv_output_shape(conv_2_hw, 3, 1)\n        self.final_flat = conv_3_hw[0] * conv_3_hw[1] * 64",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "ResNetBlock",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "peekOfCode": "class ResNetBlock(nn.Module):\n    def __init__(self, channel: int):\n        \"\"\"\n        Creates a ResNet Block.\n        :param channel: The number of channels in the input (and output) tensors of the\n        convolutions\n        \"\"\"\n        super().__init__()\n        self.layers = nn.Sequential(\n            Swish(),",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "ResNetVisualEncoder",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "peekOfCode": "class ResNetVisualEncoder(nn.Module):\n    def __init__(\n        self, height: int, width: int, initial_channels: int, output_size: int\n    ):\n        super().__init__()\n        n_channels = [16, 32, 32]  # channel for each stack\n        n_blocks = 2  # number of residual blocks\n        layers = []\n        last_channel = initial_channels\n        for _, channel in enumerate(n_channels):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "conv_output_shape",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "peekOfCode": "def conv_output_shape(\n    h_w: Tuple[int, int],\n    kernel_size: Union[int, Tuple[int, int]] = 1,\n    stride: int = 1,\n    padding: int = 0,\n    dilation: int = 1,\n) -> Tuple[int, int]:\n    \"\"\"\n    Calculates the output shape (height and width) of the output of a convolution layer.\n    kernel_size, stride, padding and dilation correspond to the inputs of the",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "pool_out_shape",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "peekOfCode": "def pool_out_shape(h_w: Tuple[int, int], kernel_size: int) -> Tuple[int, int]:\n    \"\"\"\n    Calculates the output shape (height and width) of the output of a max pooling layer.\n    kernel_size corresponds to the inputs of the\n    torch.nn.MaxPool2d layer (https://pytorch.org/docs/stable/generated/torch.nn.MaxPool2d.html)\n    :param kernel_size: The size of the kernel of the convolution\n    \"\"\"\n    height = (h_w[0] - kernel_size) // 2 + 1\n    width = (h_w[1] - kernel_size) // 2 + 1\n    return height, width",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.encoders",
        "documentation": {}
    },
    {
        "label": "Swish",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "peekOfCode": "class Swish(torch.nn.Module):\n    def forward(self, data: torch.Tensor) -> torch.Tensor:\n        return torch.mul(data, torch.sigmoid(data))\nclass Initialization(Enum):\n    Zero = 0\n    XavierGlorotNormal = 1\n    XavierGlorotUniform = 2\n    KaimingHeNormal = 3  # also known as Variance scaling\n    KaimingHeUniform = 4\n    Normal = 5",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "Initialization",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "peekOfCode": "class Initialization(Enum):\n    Zero = 0\n    XavierGlorotNormal = 1\n    XavierGlorotUniform = 2\n    KaimingHeNormal = 3  # also known as Variance scaling\n    KaimingHeUniform = 4\n    Normal = 5\n_init_methods = {\n    Initialization.Zero: torch.zero_,\n    Initialization.XavierGlorotNormal: torch.nn.init.xavier_normal_,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "MemoryModule",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "peekOfCode": "class MemoryModule(torch.nn.Module):\n    @abc.abstractproperty\n    def memory_size(self) -> int:\n        \"\"\"\n        Size of memory that is required at the start of a sequence.\n        \"\"\"\n        pass\n    @abc.abstractmethod\n    def forward(\n        self, input_tensor: torch.Tensor, memories: torch.Tensor",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "LayerNorm",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "peekOfCode": "class LayerNorm(torch.nn.Module):\n    \"\"\"\n    A vanilla implementation of layer normalization  https://arxiv.org/pdf/1607.06450.pdf\n    norm_x = (x - mean) / sqrt((x - mean) ^ 2)\n    This does not include the trainable parameters gamma and beta for performance speed.\n    Typically, this is norm_x * gamma + beta\n    \"\"\"\n    def forward(self, layer_activations: torch.Tensor) -> torch.Tensor:\n        mean = torch.mean(layer_activations, dim=-1, keepdim=True)\n        var = torch.mean((layer_activations - mean) ** 2, dim=-1, keepdim=True)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "LinearEncoder",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "peekOfCode": "class LinearEncoder(torch.nn.Module):\n    \"\"\"\n    Linear layers.\n    \"\"\"\n    def __init__(\n        self,\n        input_size: int,\n        num_layers: int,\n        hidden_size: int,\n        kernel_init: Initialization = Initialization.KaimingHeNormal,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "LSTM",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "peekOfCode": "class LSTM(MemoryModule):\n    \"\"\"\n    Memory module that implements LSTM.\n    \"\"\"\n    def __init__(\n        self,\n        input_size: int,\n        memory_size: int,\n        num_layers: int = 1,\n        forget_bias: float = 1.0,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "linear_layer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "peekOfCode": "def linear_layer(\n    input_size: int,\n    output_size: int,\n    kernel_init: Initialization = Initialization.XavierGlorotUniform,\n    kernel_gain: float = 1.0,\n    bias_init: Initialization = Initialization.Zero,\n) -> torch.nn.Module:\n    \"\"\"\n    Creates a torch.nn.Linear module and initializes its weights.\n    :param input_size: The size of the input tensor",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "lstm_layer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "peekOfCode": "def lstm_layer(\n    input_size: int,\n    hidden_size: int,\n    num_layers: int = 1,\n    batch_first: bool = True,\n    forget_bias: float = 1.0,\n    kernel_init: Initialization = Initialization.XavierGlorotUniform,\n    bias_init: Initialization = Initialization.Zero,\n) -> torch.nn.Module:\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "_init_methods",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "peekOfCode": "_init_methods = {\n    Initialization.Zero: torch.zero_,\n    Initialization.XavierGlorotNormal: torch.nn.init.xavier_normal_,\n    Initialization.XavierGlorotUniform: torch.nn.init.xavier_uniform_,\n    Initialization.KaimingHeNormal: torch.nn.init.kaiming_normal_,\n    Initialization.KaimingHeUniform: torch.nn.init.kaiming_uniform_,\n    Initialization.Normal: torch.nn.init.normal_,\n}\ndef linear_layer(\n    input_size: int,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.layers",
        "documentation": {}
    },
    {
        "label": "exporting_to_onnx",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.model_serialization",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.model_serialization",
        "peekOfCode": "class exporting_to_onnx:\n    \"\"\"\n    Set this context by calling\n    ```\n    with exporting_to_onnx():\n    ```\n    Within this context, the variable exporting_to_onnx.is_exporting() will be true.\n    This implementation is thread safe.\n    \"\"\"\n    # local is_exporting flag for each thread",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.model_serialization",
        "documentation": {}
    },
    {
        "label": "TensorNames",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.model_serialization",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.model_serialization",
        "peekOfCode": "class TensorNames:\n    batch_size_placeholder = \"batch_size\"\n    sequence_length_placeholder = \"sequence_length\"\n    vector_observation_placeholder = \"vector_observation\"\n    recurrent_in_placeholder = \"recurrent_in\"\n    visual_observation_placeholder_prefix = \"visual_observation_\"\n    observation_placeholder_prefix = \"obs_\"\n    previous_action_placeholder = \"prev_action\"\n    action_mask_placeholder = \"action_masks\"\n    random_normal_epsilon_placeholder = \"epsilon\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.model_serialization",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.model_serialization",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.model_serialization",
        "peekOfCode": "class ModelSerializer:\n    def __init__(self, policy):\n        # ONNX only support input in NCHW (channel first) format.\n        # Barracuda also expect to get data in NCHW.\n        # Any multi-dimentional input should follow that otherwise will\n        # cause problem to barracuda import.\n        self.policy = policy\n        observation_specs = self.policy.behavior_spec.observation_specs\n        batch_dim = [1]\n        seq_len_dim = [1]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.model_serialization",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.model_serialization",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.model_serialization",
        "peekOfCode": "logger = get_logger(__name__)\nclass exporting_to_onnx:\n    \"\"\"\n    Set this context by calling\n    ```\n    with exporting_to_onnx():\n    ```\n    Within this context, the variable exporting_to_onnx.is_exporting() will be true.\n    This implementation is thread safe.\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.model_serialization",
        "documentation": {}
    },
    {
        "label": "ObservationEncoder",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "peekOfCode": "class ObservationEncoder(nn.Module):\n    ATTENTION_EMBEDDING_SIZE = 128  # The embedding size of attention is fixed\n    def __init__(\n        self,\n        observation_specs: List[ObservationSpec],\n        h_size: int,\n        vis_encode_type: EncoderType,\n        normalize: bool = False,\n    ):\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "NetworkBody",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "peekOfCode": "class NetworkBody(nn.Module):\n    def __init__(\n        self,\n        observation_specs: List[ObservationSpec],\n        network_settings: NetworkSettings,\n        encoded_act_size: int = 0,\n    ):\n        super().__init__()\n        self.normalize = network_settings.normalize\n        self.use_lstm = network_settings.memory is not None",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "MultiAgentNetworkBody",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "peekOfCode": "class MultiAgentNetworkBody(torch.nn.Module):\n    \"\"\"\n    A network body that uses a self attention layer to handle state\n    and action input from a potentially variable number of agents that\n    share the same observation and action space.\n    \"\"\"\n    def __init__(\n        self,\n        observation_specs: List[ObservationSpec],\n        network_settings: NetworkSettings,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "Critic",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "peekOfCode": "class Critic(abc.ABC):\n    @abc.abstractmethod\n    def update_normalization(self, buffer: AgentBuffer) -> None:\n        \"\"\"\n        Updates normalization of Actor based on the provided List of vector obs.\n        :param vector_obs: A List of vector obs as tensors.\n        \"\"\"\n        pass\n    def critic_pass(\n        self,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "ValueNetwork",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "peekOfCode": "class ValueNetwork(nn.Module, Critic):\n    def __init__(\n        self,\n        stream_names: List[str],\n        observation_specs: List[ObservationSpec],\n        network_settings: NetworkSettings,\n        encoded_act_size: int = 0,\n        outputs_per_stream: int = 1,\n    ):\n        # This is not a typo, we want to call __init__ of nn.Module",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "Actor",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "peekOfCode": "class Actor(abc.ABC):\n    @abc.abstractmethod\n    def update_normalization(self, buffer: AgentBuffer) -> None:\n        \"\"\"\n        Updates normalization of Actor based on the provided List of vector obs.\n        :param vector_obs: A List of vector obs as tensors.\n        \"\"\"\n        pass\n    def get_action_and_stats(\n        self,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "SimpleActor",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "peekOfCode": "class SimpleActor(nn.Module, Actor):\n    MODEL_EXPORT_VERSION = 3  # Corresponds to ModelApiVersion.MLAgents2_0\n    def __init__(\n        self,\n        observation_specs: List[ObservationSpec],\n        network_settings: NetworkSettings,\n        action_spec: ActionSpec,\n        conditional_sigma: bool = False,\n        tanh_squash: bool = False,\n    ):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "SharedActorCritic",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "peekOfCode": "class SharedActorCritic(SimpleActor, Critic):\n    def __init__(\n        self,\n        observation_specs: List[ObservationSpec],\n        network_settings: NetworkSettings,\n        action_spec: ActionSpec,\n        stream_names: List[str],\n        conditional_sigma: bool = False,\n        tanh_squash: bool = False,\n    ):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "GlobalSteps",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "peekOfCode": "class GlobalSteps(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.__global_step = nn.Parameter(\n            torch.Tensor([0]).to(torch.int64), requires_grad=False\n        )\n    @property\n    def current_step(self):\n        return int(self.__global_step.item())\n    @current_step.setter",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "LearningRate",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "peekOfCode": "class LearningRate(nn.Module):\n    def __init__(self, lr):\n        # Todo: add learning rate decay\n        super().__init__()\n        self.learning_rate = torch.Tensor([lr])",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "ActivationFunction",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "peekOfCode": "ActivationFunction = Callable[[torch.Tensor], torch.Tensor]\nEncoderFunction = Callable[\n    [torch.Tensor, int, ActivationFunction, int, str, bool], torch.Tensor\n]\nEPSILON = 1e-7\nclass ObservationEncoder(nn.Module):\n    ATTENTION_EMBEDDING_SIZE = 128  # The embedding size of attention is fixed\n    def __init__(\n        self,\n        observation_specs: List[ObservationSpec],",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "EncoderFunction",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "peekOfCode": "EncoderFunction = Callable[\n    [torch.Tensor, int, ActivationFunction, int, str, bool], torch.Tensor\n]\nEPSILON = 1e-7\nclass ObservationEncoder(nn.Module):\n    ATTENTION_EMBEDDING_SIZE = 128  # The embedding size of attention is fixed\n    def __init__(\n        self,\n        observation_specs: List[ObservationSpec],\n        h_size: int,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "EPSILON",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "peekOfCode": "EPSILON = 1e-7\nclass ObservationEncoder(nn.Module):\n    ATTENTION_EMBEDDING_SIZE = 128  # The embedding size of attention is fixed\n    def __init__(\n        self,\n        observation_specs: List[ObservationSpec],\n        h_size: int,\n        vis_encode_type: EncoderType,\n        normalize: bool = False,\n    ):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.networks",
        "documentation": {}
    },
    {
        "label": "ModelUtils",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.torch.utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.torch.utils",
        "peekOfCode": "class ModelUtils:\n    # Minimum supported side for each encoder type. If refactoring an encoder, please\n    # adjust these also.\n    MIN_RESOLUTION_FOR_ENCODER = {\n        EncoderType.FULLY_CONNECTED: 1,\n        EncoderType.MATCH3: 5,\n        EncoderType.SIMPLE: 20,\n        EncoderType.NATURE_CNN: 36,\n        EncoderType.RESNET: 15,\n    }",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.torch.utils",
        "documentation": {}
    },
    {
        "label": "RLTrainer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.rl_trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.rl_trainer",
        "peekOfCode": "class RLTrainer(Trainer):\n    \"\"\"\n    This class is the base class for trainers that use Reward Signals.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # collected_rewards is a dictionary from name of reward signal to a dictionary of agent_id to cumulative reward\n        # used for reporting only. We always want to report the environment reward to Tensorboard, regardless\n        # of what reward signals are actually present.\n        self.cumulative_returns_since_policy_update: List[float] = []",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.rl_trainer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.rl_trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.rl_trainer",
        "peekOfCode": "logger = get_logger(__name__)\nclass RLTrainer(Trainer):\n    \"\"\"\n    This class is the base class for trainers that use Reward Signals.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # collected_rewards is a dictionary from name of reward signal to a dictionary of agent_id to cumulative reward\n        # used for reporting only. We always want to report the environment reward to Tensorboard, regardless\n        # of what reward signals are actually present.",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.rl_trainer",
        "documentation": {}
    },
    {
        "label": "Trainer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.trainer",
        "peekOfCode": "class Trainer(abc.ABC):\n    \"\"\"This class is the base class for the mlagents_envs.trainers\"\"\"\n    def __init__(\n        self,\n        brain_name: str,\n        trainer_settings: TrainerSettings,\n        training: bool,\n        load: bool,\n        artifact_path: str,\n        reward_buff_cap: int = 1,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.trainer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.trainer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.trainer",
        "peekOfCode": "logger = get_logger(__name__)\nclass Trainer(abc.ABC):\n    \"\"\"This class is the base class for the mlagents_envs.trainers\"\"\"\n    def __init__(\n        self,\n        brain_name: str,\n        trainer_settings: TrainerSettings,\n        training: bool,\n        load: bool,\n        artifact_path: str,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.trainer",
        "documentation": {}
    },
    {
        "label": "TrainerFactory",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.trainer_factory",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.trainer_factory",
        "peekOfCode": "class TrainerFactory:\n    def __init__(\n        self,\n        trainer_config: Dict[str, TrainerSettings],\n        output_path: str,\n        train_model: bool,\n        load_model: bool,\n        seed: int,\n        param_manager: EnvironmentParameterManager,\n        init_path: str = None,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.trainer_factory",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.trainer_factory",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.trainer_factory",
        "peekOfCode": "logger = get_logger(__name__)\nclass TrainerFactory:\n    def __init__(\n        self,\n        trainer_config: Dict[str, TrainerSettings],\n        output_path: str,\n        train_model: bool,\n        load_model: bool,\n        seed: int,\n        param_manager: EnvironmentParameterManager,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.trainer.trainer_factory",
        "documentation": {}
    },
    {
        "label": "ActionInfo",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.action_info",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.action_info",
        "peekOfCode": "class ActionInfo(NamedTuple):\n    \"\"\"\n    A NamedTuple containing actions and related quantities to the policy forward\n    pass. Additionally contains the agent ids in the corresponding DecisionStep\n    :param action: The action output of the policy\n    :param env_action: The possibly clipped action to be executed in the environment\n    :param outputs: Dict of all quantities associated with the policy forward pass\n    :param agent_ids: List of int agent ids in DecisionStep\n    \"\"\"\n    action: Any",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.action_info",
        "documentation": {}
    },
    {
        "label": "ActionInfoOutputs",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.action_info",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.action_info",
        "peekOfCode": "ActionInfoOutputs = Dict[str, np.ndarray]\nclass ActionInfo(NamedTuple):\n    \"\"\"\n    A NamedTuple containing actions and related quantities to the policy forward\n    pass. Additionally contains the agent ids in the corresponding DecisionStep\n    :param action: The action output of the policy\n    :param env_action: The possibly clipped action to be executed in the environment\n    :param outputs: Dict of all quantities associated with the policy forward pass\n    :param agent_ids: List of int agent ids in DecisionStep\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.action_info",
        "documentation": {}
    },
    {
        "label": "AgentProcessor",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.agent_processor",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.agent_processor",
        "peekOfCode": "class AgentProcessor:\n    \"\"\"\n    AgentProcessor contains a dictionary per-agent trajectory buffers. The buffers are indexed by agent_id.\n    Buffer also contains an update_buffer that corresponds to the buffer used when updating the model.\n    One AgentProcessor should be created per agent group.\n    \"\"\"\n    def __init__(\n        self,\n        policy: Policy,\n        behavior_id: str,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManagerQueue",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.agent_processor",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.agent_processor",
        "peekOfCode": "class AgentManagerQueue(Generic[T]):\n    \"\"\"\n    Queue used by the AgentManager. Note that we make our own class here because in most implementations\n    deque is sufficient and faster. However, if we want to switch to multiprocessing, we'll need to change\n    out this implementation.\n    \"\"\"\n    class Empty(Exception):\n        \"\"\"\n        Exception for when the queue is empty.\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "AgentManager",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.agent_processor",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.agent_processor",
        "peekOfCode": "class AgentManager(AgentProcessor):\n    \"\"\"\n    An AgentManager is an AgentProcessor that also holds a single trajectory and policy queue.\n    Note: this leaves room for adding AgentProcessors that publish multiple trajectory queues.\n    \"\"\"\n    def __init__(\n        self,\n        policy: Policy,\n        behavior_id: str,\n        stats_reporter: StatsReporter,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.agent_processor",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.agent_processor",
        "peekOfCode": "T = TypeVar(\"T\")\nclass AgentProcessor:\n    \"\"\"\n    AgentProcessor contains a dictionary per-agent trajectory buffers. The buffers are indexed by agent_id.\n    Buffer also contains an update_buffer that corresponds to the buffer used when updating the model.\n    One AgentProcessor should be created per agent group.\n    \"\"\"\n    def __init__(\n        self,\n        policy: Policy,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.agent_processor",
        "documentation": {}
    },
    {
        "label": "BehaviorIdentifiers",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "peekOfCode": "class BehaviorIdentifiers(NamedTuple):\n    \"\"\"\n    BehaviorIdentifiers is a named tuple of the identifiers that uniquely distinguish\n    an agent encountered in the trainer_controller. The named tuple consists of the\n    fully qualified behavior name, the name of the brain name (corresponds to trainer\n    in the trainer controller) and the team id.  In the future, this can be extended\n    to support further identifiers.\n    \"\"\"\n    behavior_id: str\n    brain_name: str",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "create_name_behavior_id",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "peekOfCode": "def create_name_behavior_id(name: str, team_id: int) -> str:\n    \"\"\"\n   Reconstructs fully qualified behavior name from name and team_id\n   :param name: brain name\n   :param team_id: team ID\n   :return: name_behavior_id\n   \"\"\"\n    return name + \"?team=\" + str(team_id)\ndef get_global_agent_id(worker_id: int, agent_id: AgentId) -> GlobalAgentId:\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "get_global_agent_id",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "peekOfCode": "def get_global_agent_id(worker_id: int, agent_id: AgentId) -> GlobalAgentId:\n    \"\"\"\n    Create an agent id that is unique across environment workers using the worker_id.\n    \"\"\"\n    return f\"agent_{worker_id}-{agent_id}\"\ndef get_global_group_id(worker_id: int, group_id: GroupId) -> GlobalGroupId:\n    \"\"\"\n    Create a group id that is unique across environment workers when using the worker_id.\n    \"\"\"\n    return f\"group_{worker_id}-{group_id}\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "get_global_group_id",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "peekOfCode": "def get_global_group_id(worker_id: int, group_id: GroupId) -> GlobalGroupId:\n    \"\"\"\n    Create a group id that is unique across environment workers when using the worker_id.\n    \"\"\"\n    return f\"group_{worker_id}-{group_id}\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "GlobalGroupId",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "peekOfCode": "GlobalGroupId = str\nGlobalAgentId = str\nclass BehaviorIdentifiers(NamedTuple):\n    \"\"\"\n    BehaviorIdentifiers is a named tuple of the identifiers that uniquely distinguish\n    an agent encountered in the trainer_controller. The named tuple consists of the\n    fully qualified behavior name, the name of the brain name (corresponds to trainer\n    in the trainer controller) and the team id.  In the future, this can be extended\n    to support further identifiers.\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "GlobalAgentId",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "peekOfCode": "GlobalAgentId = str\nclass BehaviorIdentifiers(NamedTuple):\n    \"\"\"\n    BehaviorIdentifiers is a named tuple of the identifiers that uniquely distinguish\n    an agent encountered in the trainer_controller. The named tuple consists of the\n    fully qualified behavior name, the name of the brain name (corresponds to trainer\n    in the trainer controller) and the team id.  In the future, this can be extended\n    to support further identifiers.\n    \"\"\"\n    behavior_id: str",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.behavior_id_utils",
        "documentation": {}
    },
    {
        "label": "BufferException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "peekOfCode": "class BufferException(UnityException):\n    \"\"\"\n    Related to errors with the Buffer.\n    \"\"\"\n    pass\nclass BufferKey(enum.Enum):\n    ACTION_MASK = \"action_mask\"\n    CONTINUOUS_ACTION = \"continuous_action\"\n    NEXT_CONT_ACTION = \"next_continuous_action\"\n    CONTINUOUS_LOG_PROBS = \"continuous_log_probs\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferKey",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "peekOfCode": "class BufferKey(enum.Enum):\n    ACTION_MASK = \"action_mask\"\n    CONTINUOUS_ACTION = \"continuous_action\"\n    NEXT_CONT_ACTION = \"next_continuous_action\"\n    CONTINUOUS_LOG_PROBS = \"continuous_log_probs\"\n    DISCRETE_ACTION = \"discrete_action\"\n    NEXT_DISC_ACTION = \"next_discrete_action\"\n    DISCRETE_LOG_PROBS = \"discrete_log_probs\"\n    DONE = \"done\"\n    ENVIRONMENT_REWARDS = \"environment_rewards\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "ObservationKeyPrefix",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "peekOfCode": "class ObservationKeyPrefix(enum.Enum):\n    OBSERVATION = \"obs\"\n    NEXT_OBSERVATION = \"next_obs\"\n    GROUP_OBSERVATION = \"group_obs\"\n    NEXT_GROUP_OBSERVATION = \"next_group_obs\"\nclass RewardSignalKeyPrefix(enum.Enum):\n    # Reward signals\n    REWARDS = \"rewards\"\n    VALUE_ESTIMATES = \"value_estimates\"\n    RETURNS = \"returns\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RewardSignalKeyPrefix",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "peekOfCode": "class RewardSignalKeyPrefix(enum.Enum):\n    # Reward signals\n    REWARDS = \"rewards\"\n    VALUE_ESTIMATES = \"value_estimates\"\n    RETURNS = \"returns\"\n    ADVANTAGE = \"advantage\"\n    BASELINES = \"baselines\"\nAgentBufferKey = Union[\n    BufferKey, Tuple[ObservationKeyPrefix, int], Tuple[RewardSignalKeyPrefix, str]\n]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RewardSignalUtil",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "peekOfCode": "class RewardSignalUtil:\n    @staticmethod\n    def rewards_key(name: str) -> AgentBufferKey:\n        return RewardSignalKeyPrefix.REWARDS, name\n    @staticmethod\n    def value_estimates_key(name: str) -> AgentBufferKey:\n        return RewardSignalKeyPrefix.RETURNS, name\n    @staticmethod\n    def returns_key(name: str) -> AgentBufferKey:\n        return RewardSignalKeyPrefix.RETURNS, name",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBufferField",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "peekOfCode": "class AgentBufferField(list):\n    \"\"\"\n    AgentBufferField is a list of numpy arrays, or List[np.ndarray] for group entries.\n    When an agent collects a field, you can add it to its AgentBufferField with the append method.\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        self.padding_value = 0\n        super().__init__(*args, **kwargs)\n    def __str__(self) -> str:\n        return f\"AgentBufferField: {super().__str__()}\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBuffer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "peekOfCode": "class AgentBuffer(MutableMapping):\n    \"\"\"\n    AgentBuffer contains a dictionary of AgentBufferFields. Each agent has his own AgentBuffer.\n    The keys correspond to the name of the field. Example: state, action\n    \"\"\"\n    # Whether or not to validate the types of keys at runtime\n    # This should be off for training, but enabled for testing\n    CHECK_KEY_TYPES_AT_RUNTIME = False\n    def __init__(self):\n        self.last_brain_info = None",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "BufferEntry",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "peekOfCode": "BufferEntry = Union[np.ndarray, List[np.ndarray]]\nclass BufferException(UnityException):\n    \"\"\"\n    Related to errors with the Buffer.\n    \"\"\"\n    pass\nclass BufferKey(enum.Enum):\n    ACTION_MASK = \"action_mask\"\n    CONTINUOUS_ACTION = \"continuous_action\"\n    NEXT_CONT_ACTION = \"next_continuous_action\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "AgentBufferKey",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "peekOfCode": "AgentBufferKey = Union[\n    BufferKey, Tuple[ObservationKeyPrefix, int], Tuple[RewardSignalKeyPrefix, str]\n]\nclass RewardSignalUtil:\n    @staticmethod\n    def rewards_key(name: str) -> AgentBufferKey:\n        return RewardSignalKeyPrefix.REWARDS, name\n    @staticmethod\n    def value_estimates_key(name: str) -> AgentBufferKey:\n        return RewardSignalKeyPrefix.RETURNS, name",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.buffer",
        "documentation": {}
    },
    {
        "label": "RaiseRemovedWarning",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "peekOfCode": "class RaiseRemovedWarning(argparse.Action):\n    \"\"\"\n    Internal custom Action to raise warning when argument is called.\n    \"\"\"\n    def __init__(self, nargs=0, **kwargs):\n        super().__init__(nargs=nargs, **kwargs)\n    def __call__(self, arg_parser, namespace, values, option_string=None):\n        logger.warning(f\"The command line argument {option_string} was removed.\")\nclass DetectDefault(argparse.Action):\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "DetectDefault",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "peekOfCode": "class DetectDefault(argparse.Action):\n    \"\"\"\n    Internal custom Action to help detect arguments that aren't default.\n    \"\"\"\n    non_default_args: Set[str] = set()\n    def __call__(self, arg_parser, namespace, values, option_string=None):\n        setattr(namespace, self.dest, values)\n        DetectDefault.non_default_args.add(self.dest)\nclass DetectDefaultStoreTrue(DetectDefault):\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "DetectDefaultStoreTrue",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "peekOfCode": "class DetectDefaultStoreTrue(DetectDefault):\n    \"\"\"\n    Internal class to help detect arguments that aren't default.\n    Used for store_true arguments.\n    \"\"\"\n    def __init__(self, nargs=0, **kwargs):\n        super().__init__(nargs=nargs, **kwargs)\n    def __call__(self, arg_parser, namespace, values, option_string=None):\n        super().__call__(arg_parser, namespace, True, option_string)\nclass StoreConfigFile(argparse.Action):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "StoreConfigFile",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "peekOfCode": "class StoreConfigFile(argparse.Action):\n    \"\"\"\n    Custom Action to store the config file location not as part of the CLI args.\n    This is because we want to maintain an equivalence between the config file's\n    contents and the args themselves.\n    \"\"\"\n    trainer_config_path: str\n    def __call__(self, arg_parser, namespace, values, option_string=None):\n        delattr(namespace, self.dest)\n        StoreConfigFile.trainer_config_path = values",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "load_config",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "peekOfCode": "def load_config(config_path: str) -> Dict[str, Any]:\n    try:\n        with open(config_path) as data_file:\n            return _load_config(data_file)\n    except OSError:\n        abs_path = os.path.abspath(config_path)\n        raise TrainerConfigError(f\"Config file could not be found at {abs_path}.\")\n    except UnicodeDecodeError:\n        raise TrainerConfigError(\n            f\"There was an error decoding Config file from {config_path}. \"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "peekOfCode": "logger = logging_util.get_logger(__name__)\nclass RaiseRemovedWarning(argparse.Action):\n    \"\"\"\n    Internal custom Action to raise warning when argument is called.\n    \"\"\"\n    def __init__(self, nargs=0, **kwargs):\n        super().__init__(nargs=nargs, **kwargs)\n    def __call__(self, arg_parser, namespace, values, option_string=None):\n        logger.warning(f\"The command line argument {option_string} was removed.\")\nclass DetectDefault(argparse.Action):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "peekOfCode": "parser = _create_parser()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.cli_utils",
        "documentation": {}
    },
    {
        "label": "make_demo_buffer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "peekOfCode": "def make_demo_buffer(\n    pair_infos: List[AgentInfoActionPairProto],\n    behavior_spec: BehaviorSpec,\n    sequence_length: int,\n) -> AgentBuffer:\n    # Create and populate buffer using experiences\n    demo_raw_buffer = AgentBuffer()\n    demo_processed_buffer = AgentBuffer()\n    for idx, current_pair_info in enumerate(pair_infos):\n        if idx > len(pair_infos) - 2:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "demo_to_buffer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "peekOfCode": "def demo_to_buffer(\n    file_path: str, sequence_length: int, expected_behavior_spec: BehaviorSpec = None\n) -> Tuple[BehaviorSpec, AgentBuffer]:\n    \"\"\"\n    Loads demonstration file and uses it to fill training buffer.\n    :param file_path: Location of demonstration file (.demo).\n    :param sequence_length: Length of trajectories to fill buffer.\n    :return:\n    \"\"\"\n    behavior_spec, info_action_pair, _ = load_demonstration(file_path)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "get_demo_files",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "peekOfCode": "def get_demo_files(path: str) -> List[str]:\n    \"\"\"\n    Retrieves the demonstration file(s) from a path.\n    :param path: Path of demonstration file or directory.\n    :return: List of demonstration files\n    Raises errors if |path| is invalid.\n    \"\"\"\n    if os.path.isfile(path):\n        if not path.endswith(\".demo\"):\n            raise ValueError(\"The path provided is not a '.demo' file.\")",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "load_demonstration",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "peekOfCode": "def load_demonstration(\n    file_path: str,\n) -> Tuple[BehaviorSpec, List[AgentInfoActionPairProto], int]:\n    \"\"\"\n    Loads and parses a demonstration file.\n    :param file_path: Location of demonstration file (.demo).\n    :return: BrainParameter and list of AgentInfoActionPairProto containing demonstration data.\n    \"\"\"\n    # First 32 bytes of file dedicated to meta-data.\n    file_paths = get_demo_files(file_path)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "write_delimited",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "peekOfCode": "def write_delimited(f, message):\n    msg_string = message.SerializeToString()\n    msg_size = len(msg_string)\n    _EncodeVarint(f.write, msg_size)\n    f.write(msg_string)\ndef write_demo(demo_path, meta_data_proto, brain_param_proto, agent_info_protos):\n    with open(demo_path, \"wb\") as f:\n        # write metadata\n        write_delimited(f, meta_data_proto)\n        f.seek(INITIAL_POS)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "write_demo",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "peekOfCode": "def write_demo(demo_path, meta_data_proto, brain_param_proto, agent_info_protos):\n    with open(demo_path, \"wb\") as f:\n        # write metadata\n        write_delimited(f, meta_data_proto)\n        f.seek(INITIAL_POS)\n        write_delimited(f, brain_param_proto)\n        for agent in agent_info_protos:\n            write_delimited(f, agent)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "INITIAL_POS",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "peekOfCode": "INITIAL_POS = 33\nSUPPORTED_DEMONSTRATION_VERSIONS = frozenset([0, 1])\n@timed\ndef make_demo_buffer(\n    pair_infos: List[AgentInfoActionPairProto],\n    behavior_spec: BehaviorSpec,\n    sequence_length: int,\n) -> AgentBuffer:\n    # Create and populate buffer using experiences\n    demo_raw_buffer = AgentBuffer()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_DEMONSTRATION_VERSIONS",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "peekOfCode": "SUPPORTED_DEMONSTRATION_VERSIONS = frozenset([0, 1])\n@timed\ndef make_demo_buffer(\n    pair_infos: List[AgentInfoActionPairProto],\n    behavior_spec: BehaviorSpec,\n    sequence_length: int,\n) -> AgentBuffer:\n    # Create and populate buffer using experiences\n    demo_raw_buffer = AgentBuffer()\n    demo_processed_buffer = AgentBuffer()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.demo_loader",
        "documentation": {}
    },
    {
        "label": "validate_existing_directories",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.directory_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.directory_utils",
        "peekOfCode": "def validate_existing_directories(\n    output_path: str, resume: bool, force: bool, init_path: str = None\n) -> None:\n    \"\"\"\n    Validates that if the run_id model exists, we do not overwrite it unless --force is specified.\n    Throws an exception if resume isn't specified and run_id exists. Throws an exception\n    if --resume is specified and run-id was not found.\n    :param model_path: The model path specified.\n    :param summary_path: The summary path to be used.\n    :param resume: Whether or not the --resume flag was passed.",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.directory_utils",
        "documentation": {}
    },
    {
        "label": "setup_init_path",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.directory_utils",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.directory_utils",
        "peekOfCode": "def setup_init_path(\n    behaviors: TrainerSettings.DefaultTrainerDict, init_dir: str\n) -> None:\n    \"\"\"\n    For each behavior, setup full init_path to checkpoint file to initialize policy from\n    :param behaviors: mapping from behavior_name to TrainerSettings\n    :param init_dir: Path to run-id dir to initialize from\n    \"\"\"\n    for behavior_name, ts in behaviors.items():\n        if ts.init_path is None:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.directory_utils",
        "documentation": {}
    },
    {
        "label": "EnvironmentStep",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "peekOfCode": "class EnvironmentStep(NamedTuple):\n    current_all_step_result: AllStepResult\n    worker_id: int\n    brain_name_to_action_info: Dict[BehaviorName, ActionInfo]\n    environment_stats: EnvironmentStats\n    @property\n    def name_behavior_ids(self) -> Iterable[BehaviorName]:\n        return self.current_all_step_result.keys()\n    @staticmethod\n    def empty(worker_id: int) -> \"EnvironmentStep\":",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "EnvManager",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "peekOfCode": "class EnvManager(ABC):\n    def __init__(self):\n        self.policies: Dict[BehaviorName, Policy] = {}\n        self.agent_managers: Dict[BehaviorName, AgentManager] = {}\n        self.first_step_infos: List[EnvironmentStep] = []\n    def set_policy(self, brain_name: BehaviorName, policy: Policy) -> None:\n        self.policies[brain_name] = policy\n        if brain_name in self.agent_managers:\n            self.agent_managers[brain_name].policy = policy\n    def set_agent_manager(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "AllStepResult",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "peekOfCode": "AllStepResult = Dict[BehaviorName, Tuple[DecisionSteps, TerminalSteps]]\nAllGroupSpec = Dict[BehaviorName, BehaviorSpec]\nlogger = get_logger(__name__)\nclass EnvironmentStep(NamedTuple):\n    current_all_step_result: AllStepResult\n    worker_id: int\n    brain_name_to_action_info: Dict[BehaviorName, ActionInfo]\n    environment_stats: EnvironmentStats\n    @property\n    def name_behavior_ids(self) -> Iterable[BehaviorName]:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "AllGroupSpec",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "peekOfCode": "AllGroupSpec = Dict[BehaviorName, BehaviorSpec]\nlogger = get_logger(__name__)\nclass EnvironmentStep(NamedTuple):\n    current_all_step_result: AllStepResult\n    worker_id: int\n    brain_name_to_action_info: Dict[BehaviorName, ActionInfo]\n    environment_stats: EnvironmentStats\n    @property\n    def name_behavior_ids(self) -> Iterable[BehaviorName]:\n        return self.current_all_step_result.keys()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "peekOfCode": "logger = get_logger(__name__)\nclass EnvironmentStep(NamedTuple):\n    current_all_step_result: AllStepResult\n    worker_id: int\n    brain_name_to_action_info: Dict[BehaviorName, ActionInfo]\n    environment_stats: EnvironmentStats\n    @property\n    def name_behavior_ids(self) -> Iterable[BehaviorName]:\n        return self.current_all_step_result.keys()\n    @staticmethod",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.env_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentParameterManager",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.environment_parameter_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.environment_parameter_manager",
        "peekOfCode": "class EnvironmentParameterManager:\n    def __init__(\n        self,\n        settings: Optional[Dict[str, EnvironmentParameterSettings]] = None,\n        run_seed: int = -1,\n        restore: bool = False,\n    ):\n        \"\"\"\n        EnvironmentParameterManager manages all the environment parameters of a training\n        session. It determines when parameters should change and gives access to the",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.environment_parameter_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.environment_parameter_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.environment_parameter_manager",
        "peekOfCode": "logger = get_logger(__name__)\nclass EnvironmentParameterManager:\n    def __init__(\n        self,\n        settings: Optional[Dict[str, EnvironmentParameterSettings]] = None,\n        run_seed: int = -1,\n        restore: bool = False,\n    ):\n        \"\"\"\n        EnvironmentParameterManager manages all the environment parameters of a training",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.environment_parameter_manager",
        "documentation": {}
    },
    {
        "label": "TrainerError",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "peekOfCode": "class TrainerError(Exception):\n    \"\"\"\n    Any error related to the trainers in the ML-Agents Toolkit.\n    \"\"\"\n    pass\nclass TrainerConfigError(Exception):\n    \"\"\"\n    Any error related to the configuration of trainers in the ML-Agents Toolkit.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "TrainerConfigError",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "peekOfCode": "class TrainerConfigError(Exception):\n    \"\"\"\n    Any error related to the configuration of trainers in the ML-Agents Toolkit.\n    \"\"\"\n    pass\nclass TrainerConfigWarning(Warning):\n    \"\"\"\n    Any warning related to the configuration of trainers in the ML-Agents Toolkit.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "TrainerConfigWarning",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "peekOfCode": "class TrainerConfigWarning(Warning):\n    \"\"\"\n    Any warning related to the configuration of trainers in the ML-Agents Toolkit.\n    \"\"\"\n    pass\nclass CurriculumError(TrainerError):\n    \"\"\"\n    Any error related to training with a curriculum.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "CurriculumError",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "peekOfCode": "class CurriculumError(TrainerError):\n    \"\"\"\n    Any error related to training with a curriculum.\n    \"\"\"\n    pass\nclass CurriculumLoadingError(CurriculumError):\n    \"\"\"\n    Any error related to loading the Curriculum config file.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "CurriculumLoadingError",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "peekOfCode": "class CurriculumLoadingError(CurriculumError):\n    \"\"\"\n    Any error related to loading the Curriculum config file.\n    \"\"\"\n    pass\nclass CurriculumConfigError(CurriculumError):\n    \"\"\"\n    Any error related to processing the Curriculum config file.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "CurriculumConfigError",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "peekOfCode": "class CurriculumConfigError(CurriculumError):\n    \"\"\"\n    Any error related to processing the Curriculum config file.\n    \"\"\"\n    pass\nclass MetaCurriculumError(TrainerError):\n    \"\"\"\n    Any error related to the configuration of a metacurriculum.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "MetaCurriculumError",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "peekOfCode": "class MetaCurriculumError(TrainerError):\n    \"\"\"\n    Any error related to the configuration of a metacurriculum.\n    \"\"\"\n    pass\nclass SamplerException(TrainerError):\n    \"\"\"\n    Related to errors with the sampler actions.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "SamplerException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "peekOfCode": "class SamplerException(TrainerError):\n    \"\"\"\n    Related to errors with the sampler actions.\n    \"\"\"\n    pass\nclass UnityTrainerException(TrainerError):\n    \"\"\"\n    Related to errors with the Trainer.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "UnityTrainerException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "peekOfCode": "class UnityTrainerException(TrainerError):\n    \"\"\"\n    Related to errors with the Trainer.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.exception",
        "documentation": {}
    },
    {
        "label": "get_version_string",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "peekOfCode": "def get_version_string() -> str:\n    return f\"\"\" Version information:\n  ml-agents: {mlagents.trainers.__version__},\n  ml-agents-envs: {mlagents_envs.__version__},\n  Communicator API: {UnityEnvironment.API_VERSION},\n  PyTorch: {torch_utils.torch.__version__}\"\"\"\ndef parse_command_line(argv: Optional[List[str]] = None) -> RunOptions:\n    args = parser.parse_args(argv)\n    return RunOptions.from_argparse(args)\ndef run_training(run_seed: int, options: RunOptions, num_areas: int) -> None:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "documentation": {}
    },
    {
        "label": "parse_command_line",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "peekOfCode": "def parse_command_line(argv: Optional[List[str]] = None) -> RunOptions:\n    args = parser.parse_args(argv)\n    return RunOptions.from_argparse(args)\ndef run_training(run_seed: int, options: RunOptions, num_areas: int) -> None:\n    \"\"\"\n    Launches training session.\n    :param run_seed: Random seed used for training.\n    :param num_areas: Number of training areas to instantiate\n    :param options: parsed command line arguments\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "documentation": {}
    },
    {
        "label": "run_training",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "peekOfCode": "def run_training(run_seed: int, options: RunOptions, num_areas: int) -> None:\n    \"\"\"\n    Launches training session.\n    :param run_seed: Random seed used for training.\n    :param num_areas: Number of training areas to instantiate\n    :param options: parsed command line arguments\n    \"\"\"\n    with hierarchical_timer(\"run_training.setup\"):\n        torch_utils.set_torch_config(options.torch_settings)\n        checkpoint_settings = options.checkpoint_settings",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "documentation": {}
    },
    {
        "label": "write_run_options",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "peekOfCode": "def write_run_options(output_dir: str, run_options: RunOptions) -> None:\n    run_options_path = os.path.join(output_dir, \"configuration.yaml\")\n    try:\n        with open(run_options_path, \"w\") as f:\n            try:\n                yaml.dump(run_options.as_dict(), f, sort_keys=False)\n            except TypeError:  # Older versions of pyyaml don't support sort_keys\n                yaml.dump(run_options.as_dict(), f)\n    except FileNotFoundError:\n        logger.warning(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "documentation": {}
    },
    {
        "label": "write_training_status",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "peekOfCode": "def write_training_status(output_dir: str) -> None:\n    GlobalTrainingStatus.save_state(os.path.join(output_dir, TRAINING_STATUS_FILE_NAME))\ndef write_timing_tree(output_dir: str) -> None:\n    timing_path = os.path.join(output_dir, \"timers.json\")\n    try:\n        with open(timing_path, \"w\") as f:\n            json.dump(get_timer_tree(), f, indent=4)\n    except FileNotFoundError:\n        logger.warning(\n            f\"Unable to save to {timing_path}. Make sure the directory exists\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "documentation": {}
    },
    {
        "label": "write_timing_tree",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "peekOfCode": "def write_timing_tree(output_dir: str) -> None:\n    timing_path = os.path.join(output_dir, \"timers.json\")\n    try:\n        with open(timing_path, \"w\") as f:\n            json.dump(get_timer_tree(), f, indent=4)\n    except FileNotFoundError:\n        logger.warning(\n            f\"Unable to save to {timing_path}. Make sure the directory exists\"\n        )\ndef create_environment_factory(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "documentation": {}
    },
    {
        "label": "create_environment_factory",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "peekOfCode": "def create_environment_factory(\n    env_path: Optional[str],\n    no_graphics: bool,\n    seed: int,\n    num_areas: int,\n    start_port: Optional[int],\n    env_args: Optional[List[str]],\n    log_folder: str,\n) -> Callable[[int, List[SideChannel]], BaseEnv]:\n    def create_unity_environment(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "documentation": {}
    },
    {
        "label": "run_cli",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "peekOfCode": "def run_cli(options: RunOptions) -> None:\n    try:\n        print(\n            \"\"\"\n            ┐  ╖\n        ╓╖╬│╡  ││╬╖╖\n    ╓╖╬│││││┘  ╬│││││╬╖\n ╖╬│││││╬╜        ╙╬│││││╖╖                               ╗╗╗\n ╬╬╬╬╖││╦╖        ╖╬││╗╣╣╣╬      ╟╣╣╬    ╟╣╣╣             ╜╜╜  ╟╣╣\n ╬╬╬╬╬╬╬╬╖│╬╖╖╓╬╪│╓╣╣╣╣╣╣╣╬      ╟╣╣╬    ╟╣╣╣ ╒╣╣╖╗╣╣╣╗   ╣╣╣ ╣╣╣╣╣╣ ╟╣╣╖   ╣╣╣",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "peekOfCode": "def main():\n    run_cli(parse_command_line())\n# For python debugger to directly run this script\nif __name__ == \"__main__\":\n    main()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "peekOfCode": "logger = logging_util.get_logger(__name__)\nTRAINING_STATUS_FILE_NAME = \"training_status.json\"\ndef get_version_string() -> str:\n    return f\"\"\" Version information:\n  ml-agents: {mlagents.trainers.__version__},\n  ml-agents-envs: {mlagents_envs.__version__},\n  Communicator API: {UnityEnvironment.API_VERSION},\n  PyTorch: {torch_utils.torch.__version__}\"\"\"\ndef parse_command_line(argv: Optional[List[str]] = None) -> RunOptions:\n    args = parser.parse_args(argv)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "documentation": {}
    },
    {
        "label": "TRAINING_STATUS_FILE_NAME",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "peekOfCode": "TRAINING_STATUS_FILE_NAME = \"training_status.json\"\ndef get_version_string() -> str:\n    return f\"\"\" Version information:\n  ml-agents: {mlagents.trainers.__version__},\n  ml-agents-envs: {mlagents_envs.__version__},\n  Communicator API: {UnityEnvironment.API_VERSION},\n  PyTorch: {torch_utils.torch.__version__}\"\"\"\ndef parse_command_line(argv: Optional[List[str]] = None) -> RunOptions:\n    args = parser.parse_args(argv)\n    return RunOptions.from_argparse(args)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.learn",
        "documentation": {}
    },
    {
        "label": "parse_command_line",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.run_experiment",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.run_experiment",
        "peekOfCode": "def parse_command_line(argv: Optional[List[str]] = None) -> argparse.Namespace:\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\"experiment_config_path\")\n    return parser.parse_args(argv)\ndef main():\n    \"\"\"\n    Provides an alternative CLI interface to mlagents-learn, 'mlagents-run-experiment'.\n    Accepts a JSON/YAML formatted mlagents.trainers.learn.RunOptions object, and executes",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.run_experiment",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.run_experiment",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.run_experiment",
        "peekOfCode": "def main():\n    \"\"\"\n    Provides an alternative CLI interface to mlagents-learn, 'mlagents-run-experiment'.\n    Accepts a JSON/YAML formatted mlagents.trainers.learn.RunOptions object, and executes\n    the run loop as defined in mlagents.trainers.learn.run_cli.\n    \"\"\"\n    args = parse_command_line()\n    expt_config = load_config(args.experiment_config_path)\n    run_cli(RunOptions.from_dict(expt_config))\nif __name__ == \"__main__\":",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.run_experiment",
        "documentation": {}
    },
    {
        "label": "TrainerType",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class TrainerType(Enum):\n    PPO: str = \"ppo\"\n    SAC: str = \"sac\"\n    POCA: str = \"poca\"\n    def to_settings(self) -> type:\n        _mapping = {\n            TrainerType.PPO: PPOSettings,\n            TrainerType.SAC: SACSettings,\n            TrainerType.POCA: POCASettings,\n        }",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SerializationSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class SerializationSettings:\n    convert_to_onnx = True\n    onnx_opset = 9\n@attr.s(auto_attribs=True)\nclass ExportableSettings:\n    def as_dict(self):\n        return cattr.unstructure(self)\nclass EncoderType(Enum):\n    FULLY_CONNECTED = \"fully_connected\"\n    MATCH3 = \"match3\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ExportableSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class ExportableSettings:\n    def as_dict(self):\n        return cattr.unstructure(self)\nclass EncoderType(Enum):\n    FULLY_CONNECTED = \"fully_connected\"\n    MATCH3 = \"match3\"\n    SIMPLE = \"simple\"\n    NATURE_CNN = \"nature_cnn\"\n    RESNET = \"resnet\"\nclass ScheduleType(Enum):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "EncoderType",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class EncoderType(Enum):\n    FULLY_CONNECTED = \"fully_connected\"\n    MATCH3 = \"match3\"\n    SIMPLE = \"simple\"\n    NATURE_CNN = \"nature_cnn\"\n    RESNET = \"resnet\"\nclass ScheduleType(Enum):\n    CONSTANT = \"constant\"\n    LINEAR = \"linear\"\n    # TODO add support for lesson based scheduling",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ScheduleType",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class ScheduleType(Enum):\n    CONSTANT = \"constant\"\n    LINEAR = \"linear\"\n    # TODO add support for lesson based scheduling\n    # LESSON = \"lesson\"\nclass ConditioningType(Enum):\n    HYPER = \"hyper\"\n    NONE = \"none\"\n@attr.s(auto_attribs=True)\nclass NetworkSettings:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ConditioningType",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class ConditioningType(Enum):\n    HYPER = \"hyper\"\n    NONE = \"none\"\n@attr.s(auto_attribs=True)\nclass NetworkSettings:\n    @attr.s\n    class MemorySettings:\n        sequence_length: int = attr.ib(default=64)\n        memory_size: int = attr.ib(default=128)\n        @memory_size.validator",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "NetworkSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class NetworkSettings:\n    @attr.s\n    class MemorySettings:\n        sequence_length: int = attr.ib(default=64)\n        memory_size: int = attr.ib(default=128)\n        @memory_size.validator\n        def _check_valid_memory_size(self, attribute, value):\n            if value <= 0:\n                raise TrainerConfigError(\n                    \"When using a recurrent network, memory size must be greater than 0.\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "BehavioralCloningSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class BehavioralCloningSettings:\n    demo_path: str\n    steps: int = 0\n    strength: float = 1.0\n    samples_per_update: int = 0\n    # Setting either of these to None will allow the Optimizer\n    # to decide these parameters, based on Trainer hyperparams\n    num_epoch: Optional[int] = None\n    batch_size: Optional[int] = None\n@attr.s(auto_attribs=True)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "HyperparamSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class HyperparamSettings:\n    batch_size: int = 1024\n    buffer_size: int = 10240\n    learning_rate: float = 3.0e-4\n    learning_rate_schedule: ScheduleType = ScheduleType.CONSTANT\n@attr.s(auto_attribs=True)\nclass PPOSettings(HyperparamSettings):\n    beta: float = 5.0e-3\n    epsilon: float = 0.2\n    lambd: float = 0.95",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "PPOSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class PPOSettings(HyperparamSettings):\n    beta: float = 5.0e-3\n    epsilon: float = 0.2\n    lambd: float = 0.95\n    num_epoch: int = 3\n    learning_rate_schedule: ScheduleType = ScheduleType.LINEAR\n    beta_schedule: ScheduleType = ScheduleType.LINEAR\n    epsilon_schedule: ScheduleType = ScheduleType.LINEAR\n@attr.s(auto_attribs=True)\nclass SACSettings(HyperparamSettings):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SACSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class SACSettings(HyperparamSettings):\n    batch_size: int = 128\n    buffer_size: int = 50000\n    buffer_init_steps: int = 0\n    tau: float = 0.005\n    steps_per_update: float = 1\n    save_replay_buffer: bool = False\n    init_entcoef: float = 1.0\n    reward_signal_steps_per_update: float = attr.ib()\n    @reward_signal_steps_per_update.default",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalType",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class RewardSignalType(Enum):\n    EXTRINSIC: str = \"extrinsic\"\n    GAIL: str = \"gail\"\n    CURIOSITY: str = \"curiosity\"\n    RND: str = \"rnd\"\n    def to_settings(self) -> type:\n        _mapping = {\n            RewardSignalType.EXTRINSIC: RewardSignalSettings,\n            RewardSignalType.GAIL: GAILSettings,\n            RewardSignalType.CURIOSITY: CuriositySettings,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RewardSignalSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class RewardSignalSettings:\n    gamma: float = 0.99\n    strength: float = 1.0\n    network_settings: NetworkSettings = attr.ib(factory=NetworkSettings)\n    @staticmethod\n    def structure(d: Mapping, t: type) -> Any:\n        \"\"\"\n        Helper method to structure a Dict of RewardSignalSettings class. Meant to be registered with\n        cattr.register_structure_hook() and called with cattr.structure(). This is needed to handle\n        the special Enum selection of RewardSignalSettings classes.",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "GAILSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class GAILSettings(RewardSignalSettings):\n    learning_rate: float = 3e-4\n    encoding_size: Optional[int] = None\n    use_actions: bool = False\n    use_vail: bool = False\n    demo_path: str = attr.ib(kw_only=True)\n@attr.s(auto_attribs=True)\nclass CuriositySettings(RewardSignalSettings):\n    learning_rate: float = 3e-4\n    encoding_size: Optional[int] = None",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "CuriositySettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class CuriositySettings(RewardSignalSettings):\n    learning_rate: float = 3e-4\n    encoding_size: Optional[int] = None\n@attr.s(auto_attribs=True)\nclass RNDSettings(RewardSignalSettings):\n    learning_rate: float = 1e-4\n    encoding_size: Optional[int] = None\n# SAMPLERS #############################################################################\nclass ParameterRandomizationType(Enum):\n    UNIFORM: str = \"uniform\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RNDSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class RNDSettings(RewardSignalSettings):\n    learning_rate: float = 1e-4\n    encoding_size: Optional[int] = None\n# SAMPLERS #############################################################################\nclass ParameterRandomizationType(Enum):\n    UNIFORM: str = \"uniform\"\n    GAUSSIAN: str = \"gaussian\"\n    MULTIRANGEUNIFORM: str = \"multirangeuniform\"\n    CONSTANT: str = \"constant\"\n    def to_settings(self) -> type:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ParameterRandomizationType",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class ParameterRandomizationType(Enum):\n    UNIFORM: str = \"uniform\"\n    GAUSSIAN: str = \"gaussian\"\n    MULTIRANGEUNIFORM: str = \"multirangeuniform\"\n    CONSTANT: str = \"constant\"\n    def to_settings(self) -> type:\n        _mapping = {\n            ParameterRandomizationType.UNIFORM: UniformSettings,\n            ParameterRandomizationType.GAUSSIAN: GaussianSettings,\n            ParameterRandomizationType.MULTIRANGEUNIFORM: MultiRangeUniformSettings,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ParameterRandomizationSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class ParameterRandomizationSettings(abc.ABC):\n    seed: int = parser.get_default(\"seed\")\n    def __str__(self) -> str:\n        \"\"\"\n        Helper method to output sampler stats to console.\n        \"\"\"\n        raise TrainerConfigError(f\"__str__ not implemented for type {self.__class__}.\")\n    @staticmethod\n    def structure(\n        d: Union[Mapping, float], t: type",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "ConstantSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class ConstantSettings(ParameterRandomizationSettings):\n    value: float = 0.0\n    def __str__(self) -> str:\n        \"\"\"\n        Helper method to output sampler stats to console.\n        \"\"\"\n        return f\"Float: value={self.value}\"\n    def apply(self, key: str, env_channel: EnvironmentParametersChannel) -> None:\n        \"\"\"\n        Helper method to send sampler settings over EnvironmentParametersChannel",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "UniformSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class UniformSettings(ParameterRandomizationSettings):\n    min_value: float = attr.ib()\n    max_value: float = 1.0\n    def __str__(self) -> str:\n        \"\"\"\n        Helper method to output sampler stats to console.\n        \"\"\"\n        return f\"Uniform sampler: min={self.min_value}, max={self.max_value}\"\n    @min_value.default\n    def _min_value_default(self):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "GaussianSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class GaussianSettings(ParameterRandomizationSettings):\n    mean: float = 1.0\n    st_dev: float = 1.0\n    def __str__(self) -> str:\n        \"\"\"\n        Helper method to output sampler stats to console.\n        \"\"\"\n        return f\"Gaussian sampler: mean={self.mean}, stddev={self.st_dev}\"\n    def apply(self, key: str, env_channel: EnvironmentParametersChannel) -> None:\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "MultiRangeUniformSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class MultiRangeUniformSettings(ParameterRandomizationSettings):\n    intervals: List[Tuple[float, float]] = attr.ib()\n    def __str__(self) -> str:\n        \"\"\"\n        Helper method to output sampler stats to console.\n        \"\"\"\n        return f\"MultiRangeUniform sampler: intervals={self.intervals}\"\n    @intervals.default\n    def _intervals_default(self):\n        return [[0.0, 1.0]]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "CompletionCriteriaSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class CompletionCriteriaSettings:\n    \"\"\"\n    CompletionCriteriaSettings contains the information needed to figure out if the next\n    lesson must start.\n    \"\"\"\n    class MeasureType(Enum):\n        PROGRESS: str = \"progress\"\n        REWARD: str = \"reward\"\n    behavior: str\n    measure: MeasureType = attr.ib(default=MeasureType.REWARD)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "Lesson",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class Lesson:\n    \"\"\"\n    Gathers the data of one lesson for one environment parameter including its name,\n    the condition that must be fullfiled for the lesson to be completed and a sampler\n    for the environment parameter. If the completion_criteria is None, then this is\n    the last lesson in the curriculum.\n    \"\"\"\n    value: ParameterRandomizationSettings\n    name: str\n    completion_criteria: Optional[CompletionCriteriaSettings] = attr.ib(default=None)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "EnvironmentParameterSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class EnvironmentParameterSettings:\n    \"\"\"\n    EnvironmentParameterSettings is an ordered list of lessons for one environment\n    parameter.\n    \"\"\"\n    curriculum: List[Lesson]\n    @staticmethod\n    def _check_lesson_chain(lessons, parameter_name):\n        \"\"\"\n        Ensures that when using curriculum, all non-terminal lessons have a valid",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SelfPlaySettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class SelfPlaySettings:\n    save_steps: int = 20000\n    team_change: int = attr.ib()\n    @team_change.default\n    def _team_change_default(self):\n        # Assign team_change to about 4x save_steps\n        return self.save_steps * 5\n    swap_steps: int = 2000\n    window: int = 10\n    play_against_latest_model_ratio: float = 0.5",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TrainerSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class TrainerSettings(ExportableSettings):\n    default_override: ClassVar[Optional[\"TrainerSettings\"]] = None\n    trainer_type: TrainerType = TrainerType.PPO\n    hyperparameters: HyperparamSettings = attr.ib()\n    @hyperparameters.default\n    def _set_default_hyperparameters(self):\n        return self.trainer_type.to_settings()()\n    network_settings: NetworkSettings = attr.ib(factory=NetworkSettings)\n    reward_signals: Dict[RewardSignalType, RewardSignalSettings] = attr.ib(\n        factory=lambda: {RewardSignalType.EXTRINSIC: RewardSignalSettings()}",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "CheckpointSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class CheckpointSettings:\n    run_id: str = parser.get_default(\"run_id\")\n    initialize_from: Optional[str] = parser.get_default(\"initialize_from\")\n    load_model: bool = parser.get_default(\"load_model\")\n    resume: bool = parser.get_default(\"resume\")\n    force: bool = parser.get_default(\"force\")\n    train_model: bool = parser.get_default(\"train_model\")\n    inference: bool = parser.get_default(\"inference\")\n    results_dir: str = parser.get_default(\"results_dir\")\n    @property",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "EnvironmentSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class EnvironmentSettings:\n    env_path: Optional[str] = parser.get_default(\"env_path\")\n    env_args: Optional[List[str]] = parser.get_default(\"env_args\")\n    base_port: int = parser.get_default(\"base_port\")\n    num_envs: int = attr.ib(default=parser.get_default(\"num_envs\"))\n    num_areas: int = attr.ib(default=parser.get_default(\"num_areas\"))\n    seed: int = parser.get_default(\"seed\")\n    max_lifetime_restarts: int = parser.get_default(\"max_lifetime_restarts\")\n    restarts_rate_limit_n: int = parser.get_default(\"restarts_rate_limit_n\")\n    restarts_rate_limit_period_s: int = parser.get_default(",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "EngineSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class EngineSettings:\n    width: int = parser.get_default(\"width\")\n    height: int = parser.get_default(\"height\")\n    quality_level: int = parser.get_default(\"quality_level\")\n    time_scale: float = parser.get_default(\"time_scale\")\n    target_frame_rate: int = parser.get_default(\"target_frame_rate\")\n    capture_frame_rate: int = parser.get_default(\"capture_frame_rate\")\n    no_graphics: bool = parser.get_default(\"no_graphics\")\n@attr.s(auto_attribs=True)\nclass TorchSettings:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "TorchSettings",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class TorchSettings:\n    device: Optional[str] = parser.get_default(\"device\")\n@attr.s(auto_attribs=True)\nclass RunOptions(ExportableSettings):\n    default_settings: Optional[TrainerSettings] = None\n    behaviors: TrainerSettings.DefaultTrainerDict = attr.ib(\n        factory=TrainerSettings.DefaultTrainerDict\n    )\n    env_settings: EnvironmentSettings = attr.ib(factory=EnvironmentSettings)\n    engine_settings: EngineSettings = attr.ib(factory=EngineSettings)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "RunOptions",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "class RunOptions(ExportableSettings):\n    default_settings: Optional[TrainerSettings] = None\n    behaviors: TrainerSettings.DefaultTrainerDict = attr.ib(\n        factory=TrainerSettings.DefaultTrainerDict\n    )\n    env_settings: EnvironmentSettings = attr.ib(factory=EnvironmentSettings)\n    engine_settings: EngineSettings = attr.ib(factory=EngineSettings)\n    environment_parameters: Optional[Dict[str, EnvironmentParameterSettings]] = None\n    checkpoint_settings: CheckpointSettings = attr.ib(factory=CheckpointSettings)\n    torch_settings: TorchSettings = attr.ib(factory=TorchSettings)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "check_and_structure",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "def check_and_structure(key: str, value: Any, class_type: type) -> Any:\n    attr_fields_dict = attr.fields_dict(class_type)\n    if key not in attr_fields_dict:\n        raise TrainerConfigError(\n            f\"The option {key} was specified in your YAML file for {class_type.__name__}, but is invalid.\"\n        )\n    # Apply cattr structure to the values\n    return cattr.structure(value, attr_fields_dict[key].type)\nclass TrainerType(Enum):\n    PPO: str = \"ppo\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "check_hyperparam_schedules",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "def check_hyperparam_schedules(val: Dict, trainer_type: TrainerType) -> Dict:\n    # Check if beta and epsilon are set. If not, set to match learning rate schedule.\n    if trainer_type is TrainerType.PPO or trainer_type is TrainerType.POCA:\n        if \"beta_schedule\" not in val.keys() and \"learning_rate_schedule\" in val.keys():\n            val[\"beta_schedule\"] = val[\"learning_rate_schedule\"]\n        if (\n            \"epsilon_schedule\" not in val.keys()\n            and \"learning_rate_schedule\" in val.keys()\n        ):\n            val[\"epsilon_schedule\"] = val[\"learning_rate_schedule\"]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "strict_to_cls",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "def strict_to_cls(d: Mapping, t: type) -> Any:\n    if not isinstance(d, Mapping):\n        raise TrainerConfigError(f\"Unsupported config {d} for {t.__name__}.\")\n    d_copy: Dict[str, Any] = {}\n    d_copy.update(d)\n    for key, val in d_copy.items():\n        d_copy[key] = check_and_structure(key, val, t)\n    return t(**d_copy)\ndef defaultdict_to_dict(d: DefaultDict) -> Dict:\n    return {key: cattr.unstructure(val) for key, val in d.items()}",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "defaultdict_to_dict",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "def defaultdict_to_dict(d: DefaultDict) -> Dict:\n    return {key: cattr.unstructure(val) for key, val in d.items()}\ndef deep_update_dict(d: Dict, update_d: Mapping) -> None:\n    \"\"\"\n    Similar to dict.update(), but works for nested dicts of dicts as well.\n    \"\"\"\n    for key, val in update_d.items():\n        if key in d and isinstance(d[key], Mapping) and isinstance(val, Mapping):\n            deep_update_dict(d[key], val)\n        else:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "deep_update_dict",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "def deep_update_dict(d: Dict, update_d: Mapping) -> None:\n    \"\"\"\n    Similar to dict.update(), but works for nested dicts of dicts as well.\n    \"\"\"\n    for key, val in update_d.items():\n        if key in d and isinstance(d[key], Mapping) and isinstance(val, Mapping):\n            deep_update_dict(d[key], val)\n        else:\n            d[key] = val\nclass SerializationSettings:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "logger = logging_util.get_logger(__name__)\ndef check_and_structure(key: str, value: Any, class_type: type) -> Any:\n    attr_fields_dict = attr.fields_dict(class_type)\n    if key not in attr_fields_dict:\n        raise TrainerConfigError(\n            f\"The option {key} was specified in your YAML file for {class_type.__name__}, but is invalid.\"\n        )\n    # Apply cattr structure to the values\n    return cattr.structure(value, attr_fields_dict[key].type)\nclass TrainerType(Enum):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "POCASettings",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "peekOfCode": "POCASettings = PPOSettings\n# INTRINSIC REWARD SIGNALS #############################################################\nclass RewardSignalType(Enum):\n    EXTRINSIC: str = \"extrinsic\"\n    GAIL: str = \"gail\"\n    CURIOSITY: str = \"curiosity\"\n    RND: str = \"rnd\"\n    def to_settings(self) -> type:\n        _mapping = {\n            RewardSignalType.EXTRINSIC: RewardSignalSettings,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.settings",
        "documentation": {}
    },
    {
        "label": "SimpleEnvManager",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.simple_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.simple_env_manager",
        "peekOfCode": "class SimpleEnvManager(EnvManager):\n    \"\"\"\n    Simple implementation of the EnvManager interface that only handles one BaseEnv at a time.\n    This is generally only useful for testing; see SubprocessEnvManager for a production-quality implementation.\n    \"\"\"\n    def __init__(self, env: BaseEnv, env_params: EnvironmentParametersChannel):\n        super().__init__()\n        self.env_params = env_params\n        self.env = env\n        self.previous_step: EnvironmentStep = EnvironmentStep.empty(0)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.simple_env_manager",
        "documentation": {}
    },
    {
        "label": "StatsSummary",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "peekOfCode": "class StatsSummary(NamedTuple):\n    full_dist: List[float]\n    aggregation_method: StatsAggregationMethod\n    @staticmethod\n    def empty() -> \"StatsSummary\":\n        return StatsSummary([], StatsAggregationMethod.AVERAGE)\n    @property\n    def aggregated_value(self):\n        if self.aggregation_method == StatsAggregationMethod.SUM:\n            return self.sum",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsPropertyType",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "peekOfCode": "class StatsPropertyType(Enum):\n    HYPERPARAMETERS = \"hyperparameters\"\n    SELF_PLAY = \"selfplay\"\nclass StatsWriter(abc.ABC):\n    \"\"\"\n    A StatsWriter abstract class. A StatsWriter takes in a category, key, scalar value, and step\n    and writes it out by some method.\n    \"\"\"\n    def on_add_stat(\n        self,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsWriter",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "peekOfCode": "class StatsWriter(abc.ABC):\n    \"\"\"\n    A StatsWriter abstract class. A StatsWriter takes in a category, key, scalar value, and step\n    and writes it out by some method.\n    \"\"\"\n    def on_add_stat(\n        self,\n        category: str,\n        key: str,\n        value: float,",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "GaugeWriter",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "peekOfCode": "class GaugeWriter(StatsWriter):\n    \"\"\"\n    Write all stats that we receive to the timer gauges, so we can track them offline easily\n    \"\"\"\n    @staticmethod\n    def sanitize_string(s: str) -> str:\n        \"\"\"\n        Clean up special characters in the category and value names.\n        \"\"\"\n        return s.replace(\"/\", \".\").replace(\" \", \"\")",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "ConsoleWriter",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "peekOfCode": "class ConsoleWriter(StatsWriter):\n    def __init__(self):\n        self.training_start_time = time.time()\n        # If self-play, we want to print ELO as well as reward\n        self.self_play = False\n        self.self_play_team = -1\n        self.rank = get_rank()\n    def write_stats(\n        self, category: str, values: Dict[str, StatsSummary], step: int\n    ) -> None:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "TensorboardWriter",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "peekOfCode": "class TensorboardWriter(StatsWriter):\n    def __init__(\n        self,\n        base_dir: str,\n        clear_past_data: bool = False,\n        hidden_keys: Optional[List[str]] = None,\n    ):\n        \"\"\"\n        A StatsWriter that writes to a Tensorboard summary.\n        :param base_dir: The directory within which to place all the summaries. Tensorboard files will be written to a",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "StatsReporter",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "peekOfCode": "class StatsReporter:\n    writers: List[StatsWriter] = []\n    stats_dict: Dict[str, Dict[str, List]] = defaultdict(lambda: defaultdict(list))\n    lock = RLock()\n    stats_aggregation: Dict[str, Dict[str, StatsAggregationMethod]] = defaultdict(\n        lambda: defaultdict(lambda: StatsAggregationMethod.AVERAGE)\n    )\n    def __init__(self, category: str):\n        \"\"\"\n        Generic StatsReporter. A category is the broadest type of storage (would",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "peekOfCode": "logger = get_logger(__name__)\ndef _dict_to_str(param_dict: Dict[str, Any], num_tabs: int) -> str:\n    \"\"\"\n    Takes a parameter dictionary and converts it to a human-readable string.\n    Recurses if there are multiple levels of dict. Used to print out hyperparameters.\n    :param param_dict: A Dictionary of key, value parameters.\n    :return: A string version of this dictionary.\n    \"\"\"\n    if not isinstance(param_dict, dict):\n        return str(param_dict)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.stats",
        "documentation": {}
    },
    {
        "label": "EnvironmentCommand",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "peekOfCode": "class EnvironmentCommand(enum.Enum):\n    STEP = 1\n    BEHAVIOR_SPECS = 2\n    ENVIRONMENT_PARAMETERS = 3\n    RESET = 4\n    CLOSE = 5\n    ENV_EXITED = 6\n    CLOSED = 7\n    TRAINING_STARTED = 8\nclass EnvironmentRequest(NamedTuple):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentRequest",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "peekOfCode": "class EnvironmentRequest(NamedTuple):\n    cmd: EnvironmentCommand\n    payload: Any = None\nclass EnvironmentResponse(NamedTuple):\n    cmd: EnvironmentCommand\n    worker_id: int\n    payload: Any\nclass StepResponse(NamedTuple):\n    all_step_result: AllStepResult\n    timer_root: Optional[TimerNode]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "EnvironmentResponse",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "peekOfCode": "class EnvironmentResponse(NamedTuple):\n    cmd: EnvironmentCommand\n    worker_id: int\n    payload: Any\nclass StepResponse(NamedTuple):\n    all_step_result: AllStepResult\n    timer_root: Optional[TimerNode]\n    environment_stats: EnvironmentStats\nclass UnityEnvWorker:\n    def __init__(self, process: Process, worker_id: int, conn: Connection):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "StepResponse",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "peekOfCode": "class StepResponse(NamedTuple):\n    all_step_result: AllStepResult\n    timer_root: Optional[TimerNode]\n    environment_stats: EnvironmentStats\nclass UnityEnvWorker:\n    def __init__(self, process: Process, worker_id: int, conn: Connection):\n        self.process = process\n        self.worker_id = worker_id\n        self.conn = conn\n        self.previous_step: EnvironmentStep = EnvironmentStep.empty(worker_id)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "UnityEnvWorker",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "peekOfCode": "class UnityEnvWorker:\n    def __init__(self, process: Process, worker_id: int, conn: Connection):\n        self.process = process\n        self.worker_id = worker_id\n        self.conn = conn\n        self.previous_step: EnvironmentStep = EnvironmentStep.empty(worker_id)\n        self.previous_all_action_info: Dict[str, ActionInfo] = {}\n        self.waiting = False\n        self.closed = False\n    def send(self, cmd: EnvironmentCommand, payload: Any = None) -> None:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "SubprocessEnvManager",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "peekOfCode": "class SubprocessEnvManager(EnvManager):\n    def __init__(\n        self,\n        env_factory: Callable[[int, List[SideChannel]], BaseEnv],\n        run_options: RunOptions,\n        n_env: int = 1,\n    ):\n        super().__init__()\n        self.env_workers: List[UnityEnvWorker] = []\n        self.step_queue: Queue = Queue()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "worker",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "peekOfCode": "def worker(\n    parent_conn: Connection,\n    step_queue: Queue,\n    pickled_env_factory: str,\n    worker_id: int,\n    run_options: RunOptions,\n    log_level: int = logging_util.INFO,\n) -> None:\n    env_factory: Callable[\n        [int, List[SideChannel]], UnityEnvironment",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "peekOfCode": "logger = logging_util.get_logger(__name__)\nWORKER_SHUTDOWN_TIMEOUT_S = 10\nclass EnvironmentCommand(enum.Enum):\n    STEP = 1\n    BEHAVIOR_SPECS = 2\n    ENVIRONMENT_PARAMETERS = 3\n    RESET = 4\n    CLOSE = 5\n    ENV_EXITED = 6\n    CLOSED = 7",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "WORKER_SHUTDOWN_TIMEOUT_S",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "peekOfCode": "WORKER_SHUTDOWN_TIMEOUT_S = 10\nclass EnvironmentCommand(enum.Enum):\n    STEP = 1\n    BEHAVIOR_SPECS = 2\n    ENVIRONMENT_PARAMETERS = 3\n    RESET = 4\n    CLOSE = 5\n    ENV_EXITED = 6\n    CLOSED = 7\n    TRAINING_STARTED = 8",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.subprocess_env_manager",
        "documentation": {}
    },
    {
        "label": "TrainerController",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.trainer_controller",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.trainer_controller",
        "peekOfCode": "class TrainerController:\n    def __init__(\n        self,\n        trainer_factory: TrainerFactory,\n        output_path: str,\n        run_id: str,\n        param_manager: EnvironmentParameterManager,\n        train: bool,\n        training_seed: int,\n    ):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.trainer_controller",
        "documentation": {}
    },
    {
        "label": "TrainingAnalyticsSideChannel",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.training_analytics_side_channel",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.training_analytics_side_channel",
        "peekOfCode": "class TrainingAnalyticsSideChannel(DefaultTrainingAnalyticsSideChannel):\n    \"\"\"\n    Side channel that sends information about the training to the Unity environment so it can be logged.\n    \"\"\"\n    __vendorKey: str = \"unity.ml-agents\"\n    def __init__(self) -> None:\n        # >>> uuid.uuid5(uuid.NAMESPACE_URL, \"com.unity.ml-agents/TrainingAnalyticsSideChannel\")\n        # UUID('b664a4a9-d86f-5a5f-95cb-e8353a7e8356')\n        # Use the same uuid as the parent side channel\n        super().__init__()",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.training_analytics_side_channel",
        "documentation": {}
    },
    {
        "label": "StatusType",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "peekOfCode": "class StatusType(Enum):\n    LESSON_NUM = \"lesson_num\"\n    STATS_METADATA = \"metadata\"\n    CHECKPOINTS = \"checkpoints\"\n    FINAL_CHECKPOINT = \"final_checkpoint\"\n    ELO = \"elo\"\n@attr.s(auto_attribs=True)\nclass StatusMetaData:\n    stats_format_version: str = STATUS_FORMAT_VERSION\n    mlagents_version: str = __version__",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "StatusMetaData",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "peekOfCode": "class StatusMetaData:\n    stats_format_version: str = STATUS_FORMAT_VERSION\n    mlagents_version: str = __version__\n    torch_version: str = torch.__version__\n    def to_dict(self) -> Dict[str, str]:\n        return cattr.unstructure(self)\n    @staticmethod\n    def from_dict(import_dict: Dict[str, str]) -> \"StatusMetaData\":\n        return cattr.structure(import_dict, StatusMetaData)\n    def check_compatibility(self, other: \"StatusMetaData\") -> None:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "GlobalTrainingStatus",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "peekOfCode": "class GlobalTrainingStatus:\n    \"\"\"\n    GlobalTrainingStatus class that contains static methods to save global training status and\n    load it on a resume. These are values that might be needed for the training resume that\n    cannot/should not be captured in a model checkpoint, such as curriclum lesson.\n    \"\"\"\n    saved_state: Dict[str, Dict[str, Any]] = defaultdict(lambda: {})\n    @staticmethod\n    def load_state(path: str) -> None:\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "peekOfCode": "logger = get_logger(__name__)\nSTATUS_FORMAT_VERSION = \"0.3.0\"\nclass StatusType(Enum):\n    LESSON_NUM = \"lesson_num\"\n    STATS_METADATA = \"metadata\"\n    CHECKPOINTS = \"checkpoints\"\n    FINAL_CHECKPOINT = \"final_checkpoint\"\n    ELO = \"elo\"\n@attr.s(auto_attribs=True)\nclass StatusMetaData:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "STATUS_FORMAT_VERSION",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "peekOfCode": "STATUS_FORMAT_VERSION = \"0.3.0\"\nclass StatusType(Enum):\n    LESSON_NUM = \"lesson_num\"\n    STATS_METADATA = \"metadata\"\n    CHECKPOINTS = \"checkpoints\"\n    FINAL_CHECKPOINT = \"final_checkpoint\"\n    ELO = \"elo\"\n@attr.s(auto_attribs=True)\nclass StatusMetaData:\n    stats_format_version: str = STATUS_FORMAT_VERSION",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.training_status",
        "documentation": {}
    },
    {
        "label": "AgentStatus",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "peekOfCode": "class AgentStatus(NamedTuple):\n    \"\"\"\n    Stores observation, action, and reward for an agent. Does not have additional\n    fields that are present in AgentExperience.\n    \"\"\"\n    obs: List[np.ndarray]\n    reward: float\n    action: ActionTuple\n    done: bool\nclass AgentExperience(NamedTuple):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "AgentExperience",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "peekOfCode": "class AgentExperience(NamedTuple):\n    \"\"\"\n    Stores the full amount of data for an agent in one timestep. Includes\n    the status' of group mates and the group reward, as well as the probabilities\n    outputted by the policy.\n    \"\"\"\n    obs: List[np.ndarray]\n    reward: float\n    done: bool\n    action: ActionTuple",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "ObsUtil",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "peekOfCode": "class ObsUtil:\n    @staticmethod\n    def get_name_at(index: int) -> AgentBufferKey:\n        \"\"\"\n        returns the name of the observation given the index of the observation\n        \"\"\"\n        return ObservationKeyPrefix.OBSERVATION, index\n    @staticmethod\n    def get_name_at_next(index: int) -> AgentBufferKey:\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "GroupObsUtil",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "peekOfCode": "class GroupObsUtil:\n    @staticmethod\n    def get_name_at(index: int) -> AgentBufferKey:\n        \"\"\"\n        returns the name of the observation given the index of the observation\n        \"\"\"\n        return ObservationKeyPrefix.GROUP_OBSERVATION, index\n    @staticmethod\n    def get_name_at_next(index: int) -> AgentBufferKey:\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "Trajectory",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "peekOfCode": "class Trajectory(NamedTuple):\n    steps: List[AgentExperience]\n    next_obs: List[\n        np.ndarray\n    ]  # Observation following the trajectory, for bootstrapping\n    next_group_obs: List[List[np.ndarray]]\n    agent_id: str\n    behavior_id: str\n    def to_agentbuffer(self) -> AgentBuffer:\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.trajectory",
        "documentation": {}
    },
    {
        "label": "convert_behaviors",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "peekOfCode": "def convert_behaviors(old_trainer_config: Dict[str, Any]) -> Dict[str, Any]:\n    all_behavior_config_dict = {}\n    default_config = old_trainer_config.get(\"default\", {})\n    for behavior_name, config in old_trainer_config.items():\n        if behavior_name != \"default\":\n            config = default_config.copy()\n            config.update(old_trainer_config[behavior_name])\n            # Convert to split TrainerSettings, Hyperparameters, NetworkSettings\n            # Set trainer_type and get appropriate hyperparameter settings\n            try:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "documentation": {}
    },
    {
        "label": "write_to_yaml_file",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "peekOfCode": "def write_to_yaml_file(unstructed_config: Dict[str, Any], output_config: str) -> None:\n    with open(output_config, \"w\") as f:\n        try:\n            yaml.dump(unstructed_config, f, sort_keys=False)\n        except TypeError:  # Older versions of pyyaml don't support sort_keys\n            yaml.dump(unstructed_config, f)\ndef remove_nones(config: Dict[Any, Any]) -> Dict[str, Any]:\n    new_config = {}\n    for key, val in config.items():\n        if isinstance(val, dict):",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "documentation": {}
    },
    {
        "label": "remove_nones",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "peekOfCode": "def remove_nones(config: Dict[Any, Any]) -> Dict[str, Any]:\n    new_config = {}\n    for key, val in config.items():\n        if isinstance(val, dict):\n            new_config[key] = remove_nones(val)\n        elif val is not None:\n            new_config[key] = val\n    return new_config\n# Take a sampler from the old format and convert to new sampler structure\ndef convert_samplers(old_sampler_config: Dict[str, Any]) -> Dict[str, Any]:",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "documentation": {}
    },
    {
        "label": "convert_samplers",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "peekOfCode": "def convert_samplers(old_sampler_config: Dict[str, Any]) -> Dict[str, Any]:\n    new_sampler_config: Dict[str, Any] = {}\n    for parameter, parameter_config in old_sampler_config.items():\n        if parameter == \"resampling-interval\":\n            print(\n                \"resampling-interval is no longer necessary for parameter randomization and is being ignored.\"\n            )\n            continue\n        new_sampler_config[parameter] = {}\n        new_sampler_config[parameter][\"sampler_type\"] = parameter_config[\"sampler-type\"]",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "documentation": {}
    },
    {
        "label": "convert_samplers_and_curriculum",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "peekOfCode": "def convert_samplers_and_curriculum(\n    parameter_dict: Dict[str, Any], curriculum: Dict[str, Any]\n) -> Dict[str, Any]:\n    for key, sampler in parameter_dict.items():\n        if \"sampler_parameters\" not in sampler:\n            parameter_dict[key][\"sampler_parameters\"] = {}\n        for argument in [\n            \"seed\",\n            \"min_value\",\n            \"max_value\",",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "documentation": {}
    },
    {
        "label": "parse_args",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "peekOfCode": "def parse_args():\n    argparser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    argparser.add_argument(\n        \"trainer_config_path\",\n        help=\"Path to old format (<=0.18.X) trainer configuration YAML.\",\n    )\n    argparser.add_argument(\n        \"--curriculum\",",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "peekOfCode": "def convert(\n    config: Dict[str, Any],\n    old_curriculum: Optional[Dict[str, Any]],\n    old_param_random: Optional[Dict[str, Any]],\n) -> Dict[str, Any]:\n    if \"behaviors\" not in config:\n        print(\"Config file format version :  version <= 0.16.X\")\n        behavior_config_dict = convert_behaviors(config)\n        full_config = {\"behaviors\": behavior_config_dict}\n        # Convert curriculum and sampler. note that we don't validate these; if it was correct",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "description": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "peekOfCode": "def main() -> None:\n    args = parse_args()\n    print(\n        f\"Converting {args.trainer_config_path} and saving to {args.output_config_path}.\"\n    )\n    old_config = load_config(args.trainer_config_path)\n    curriculum_config_dict = None\n    old_sampler_config_dict = None\n    if args.curriculum is not None:\n        curriculum_config_dict = load_config(args.curriculum)",
        "detail": "ml-agents-unity.ml-agents.mlagents.trainers.upgrade_config",
        "documentation": {}
    },
    {
        "label": "test_run_environment",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_compressed_sensor",
        "description": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_compressed_sensor",
        "peekOfCode": "def test_run_environment(env_name):\n    \"\"\"\n    Run the low-level API test of compressed sensors using the specified environment\n    :param env_name: Name of the Unity environment binary to launch\n    \"\"\"\n    env = UnityEnvironment(\n        file_name=env_name, no_graphics=True, additional_args=[\"-logFile\", \"-\"]\n    )\n    try:\n        # Reset the environment",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_compressed_sensor",
        "documentation": {}
    },
    {
        "label": "EPSILON",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_compressed_sensor",
        "description": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_compressed_sensor",
        "peekOfCode": "EPSILON = 0.001\ndef test_run_environment(env_name):\n    \"\"\"\n    Run the low-level API test of compressed sensors using the specified environment\n    :param env_name: Name of the Unity environment binary to launch\n    \"\"\"\n    env = UnityEnvironment(\n        file_name=env_name, no_graphics=True, additional_args=[\"-logFile\", \"-\"]\n    )\n    try:",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_compressed_sensor",
        "documentation": {}
    },
    {
        "label": "test_run_environment",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_gym",
        "description": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_gym",
        "peekOfCode": "def test_run_environment(env_name):\n    \"\"\"\n    Run the gym test using the specified environment\n    :param env_name: Name of the Unity environment binary to launch\n    \"\"\"\n    u_env = UnityEnvironment(env_name, worker_id=1, no_graphics=True)\n    env = UnityToGymWrapper(u_env)\n    try:\n        # Examine environment parameters\n        print(str(env))",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_gym",
        "documentation": {}
    },
    {
        "label": "test_closing",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_gym",
        "description": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_gym",
        "peekOfCode": "def test_closing(env_name):\n    \"\"\"\n    Run the gym test and closes the environment multiple times\n    :param env_name: Name of the Unity environment binary to launch\n    \"\"\"\n    try:\n        env1 = UnityToGymWrapper(\n            UnityEnvironment(env_name, worker_id=1, no_graphics=True)\n        )\n        env1.close()",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_gym",
        "documentation": {}
    },
    {
        "label": "test_run_environment",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_llapi",
        "description": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_llapi",
        "peekOfCode": "def test_run_environment(env_name):\n    \"\"\"\n    Run the low-level API test using the specified environment\n    :param env_name: Name of the Unity environment binary to launch\n    \"\"\"\n    engine_configuration_channel = EngineConfigurationChannel()\n    env = UnityEnvironment(\n        file_name=env_name,\n        side_channels=[engine_configuration_channel],\n        no_graphics=True,",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_llapi",
        "documentation": {}
    },
    {
        "label": "test_closing",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_llapi",
        "description": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_llapi",
        "peekOfCode": "def test_closing(env_name):\n    \"\"\"\n    Run the low-level API and close the environment\n    :param env_name: Name of the Unity environment binary to launch\n    \"\"\"\n    try:\n        env1 = UnityEnvironment(\n            file_name=env_name,\n            base_port=5006,\n            no_graphics=True,",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.scripts.run_llapi",
        "documentation": {}
    },
    {
        "label": "check_coverage",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.check_coverage_percent",
        "description": "ml-agents-unity.ml-agents.tests.yamato.check_coverage_percent",
        "peekOfCode": "def check_coverage(root_dir, min_percentage):\n    # Walk the root directory looking for the summary file that\n    # is output by ther code coverage checks. It's possible that\n    # we'll need to refine this later in case there are multiple\n    # such files.\n    summary_xml = None\n    for dirpath, _, filenames in os.walk(root_dir):\n        if SUMMARY_XML_FILENAME in filenames:\n            summary_xml = os.path.join(dirpath, SUMMARY_XML_FILENAME)\n            break",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.check_coverage_percent",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.check_coverage_percent",
        "description": "ml-agents-unity.ml-agents.tests.yamato.check_coverage_percent",
        "peekOfCode": "def main():\n    root_dir = sys.argv[1]\n    min_percent = float(sys.argv[2])\n    if min_percent > 0:\n        # This allows us to set 0% coverage on 2018.4\n        check_coverage(root_dir, min_percent)\nif __name__ == \"__main__\":\n    main()",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.check_coverage_percent",
        "documentation": {}
    },
    {
        "label": "SUMMARY_XML_FILENAME",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.check_coverage_percent",
        "description": "ml-agents-unity.ml-agents.tests.yamato.check_coverage_percent",
        "peekOfCode": "SUMMARY_XML_FILENAME = \"Summary.xml\"\ndef check_coverage(root_dir, min_percentage):\n    # Walk the root directory looking for the summary file that\n    # is output by ther code coverage checks. It's possible that\n    # we'll need to refine this later in case there are multiple\n    # such files.\n    summary_xml = None\n    for dirpath, _, filenames in os.walk(root_dir):\n        if SUMMARY_XML_FILENAME in filenames:\n            summary_xml = os.path.join(dirpath, SUMMARY_XML_FILENAME)",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.check_coverage_percent",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.setup_venv",
        "description": "ml-agents-unity.ml-agents.tests.yamato.setup_venv",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--mlagents-version\", default=None)\n    parser.add_argument(\"--extra-packages\", default=None)\n    args = parser.parse_args()\n    extra_packages = []\n    if args.extra_packages is not None:\n        extra_packages = args.extra_packages.split(\",\")\n    init_venv(\n        mlagents_python_version=args.mlagents_version, extra_packages=extra_packages",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.setup_venv",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.standalone_build_tests",
        "description": "ml-agents-unity.ml-agents.tests.yamato.standalone_build_tests",
        "peekOfCode": "def main(scene_path, build_target):\n    base_path = get_base_path()\n    print(f\"Running in base path {base_path}\")\n    executable_name = \"testPlayer\"\n    if scene_path is not None:\n        executable_name = os.path.splitext(scene_path)[0]  # Remove extension\n        executable_name = executable_name.split(\"/\")[-1]\n        executable_name = \"testPlayer-\" + executable_name\n    print(f\"Executable name {executable_name}\")\n    returncode = run_standalone_build(",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.standalone_build_tests",
        "documentation": {}
    },
    {
        "label": "run_training",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.training_int_tests",
        "description": "ml-agents-unity.ml-agents.tests.yamato.training_int_tests",
        "peekOfCode": "def run_training(python_version: str, csharp_version: str) -> bool:\n    latest = \"latest\"\n    run_id = int(time.time() * 1000.0)\n    print(\n        f\"Running training with python={python_version or latest} and c#={csharp_version or latest}\"\n    )\n    output_dir = \"results\"\n    onnx_file_expected = f\"./{output_dir}/{run_id}/3DBall.onnx\"\n    if os.path.exists(onnx_file_expected):\n        # Should never happen - make sure nothing leftover from an old test.",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.training_int_tests",
        "documentation": {}
    },
    {
        "label": "run_inference",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.training_int_tests",
        "description": "ml-agents-unity.ml-agents.tests.yamato.training_int_tests",
        "peekOfCode": "def run_inference(env_path: str, output_path: str, model_extension: str) -> bool:\n    start_time = time.time()\n    exes = find_executables(env_path)\n    if len(exes) != 1:\n        print(f\"Can't determine the player executable in {env_path}. Found {exes}.\")\n        return False\n    log_output_path = f\"{get_base_output_path()}/inference.{model_extension}.txt\"\n    # 10 minutes for inference is more than enough\n    process_timeout = 10 * 60\n    # Try to gracefully exit a few seconds before that.",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.training_int_tests",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.training_int_tests",
        "description": "ml-agents-unity.ml-agents.tests.yamato.training_int_tests",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--python\", default=None)\n    parser.add_argument(\"--csharp\", default=None)\n    args = parser.parse_args()\n    try:\n        ok = run_training(args.python, args.csharp)\n        if not ok:\n            sys.exit(1)\n    finally:",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.training_int_tests",
        "documentation": {}
    },
    {
        "label": "get_unity_executable_path",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "description": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "peekOfCode": "def get_unity_executable_path():\n    if platform == \"darwin\":\n        downloader_install_path = \"./.Editor/Unity.app/Contents/MacOS/Unity\"\n    else:  # if platform == \"linux\":\n        downloader_install_path = \"./.Editor/Unity\"\n    if os.path.exists(downloader_install_path):\n        return downloader_install_path\n    raise FileNotFoundError(\"Can't find executable from unity-downloader-cli\")\ndef get_base_path():\n    # We might need to do some more work here if the working directory ever changes",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "documentation": {}
    },
    {
        "label": "get_base_path",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "description": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "peekOfCode": "def get_base_path():\n    # We might need to do some more work here if the working directory ever changes\n    # E.g. take the full path and back out the main module main.\n    # But for now, this should work\n    return os.getcwd()\ndef get_base_output_path():\n    \"\"\"\"\n    Returns the artifact folder to use for yamato jobs.\n    \"\"\"\n    return os.path.join(get_base_path(), \"artifacts\")",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "documentation": {}
    },
    {
        "label": "get_base_output_path",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "description": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "peekOfCode": "def get_base_output_path():\n    \"\"\"\"\n    Returns the artifact folder to use for yamato jobs.\n    \"\"\"\n    return os.path.join(get_base_path(), \"artifacts\")\ndef run_standalone_build(\n    base_path: str,\n    verbose: bool = False,\n    output_path: str = None,\n    scene_path: str = None,",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "documentation": {}
    },
    {
        "label": "run_standalone_build",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "description": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "peekOfCode": "def run_standalone_build(\n    base_path: str,\n    verbose: bool = False,\n    output_path: str = None,\n    scene_path: str = None,\n    build_target: str = None,\n    log_output_path: Optional[str] = f\"{get_base_output_path()}/standalone_build.txt\",\n) -> int:\n    \"\"\"\n    Run BuildStandalonePlayerOSX test to produce a player. The location defaults to",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "documentation": {}
    },
    {
        "label": "find_executables",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "description": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "peekOfCode": "def find_executables(root_dir: str) -> List[str]:\n    \"\"\"\n    Try to find the player executable. This seems to vary between Unity versions.\n    \"\"\"\n    ignored_extension = frozenset([\".dll\", \".dylib\", \".bundle\"])\n    ignored_files = frozenset([\"macblas\"])\n    exes = []\n    for root, _, files in os.walk(root_dir):\n        for filename in files:\n            file_root, ext = os.path.splitext(filename)",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "documentation": {}
    },
    {
        "label": "init_venv",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "description": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "peekOfCode": "def init_venv(\n    mlagents_python_version: str = None, extra_packages: Optional[List[str]] = None\n) -> None:\n    \"\"\"\n    Install the necessary packages for the venv\n    :param mlagents_python_version: The version of mlagents python packcage to install.\n        If None, will do a local install, otherwise will install from pypi\n    :return:\n    \"\"\"\n    pip_commands = [\"--upgrade pip\", \"--upgrade setuptools\"]",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "documentation": {}
    },
    {
        "label": "checkout_csharp_version",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "description": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "peekOfCode": "def checkout_csharp_version(csharp_version):\n    \"\"\"\n    Checks out the specific git revision (usually a tag) for the C# package and Project.\n    If csharp_version is None, no changes are made.\n    :param csharp_version:\n    :return:\n    \"\"\"\n    if csharp_version is None:\n        return\n    csharp_tag = f\"com.unity.ml-agents_{csharp_version}\"",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "documentation": {}
    },
    {
        "label": "undo_git_checkout",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "description": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "peekOfCode": "def undo_git_checkout():\n    \"\"\"\n    Clean up the git working directory.\n    \"\"\"\n    subprocess.check_call(\"git reset HEAD .\", shell=True)\n    subprocess.check_call(\"git checkout -- .\", shell=True)\n    # Ensure the cache isn't polluted with old compiled assemblies.\n    subprocess.check_call(\"rm -rf Project/Library\", shell=True)\ndef override_config_file(src_path, dest_path, overrides):\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "documentation": {}
    },
    {
        "label": "override_config_file",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "description": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "peekOfCode": "def override_config_file(src_path, dest_path, overrides):\n    \"\"\"\n    Override settings in a trainer config file. For example,\n        override_config_file(src_path, dest_path, max_steps=42)\n    will copy the config file at src_path to dest_path, but override the max_steps field to 42 for all brains.\n    \"\"\"\n    with open(src_path) as f:\n        configs = yaml.safe_load(f)\n        behavior_configs = configs[\"behaviors\"]\n    for config in behavior_configs.values():",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "documentation": {}
    },
    {
        "label": "override_legacy_config_file",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "description": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "peekOfCode": "def override_legacy_config_file(python_version, src_path, dest_path, **kwargs):\n    \"\"\"\n    Override settings in a trainer config file, using an old version of the src_path. For example,\n        override_config_file(\"0.16.0\", src_path, dest_path, max_steps=42)\n    will sync the file at src_path from version 0.16.0, copy it to dest_path, and override the\n    max_steps field to 42 for all brains.\n    \"\"\"\n    # Sync the old version of the file\n    python_tag = f\"python-packages_{python_version}\"\n    subprocess.check_call(f\"git checkout {python_tag} -- {src_path}\", shell=True)",
        "detail": "ml-agents-unity.ml-agents.tests.yamato.yamato_utils",
        "documentation": {}
    },
    {
        "label": "VerifyVersionCommand",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents.setup",
        "description": "ml-agents-unity.ml-agents.setup",
        "peekOfCode": "class VerifyVersionCommand(install):\n    \"\"\"\n    Custom command to verify that the git tag is the expected one for the release.\n    Originally based on https://circleci.com/blog/continuously-deploying-python-packages-to-pypi-with-circleci/\n    This differs slightly because our tags and versions are different.\n    \"\"\"\n    description = \"verify that the git tag matches our version\"\n    def run(self):\n        tag = os.getenv(\"GITHUB_REF\", \"NO GITHUB TAG!\").replace(\"refs/tags/\", \"\")\n        if tag != EXPECTED_TAG:",
        "detail": "ml-agents-unity.ml-agents.setup",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.setup",
        "description": "ml-agents-unity.ml-agents.setup",
        "peekOfCode": "VERSION = mlagents.trainers.__version__\nEXPECTED_TAG = mlagents.trainers.__release_tag__\nhere = os.path.abspath(os.path.dirname(__file__))\nclass VerifyVersionCommand(install):\n    \"\"\"\n    Custom command to verify that the git tag is the expected one for the release.\n    Originally based on https://circleci.com/blog/continuously-deploying-python-packages-to-pypi-with-circleci/\n    This differs slightly because our tags and versions are different.\n    \"\"\"\n    description = \"verify that the git tag matches our version\"",
        "detail": "ml-agents-unity.ml-agents.setup",
        "documentation": {}
    },
    {
        "label": "EXPECTED_TAG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.setup",
        "description": "ml-agents-unity.ml-agents.setup",
        "peekOfCode": "EXPECTED_TAG = mlagents.trainers.__release_tag__\nhere = os.path.abspath(os.path.dirname(__file__))\nclass VerifyVersionCommand(install):\n    \"\"\"\n    Custom command to verify that the git tag is the expected one for the release.\n    Originally based on https://circleci.com/blog/continuously-deploying-python-packages-to-pypi-with-circleci/\n    This differs slightly because our tags and versions are different.\n    \"\"\"\n    description = \"verify that the git tag matches our version\"\n    def run(self):",
        "detail": "ml-agents-unity.ml-agents.setup",
        "documentation": {}
    },
    {
        "label": "here",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents.setup",
        "description": "ml-agents-unity.ml-agents.setup",
        "peekOfCode": "here = os.path.abspath(os.path.dirname(__file__))\nclass VerifyVersionCommand(install):\n    \"\"\"\n    Custom command to verify that the git tag is the expected one for the release.\n    Originally based on https://circleci.com/blog/continuously-deploying-python-packages-to-pypi-with-circleci/\n    This differs slightly because our tags and versions are different.\n    \"\"\"\n    description = \"verify that the git tag matches our version\"\n    def run(self):\n        tag = os.getenv(\"GITHUB_REF\", \"NO GITHUB TAG!\").replace(\"refs/tags/\", \"\")",
        "detail": "ml-agents-unity.ml-agents.setup",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/agent_action.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n5mlagents_envs/communicator_objects/agent_action.proto\\x12\\x14\\x63ommunicator_objects\\\"\\x8c\\x01\\n\\x10\\x41gentActionProto\\x12!\\n\\x19vector_actions_deprecated\\x18\\x01 \\x03(\\x02\\x12\\r\\n\\x05value\\x18\\x04 \\x01(\\x02\\x12\\x1a\\n\\x12\\x63ontinuous_actions\\x18\\x06 \\x03(\\x02\\x12\\x18\\n\\x10\\x64iscrete_actions\\x18\\x07 \\x03(\\x05J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04J\\x04\\x08\\x05\\x10\\x06\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_AGENTACTIONPROTO = _descriptor.Descriptor(\n  name='AgentActionProto',\n  full_name='communicator_objects.AgentActionProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/agent_action.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n5mlagents_envs/communicator_objects/agent_action.proto\\x12\\x14\\x63ommunicator_objects\\\"\\x8c\\x01\\n\\x10\\x41gentActionProto\\x12!\\n\\x19vector_actions_deprecated\\x18\\x01 \\x03(\\x02\\x12\\r\\n\\x05value\\x18\\x04 \\x01(\\x02\\x12\\x1a\\n\\x12\\x63ontinuous_actions\\x18\\x06 \\x03(\\x02\\x12\\x18\\n\\x10\\x64iscrete_actions\\x18\\x07 \\x03(\\x05J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04J\\x04\\x08\\x05\\x10\\x06\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_AGENTACTIONPROTO = _descriptor.Descriptor(\n  name='AgentActionProto',\n  full_name='communicator_objects.AgentActionProto',\n  filename=None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "documentation": {}
    },
    {
        "label": "_AGENTACTIONPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "peekOfCode": "_AGENTACTIONPROTO = _descriptor.Descriptor(\n  name='AgentActionProto',\n  full_name='communicator_objects.AgentActionProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='vector_actions_deprecated', full_name='communicator_objects.AgentActionProto.vector_actions_deprecated', index=0,\n      number=1, type=2, cpp_type=6, label=3,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['AgentActionProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['AgentActionProto'] = _AGENTACTIONPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nAgentActionProto = _reflection.GeneratedProtocolMessageType('AgentActionProto', (_message.Message,), dict(\n  DESCRIPTOR = _AGENTACTIONPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.agent_action_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.AgentActionProto)\n  ))\n_sym_db.RegisterMessage(AgentActionProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "documentation": {}
    },
    {
        "label": "AgentActionProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "peekOfCode": "AgentActionProto = _reflection.GeneratedProtocolMessageType('AgentActionProto', (_message.Message,), dict(\n  DESCRIPTOR = _AGENTACTIONPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.agent_action_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.AgentActionProto)\n  ))\n_sym_db.RegisterMessage(AgentActionProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_action_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nfrom mlagents_envs.communicator_objects import agent_info_pb2 as mlagents__envs_dot_communicator__objects_dot_agent__info__pb2\nfrom mlagents_envs.communicator_objects import agent_action_pb2 as mlagents__envs_dot_communicator__objects_dot_agent__action__pb2\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/agent_info_action_pair.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n?mlagents_envs/communicator_objects/agent_info_action_pair.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x33mlagents_envs/communicator_objects/agent_info.proto\\x1a\\x35mlagents_envs/communicator_objects/agent_action.proto\\\"\\x91\\x01\\n\\x18\\x41gentInfoActionPairProto\\x12\\x38\\n\\nagent_info\\x18\\x01 \\x01(\\x0b\\x32$.communicator_objects.AgentInfoProto\\x12;\\n\\x0b\\x61\\x63tion_info\\x18\\x02 \\x01(\\x0b\\x32&.communicator_objects.AgentActionProtoB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_agent__info__pb2.DESCRIPTOR,mlagents__envs_dot_communicator__objects_dot_agent__action__pb2.DESCRIPTOR,])",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/agent_info_action_pair.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n?mlagents_envs/communicator_objects/agent_info_action_pair.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x33mlagents_envs/communicator_objects/agent_info.proto\\x1a\\x35mlagents_envs/communicator_objects/agent_action.proto\\\"\\x91\\x01\\n\\x18\\x41gentInfoActionPairProto\\x12\\x38\\n\\nagent_info\\x18\\x01 \\x01(\\x0b\\x32$.communicator_objects.AgentInfoProto\\x12;\\n\\x0b\\x61\\x63tion_info\\x18\\x02 \\x01(\\x0b\\x32&.communicator_objects.AgentActionProtoB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_agent__info__pb2.DESCRIPTOR,mlagents__envs_dot_communicator__objects_dot_agent__action__pb2.DESCRIPTOR,])\n_AGENTINFOACTIONPAIRPROTO = _descriptor.Descriptor(\n  name='AgentInfoActionPairProto',\n  full_name='communicator_objects.AgentInfoActionPairProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "documentation": {}
    },
    {
        "label": "_AGENTINFOACTIONPAIRPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "peekOfCode": "_AGENTINFOACTIONPAIRPROTO = _descriptor.Descriptor(\n  name='AgentInfoActionPairProto',\n  full_name='communicator_objects.AgentInfoActionPairProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='agent_info', full_name='communicator_objects.AgentInfoActionPairProto.agent_info', index=0,\n      number=1, type=11, cpp_type=10, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "documentation": {}
    },
    {
        "label": "_AGENTINFOACTIONPAIRPROTO.fields_by_name['agent_info'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "peekOfCode": "_AGENTINFOACTIONPAIRPROTO.fields_by_name['agent_info'].message_type = mlagents__envs_dot_communicator__objects_dot_agent__info__pb2._AGENTINFOPROTO\n_AGENTINFOACTIONPAIRPROTO.fields_by_name['action_info'].message_type = mlagents__envs_dot_communicator__objects_dot_agent__action__pb2._AGENTACTIONPROTO\nDESCRIPTOR.message_types_by_name['AgentInfoActionPairProto'] = _AGENTINFOACTIONPAIRPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nAgentInfoActionPairProto = _reflection.GeneratedProtocolMessageType('AgentInfoActionPairProto', (_message.Message,), dict(\n  DESCRIPTOR = _AGENTINFOACTIONPAIRPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.agent_info_action_pair_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.AgentInfoActionPairProto)\n  ))\n_sym_db.RegisterMessage(AgentInfoActionPairProto)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "documentation": {}
    },
    {
        "label": "_AGENTINFOACTIONPAIRPROTO.fields_by_name['action_info'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "peekOfCode": "_AGENTINFOACTIONPAIRPROTO.fields_by_name['action_info'].message_type = mlagents__envs_dot_communicator__objects_dot_agent__action__pb2._AGENTACTIONPROTO\nDESCRIPTOR.message_types_by_name['AgentInfoActionPairProto'] = _AGENTINFOACTIONPAIRPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nAgentInfoActionPairProto = _reflection.GeneratedProtocolMessageType('AgentInfoActionPairProto', (_message.Message,), dict(\n  DESCRIPTOR = _AGENTINFOACTIONPAIRPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.agent_info_action_pair_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.AgentInfoActionPairProto)\n  ))\n_sym_db.RegisterMessage(AgentInfoActionPairProto)\nDESCRIPTOR.has_options = True",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['AgentInfoActionPairProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['AgentInfoActionPairProto'] = _AGENTINFOACTIONPAIRPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nAgentInfoActionPairProto = _reflection.GeneratedProtocolMessageType('AgentInfoActionPairProto', (_message.Message,), dict(\n  DESCRIPTOR = _AGENTINFOACTIONPAIRPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.agent_info_action_pair_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.AgentInfoActionPairProto)\n  ))\n_sym_db.RegisterMessage(AgentInfoActionPairProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "documentation": {}
    },
    {
        "label": "AgentInfoActionPairProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "peekOfCode": "AgentInfoActionPairProto = _reflection.GeneratedProtocolMessageType('AgentInfoActionPairProto', (_message.Message,), dict(\n  DESCRIPTOR = _AGENTINFOACTIONPAIRPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.agent_info_action_pair_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.AgentInfoActionPairProto)\n  ))\n_sym_db.RegisterMessage(AgentInfoActionPairProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_action_pair_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nfrom mlagents_envs.communicator_objects import observation_pb2 as mlagents__envs_dot_communicator__objects_dot_observation__pb2\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/agent_info.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n3mlagents_envs/communicator_objects/agent_info.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x34mlagents_envs/communicator_objects/observation.proto\\\"\\xf9\\x01\\n\\x0e\\x41gentInfoProto\\x12\\x0e\\n\\x06reward\\x18\\x07 \\x01(\\x02\\x12\\x0c\\n\\x04\\x64one\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10max_step_reached\\x18\\t \\x01(\\x08\\x12\\n\\n\\x02id\\x18\\n \\x01(\\x05\\x12\\x13\\n\\x0b\\x61\\x63tion_mask\\x18\\x0b \\x03(\\x08\\x12<\\n\\x0cobservations\\x18\\r \\x03(\\x0b\\x32&.communicator_objects.ObservationProto\\x12\\x10\\n\\x08group_id\\x18\\x0e \\x01(\\x05\\x12\\x14\\n\\x0cgroup_reward\\x18\\x0f \\x01(\\x02J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04J\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x05\\x10\\x06J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x0c\\x10\\rB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_observation__pb2.DESCRIPTOR,])\n_AGENTINFOPROTO = _descriptor.Descriptor(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/agent_info.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n3mlagents_envs/communicator_objects/agent_info.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x34mlagents_envs/communicator_objects/observation.proto\\\"\\xf9\\x01\\n\\x0e\\x41gentInfoProto\\x12\\x0e\\n\\x06reward\\x18\\x07 \\x01(\\x02\\x12\\x0c\\n\\x04\\x64one\\x18\\x08 \\x01(\\x08\\x12\\x18\\n\\x10max_step_reached\\x18\\t \\x01(\\x08\\x12\\n\\n\\x02id\\x18\\n \\x01(\\x05\\x12\\x13\\n\\x0b\\x61\\x63tion_mask\\x18\\x0b \\x03(\\x08\\x12<\\n\\x0cobservations\\x18\\r \\x03(\\x0b\\x32&.communicator_objects.ObservationProto\\x12\\x10\\n\\x08group_id\\x18\\x0e \\x01(\\x05\\x12\\x14\\n\\x0cgroup_reward\\x18\\x0f \\x01(\\x02J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04J\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x05\\x10\\x06J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x0c\\x10\\rB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_observation__pb2.DESCRIPTOR,])\n_AGENTINFOPROTO = _descriptor.Descriptor(\n  name='AgentInfoProto',\n  full_name='communicator_objects.AgentInfoProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "documentation": {}
    },
    {
        "label": "_AGENTINFOPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "peekOfCode": "_AGENTINFOPROTO = _descriptor.Descriptor(\n  name='AgentInfoProto',\n  full_name='communicator_objects.AgentInfoProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='reward', full_name='communicator_objects.AgentInfoProto.reward', index=0,\n      number=7, type=2, cpp_type=6, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "documentation": {}
    },
    {
        "label": "_AGENTINFOPROTO.fields_by_name['observations'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "peekOfCode": "_AGENTINFOPROTO.fields_by_name['observations'].message_type = mlagents__envs_dot_communicator__objects_dot_observation__pb2._OBSERVATIONPROTO\nDESCRIPTOR.message_types_by_name['AgentInfoProto'] = _AGENTINFOPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nAgentInfoProto = _reflection.GeneratedProtocolMessageType('AgentInfoProto', (_message.Message,), dict(\n  DESCRIPTOR = _AGENTINFOPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.agent_info_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.AgentInfoProto)\n  ))\n_sym_db.RegisterMessage(AgentInfoProto)\nDESCRIPTOR.has_options = True",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['AgentInfoProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['AgentInfoProto'] = _AGENTINFOPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nAgentInfoProto = _reflection.GeneratedProtocolMessageType('AgentInfoProto', (_message.Message,), dict(\n  DESCRIPTOR = _AGENTINFOPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.agent_info_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.AgentInfoProto)\n  ))\n_sym_db.RegisterMessage(AgentInfoProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "documentation": {}
    },
    {
        "label": "AgentInfoProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "peekOfCode": "AgentInfoProto = _reflection.GeneratedProtocolMessageType('AgentInfoProto', (_message.Message,), dict(\n  DESCRIPTOR = _AGENTINFOPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.agent_info_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.AgentInfoProto)\n  ))\n_sym_db.RegisterMessage(AgentInfoProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.agent_info_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nfrom mlagents_envs.communicator_objects import space_type_pb2 as mlagents__envs_dot_communicator__objects_dot_space__type__pb2\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/brain_parameters.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n9mlagents_envs/communicator_objects/brain_parameters.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x33mlagents_envs/communicator_objects/space_type.proto\\\"\\x8b\\x01\\n\\x0f\\x41\\x63tionSpecProto\\x12\\x1e\\n\\x16num_continuous_actions\\x18\\x01 \\x01(\\x05\\x12\\x1c\\n\\x14num_discrete_actions\\x18\\x02 \\x01(\\x05\\x12\\x1d\\n\\x15\\x64iscrete_branch_sizes\\x18\\x03 \\x03(\\x05\\x12\\x1b\\n\\x13\\x61\\x63tion_descriptions\\x18\\x04 \\x03(\\t\\\"\\xb6\\x02\\n\\x14\\x42rainParametersProto\\x12%\\n\\x1dvector_action_size_deprecated\\x18\\x03 \\x03(\\x05\\x12-\\n%vector_action_descriptions_deprecated\\x18\\x05 \\x03(\\t\\x12Q\\n#vector_action_space_type_deprecated\\x18\\x06 \\x01(\\x0e\\x32$.communicator_objects.SpaceTypeProto\\x12\\x12\\n\\nbrain_name\\x18\\x07 \\x01(\\t\\x12\\x13\\n\\x0bis_training\\x18\\x08 \\x01(\\x08\\x12:\\n\\x0b\\x61\\x63tion_spec\\x18\\t \\x01(\\x0b\\x32%.communicator_objects.ActionSpecProtoJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x04\\x10\\x05\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_space__type__pb2.DESCRIPTOR,])\n_ACTIONSPECPROTO = _descriptor.Descriptor(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/brain_parameters.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n9mlagents_envs/communicator_objects/brain_parameters.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x33mlagents_envs/communicator_objects/space_type.proto\\\"\\x8b\\x01\\n\\x0f\\x41\\x63tionSpecProto\\x12\\x1e\\n\\x16num_continuous_actions\\x18\\x01 \\x01(\\x05\\x12\\x1c\\n\\x14num_discrete_actions\\x18\\x02 \\x01(\\x05\\x12\\x1d\\n\\x15\\x64iscrete_branch_sizes\\x18\\x03 \\x03(\\x05\\x12\\x1b\\n\\x13\\x61\\x63tion_descriptions\\x18\\x04 \\x03(\\t\\\"\\xb6\\x02\\n\\x14\\x42rainParametersProto\\x12%\\n\\x1dvector_action_size_deprecated\\x18\\x03 \\x03(\\x05\\x12-\\n%vector_action_descriptions_deprecated\\x18\\x05 \\x03(\\t\\x12Q\\n#vector_action_space_type_deprecated\\x18\\x06 \\x01(\\x0e\\x32$.communicator_objects.SpaceTypeProto\\x12\\x12\\n\\nbrain_name\\x18\\x07 \\x01(\\t\\x12\\x13\\n\\x0bis_training\\x18\\x08 \\x01(\\x08\\x12:\\n\\x0b\\x61\\x63tion_spec\\x18\\t \\x01(\\x0b\\x32%.communicator_objects.ActionSpecProtoJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x04\\x10\\x05\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_space__type__pb2.DESCRIPTOR,])\n_ACTIONSPECPROTO = _descriptor.Descriptor(\n  name='ActionSpecProto',\n  full_name='communicator_objects.ActionSpecProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "_ACTIONSPECPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "peekOfCode": "_ACTIONSPECPROTO = _descriptor.Descriptor(\n  name='ActionSpecProto',\n  full_name='communicator_objects.ActionSpecProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='num_continuous_actions', full_name='communicator_objects.ActionSpecProto.num_continuous_actions', index=0,\n      number=1, type=5, cpp_type=1, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "_BRAINPARAMETERSPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "peekOfCode": "_BRAINPARAMETERSPROTO = _descriptor.Descriptor(\n  name='BrainParametersProto',\n  full_name='communicator_objects.BrainParametersProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='vector_action_size_deprecated', full_name='communicator_objects.BrainParametersProto.vector_action_size_deprecated', index=0,\n      number=3, type=5, cpp_type=1, label=3,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "_BRAINPARAMETERSPROTO.fields_by_name['vector_action_space_type_deprecated'].enum_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "peekOfCode": "_BRAINPARAMETERSPROTO.fields_by_name['vector_action_space_type_deprecated'].enum_type = mlagents__envs_dot_communicator__objects_dot_space__type__pb2._SPACETYPEPROTO\n_BRAINPARAMETERSPROTO.fields_by_name['action_spec'].message_type = _ACTIONSPECPROTO\nDESCRIPTOR.message_types_by_name['ActionSpecProto'] = _ACTIONSPECPROTO\nDESCRIPTOR.message_types_by_name['BrainParametersProto'] = _BRAINPARAMETERSPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nActionSpecProto = _reflection.GeneratedProtocolMessageType('ActionSpecProto', (_message.Message,), dict(\n  DESCRIPTOR = _ACTIONSPECPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.brain_parameters_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.ActionSpecProto)\n  ))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "_BRAINPARAMETERSPROTO.fields_by_name['action_spec'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "peekOfCode": "_BRAINPARAMETERSPROTO.fields_by_name['action_spec'].message_type = _ACTIONSPECPROTO\nDESCRIPTOR.message_types_by_name['ActionSpecProto'] = _ACTIONSPECPROTO\nDESCRIPTOR.message_types_by_name['BrainParametersProto'] = _BRAINPARAMETERSPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nActionSpecProto = _reflection.GeneratedProtocolMessageType('ActionSpecProto', (_message.Message,), dict(\n  DESCRIPTOR = _ACTIONSPECPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.brain_parameters_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.ActionSpecProto)\n  ))\n_sym_db.RegisterMessage(ActionSpecProto)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['ActionSpecProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['ActionSpecProto'] = _ACTIONSPECPROTO\nDESCRIPTOR.message_types_by_name['BrainParametersProto'] = _BRAINPARAMETERSPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nActionSpecProto = _reflection.GeneratedProtocolMessageType('ActionSpecProto', (_message.Message,), dict(\n  DESCRIPTOR = _ACTIONSPECPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.brain_parameters_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.ActionSpecProto)\n  ))\n_sym_db.RegisterMessage(ActionSpecProto)\nBrainParametersProto = _reflection.GeneratedProtocolMessageType('BrainParametersProto', (_message.Message,), dict(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['BrainParametersProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['BrainParametersProto'] = _BRAINPARAMETERSPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nActionSpecProto = _reflection.GeneratedProtocolMessageType('ActionSpecProto', (_message.Message,), dict(\n  DESCRIPTOR = _ACTIONSPECPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.brain_parameters_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.ActionSpecProto)\n  ))\n_sym_db.RegisterMessage(ActionSpecProto)\nBrainParametersProto = _reflection.GeneratedProtocolMessageType('BrainParametersProto', (_message.Message,), dict(\n  DESCRIPTOR = _BRAINPARAMETERSPROTO,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "ActionSpecProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "peekOfCode": "ActionSpecProto = _reflection.GeneratedProtocolMessageType('ActionSpecProto', (_message.Message,), dict(\n  DESCRIPTOR = _ACTIONSPECPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.brain_parameters_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.ActionSpecProto)\n  ))\n_sym_db.RegisterMessage(ActionSpecProto)\nBrainParametersProto = _reflection.GeneratedProtocolMessageType('BrainParametersProto', (_message.Message,), dict(\n  DESCRIPTOR = _BRAINPARAMETERSPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.brain_parameters_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.BrainParametersProto)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "BrainParametersProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "peekOfCode": "BrainParametersProto = _reflection.GeneratedProtocolMessageType('BrainParametersProto', (_message.Message,), dict(\n  DESCRIPTOR = _BRAINPARAMETERSPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.brain_parameters_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.BrainParametersProto)\n  ))\n_sym_db.RegisterMessage(BrainParametersProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.brain_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/capabilities.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n5mlagents_envs/communicator_objects/capabilities.proto\\x12\\x14\\x63ommunicator_objects\\\"\\xec\\x01\\n\\x18UnityRLCapabilitiesProto\\x12\\x1a\\n\\x12\\x62\\x61seRLCapabilities\\x18\\x01 \\x01(\\x08\\x12#\\n\\x1b\\x63oncatenatedPngObservations\\x18\\x02 \\x01(\\x08\\x12 \\n\\x18\\x63ompressedChannelMapping\\x18\\x03 \\x01(\\x08\\x12\\x15\\n\\rhybridActions\\x18\\x04 \\x01(\\x08\\x12\\x19\\n\\x11trainingAnalytics\\x18\\x05 \\x01(\\x08\\x12!\\n\\x19variableLengthObservation\\x18\\x06 \\x01(\\x08\\x12\\x18\\n\\x10multiAgentGroups\\x18\\x07 \\x01(\\x08\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_UNITYRLCAPABILITIESPROTO = _descriptor.Descriptor(\n  name='UnityRLCapabilitiesProto',\n  full_name='communicator_objects.UnityRLCapabilitiesProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/capabilities.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n5mlagents_envs/communicator_objects/capabilities.proto\\x12\\x14\\x63ommunicator_objects\\\"\\xec\\x01\\n\\x18UnityRLCapabilitiesProto\\x12\\x1a\\n\\x12\\x62\\x61seRLCapabilities\\x18\\x01 \\x01(\\x08\\x12#\\n\\x1b\\x63oncatenatedPngObservations\\x18\\x02 \\x01(\\x08\\x12 \\n\\x18\\x63ompressedChannelMapping\\x18\\x03 \\x01(\\x08\\x12\\x15\\n\\rhybridActions\\x18\\x04 \\x01(\\x08\\x12\\x19\\n\\x11trainingAnalytics\\x18\\x05 \\x01(\\x08\\x12!\\n\\x19variableLengthObservation\\x18\\x06 \\x01(\\x08\\x12\\x18\\n\\x10multiAgentGroups\\x18\\x07 \\x01(\\x08\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_UNITYRLCAPABILITIESPROTO = _descriptor.Descriptor(\n  name='UnityRLCapabilitiesProto',\n  full_name='communicator_objects.UnityRLCapabilitiesProto',\n  filename=None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLCAPABILITIESPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "peekOfCode": "_UNITYRLCAPABILITIESPROTO = _descriptor.Descriptor(\n  name='UnityRLCapabilitiesProto',\n  full_name='communicator_objects.UnityRLCapabilitiesProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='baseRLCapabilities', full_name='communicator_objects.UnityRLCapabilitiesProto.baseRLCapabilities', index=0,\n      number=1, type=8, cpp_type=7, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['UnityRLCapabilitiesProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['UnityRLCapabilitiesProto'] = _UNITYRLCAPABILITIESPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLCapabilitiesProto = _reflection.GeneratedProtocolMessageType('UnityRLCapabilitiesProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYRLCAPABILITIESPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.capabilities_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLCapabilitiesProto)\n  ))\n_sym_db.RegisterMessage(UnityRLCapabilitiesProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "documentation": {}
    },
    {
        "label": "UnityRLCapabilitiesProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "peekOfCode": "UnityRLCapabilitiesProto = _reflection.GeneratedProtocolMessageType('UnityRLCapabilitiesProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYRLCAPABILITIESPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.capabilities_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLCapabilitiesProto)\n  ))\n_sym_db.RegisterMessage(UnityRLCapabilitiesProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.capabilities_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/command.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n0mlagents_envs/communicator_objects/command.proto\\x12\\x14\\x63ommunicator_objects*-\\n\\x0c\\x43ommandProto\\x12\\x08\\n\\x04STEP\\x10\\x00\\x12\\t\\n\\x05RESET\\x10\\x01\\x12\\x08\\n\\x04QUIT\\x10\\x02\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_COMMANDPROTO = _descriptor.EnumDescriptor(\n  name='CommandProto',\n  full_name='communicator_objects.CommandProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/command.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n0mlagents_envs/communicator_objects/command.proto\\x12\\x14\\x63ommunicator_objects*-\\n\\x0c\\x43ommandProto\\x12\\x08\\n\\x04STEP\\x10\\x00\\x12\\t\\n\\x05RESET\\x10\\x01\\x12\\x08\\n\\x04QUIT\\x10\\x02\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_COMMANDPROTO = _descriptor.EnumDescriptor(\n  name='CommandProto',\n  full_name='communicator_objects.CommandProto',\n  filename=None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "documentation": {}
    },
    {
        "label": "_COMMANDPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "peekOfCode": "_COMMANDPROTO = _descriptor.EnumDescriptor(\n  name='CommandProto',\n  full_name='communicator_objects.CommandProto',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name='STEP', index=0, number=0,\n      options=None,\n      type=None),",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "documentation": {}
    },
    {
        "label": "CommandProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "peekOfCode": "CommandProto = enum_type_wrapper.EnumTypeWrapper(_COMMANDPROTO)\nSTEP = 0\nRESET = 1\nQUIT = 2\nDESCRIPTOR.enum_types_by_name['CommandProto'] = _COMMANDPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "documentation": {}
    },
    {
        "label": "STEP",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "peekOfCode": "STEP = 0\nRESET = 1\nQUIT = 2\nDESCRIPTOR.enum_types_by_name['CommandProto'] = _COMMANDPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "documentation": {}
    },
    {
        "label": "RESET",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "peekOfCode": "RESET = 1\nQUIT = 2\nDESCRIPTOR.enum_types_by_name['CommandProto'] = _COMMANDPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "documentation": {}
    },
    {
        "label": "QUIT",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "peekOfCode": "QUIT = 2\nDESCRIPTOR.enum_types_by_name['CommandProto'] = _COMMANDPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.enum_types_by_name['CommandProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "peekOfCode": "DESCRIPTOR.enum_types_by_name['CommandProto'] = _COMMANDPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.command_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/custom_reset_parameters.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n@mlagents_envs/communicator_objects/custom_reset_parameters.proto\\x12\\x14\\x63ommunicator_objects\\\"\\x1c\\n\\x1a\\x43ustomResetParametersProtoB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_CUSTOMRESETPARAMETERSPROTO = _descriptor.Descriptor(\n  name='CustomResetParametersProto',\n  full_name='communicator_objects.CustomResetParametersProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/custom_reset_parameters.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n@mlagents_envs/communicator_objects/custom_reset_parameters.proto\\x12\\x14\\x63ommunicator_objects\\\"\\x1c\\n\\x1a\\x43ustomResetParametersProtoB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_CUSTOMRESETPARAMETERSPROTO = _descriptor.Descriptor(\n  name='CustomResetParametersProto',\n  full_name='communicator_objects.CustomResetParametersProto',\n  filename=None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "_CUSTOMRESETPARAMETERSPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "peekOfCode": "_CUSTOMRESETPARAMETERSPROTO = _descriptor.Descriptor(\n  name='CustomResetParametersProto',\n  full_name='communicator_objects.CustomResetParametersProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n  ],\n  extensions=[\n  ],",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['CustomResetParametersProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['CustomResetParametersProto'] = _CUSTOMRESETPARAMETERSPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nCustomResetParametersProto = _reflection.GeneratedProtocolMessageType('CustomResetParametersProto', (_message.Message,), dict(\n  DESCRIPTOR = _CUSTOMRESETPARAMETERSPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.custom_reset_parameters_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.CustomResetParametersProto)\n  ))\n_sym_db.RegisterMessage(CustomResetParametersProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "CustomResetParametersProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "peekOfCode": "CustomResetParametersProto = _reflection.GeneratedProtocolMessageType('CustomResetParametersProto', (_message.Message,), dict(\n  DESCRIPTOR = _CUSTOMRESETPARAMETERSPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.custom_reset_parameters_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.CustomResetParametersProto)\n  ))\n_sym_db.RegisterMessage(CustomResetParametersProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.custom_reset_parameters_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/demonstration_meta.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n;mlagents_envs/communicator_objects/demonstration_meta.proto\\x12\\x14\\x63ommunicator_objects\\\"\\x8d\\x01\\n\\x16\\x44\\x65monstrationMetaProto\\x12\\x13\\n\\x0b\\x61pi_version\\x18\\x01 \\x01(\\x05\\x12\\x1a\\n\\x12\\x64\\x65monstration_name\\x18\\x02 \\x01(\\t\\x12\\x14\\n\\x0cnumber_steps\\x18\\x03 \\x01(\\x05\\x12\\x17\\n\\x0fnumber_episodes\\x18\\x04 \\x01(\\x05\\x12\\x13\\n\\x0bmean_reward\\x18\\x05 \\x01(\\x02\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_DEMONSTRATIONMETAPROTO = _descriptor.Descriptor(\n  name='DemonstrationMetaProto',\n  full_name='communicator_objects.DemonstrationMetaProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/demonstration_meta.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n;mlagents_envs/communicator_objects/demonstration_meta.proto\\x12\\x14\\x63ommunicator_objects\\\"\\x8d\\x01\\n\\x16\\x44\\x65monstrationMetaProto\\x12\\x13\\n\\x0b\\x61pi_version\\x18\\x01 \\x01(\\x05\\x12\\x1a\\n\\x12\\x64\\x65monstration_name\\x18\\x02 \\x01(\\t\\x12\\x14\\n\\x0cnumber_steps\\x18\\x03 \\x01(\\x05\\x12\\x17\\n\\x0fnumber_episodes\\x18\\x04 \\x01(\\x05\\x12\\x13\\n\\x0bmean_reward\\x18\\x05 \\x01(\\x02\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_DEMONSTRATIONMETAPROTO = _descriptor.Descriptor(\n  name='DemonstrationMetaProto',\n  full_name='communicator_objects.DemonstrationMetaProto',\n  filename=None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "documentation": {}
    },
    {
        "label": "_DEMONSTRATIONMETAPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "peekOfCode": "_DEMONSTRATIONMETAPROTO = _descriptor.Descriptor(\n  name='DemonstrationMetaProto',\n  full_name='communicator_objects.DemonstrationMetaProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='api_version', full_name='communicator_objects.DemonstrationMetaProto.api_version', index=0,\n      number=1, type=5, cpp_type=1, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['DemonstrationMetaProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['DemonstrationMetaProto'] = _DEMONSTRATIONMETAPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nDemonstrationMetaProto = _reflection.GeneratedProtocolMessageType('DemonstrationMetaProto', (_message.Message,), dict(\n  DESCRIPTOR = _DEMONSTRATIONMETAPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.demonstration_meta_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.DemonstrationMetaProto)\n  ))\n_sym_db.RegisterMessage(DemonstrationMetaProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "documentation": {}
    },
    {
        "label": "DemonstrationMetaProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "peekOfCode": "DemonstrationMetaProto = _reflection.GeneratedProtocolMessageType('DemonstrationMetaProto', (_message.Message,), dict(\n  DESCRIPTOR = _DEMONSTRATIONMETAPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.demonstration_meta_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.DemonstrationMetaProto)\n  ))\n_sym_db.RegisterMessage(DemonstrationMetaProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.demonstration_meta_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/engine_configuration.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n=mlagents_envs/communicator_objects/engine_configuration.proto\\x12\\x14\\x63ommunicator_objects\\\"\\x95\\x01\\n\\x18\\x45ngineConfigurationProto\\x12\\r\\n\\x05width\\x18\\x01 \\x01(\\x05\\x12\\x0e\\n\\x06height\\x18\\x02 \\x01(\\x05\\x12\\x15\\n\\rquality_level\\x18\\x03 \\x01(\\x05\\x12\\x12\\n\\ntime_scale\\x18\\x04 \\x01(\\x02\\x12\\x19\\n\\x11target_frame_rate\\x18\\x05 \\x01(\\x05\\x12\\x14\\n\\x0cshow_monitor\\x18\\x06 \\x01(\\x08\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_ENGINECONFIGURATIONPROTO = _descriptor.Descriptor(\n  name='EngineConfigurationProto',\n  full_name='communicator_objects.EngineConfigurationProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/engine_configuration.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n=mlagents_envs/communicator_objects/engine_configuration.proto\\x12\\x14\\x63ommunicator_objects\\\"\\x95\\x01\\n\\x18\\x45ngineConfigurationProto\\x12\\r\\n\\x05width\\x18\\x01 \\x01(\\x05\\x12\\x0e\\n\\x06height\\x18\\x02 \\x01(\\x05\\x12\\x15\\n\\rquality_level\\x18\\x03 \\x01(\\x05\\x12\\x12\\n\\ntime_scale\\x18\\x04 \\x01(\\x02\\x12\\x19\\n\\x11target_frame_rate\\x18\\x05 \\x01(\\x05\\x12\\x14\\n\\x0cshow_monitor\\x18\\x06 \\x01(\\x08\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_ENGINECONFIGURATIONPROTO = _descriptor.Descriptor(\n  name='EngineConfigurationProto',\n  full_name='communicator_objects.EngineConfigurationProto',\n  filename=None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "documentation": {}
    },
    {
        "label": "_ENGINECONFIGURATIONPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "peekOfCode": "_ENGINECONFIGURATIONPROTO = _descriptor.Descriptor(\n  name='EngineConfigurationProto',\n  full_name='communicator_objects.EngineConfigurationProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='width', full_name='communicator_objects.EngineConfigurationProto.width', index=0,\n      number=1, type=5, cpp_type=1, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['EngineConfigurationProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['EngineConfigurationProto'] = _ENGINECONFIGURATIONPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nEngineConfigurationProto = _reflection.GeneratedProtocolMessageType('EngineConfigurationProto', (_message.Message,), dict(\n  DESCRIPTOR = _ENGINECONFIGURATIONPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.engine_configuration_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.EngineConfigurationProto)\n  ))\n_sym_db.RegisterMessage(EngineConfigurationProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "documentation": {}
    },
    {
        "label": "EngineConfigurationProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "peekOfCode": "EngineConfigurationProto = _reflection.GeneratedProtocolMessageType('EngineConfigurationProto', (_message.Message,), dict(\n  DESCRIPTOR = _ENGINECONFIGURATIONPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.engine_configuration_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.EngineConfigurationProto)\n  ))\n_sym_db.RegisterMessage(EngineConfigurationProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.engine_configuration_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/header.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n/mlagents_envs/communicator_objects/header.proto\\x12\\x14\\x63ommunicator_objects\\\".\\n\\x0bHeaderProto\\x12\\x0e\\n\\x06status\\x18\\x01 \\x01(\\x05\\x12\\x0f\\n\\x07message\\x18\\x02 \\x01(\\tB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_HEADERPROTO = _descriptor.Descriptor(\n  name='HeaderProto',\n  full_name='communicator_objects.HeaderProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/header.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n/mlagents_envs/communicator_objects/header.proto\\x12\\x14\\x63ommunicator_objects\\\".\\n\\x0bHeaderProto\\x12\\x0e\\n\\x06status\\x18\\x01 \\x01(\\x05\\x12\\x0f\\n\\x07message\\x18\\x02 \\x01(\\tB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_HEADERPROTO = _descriptor.Descriptor(\n  name='HeaderProto',\n  full_name='communicator_objects.HeaderProto',\n  filename=None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "documentation": {}
    },
    {
        "label": "_HEADERPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "peekOfCode": "_HEADERPROTO = _descriptor.Descriptor(\n  name='HeaderProto',\n  full_name='communicator_objects.HeaderProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='status', full_name='communicator_objects.HeaderProto.status', index=0,\n      number=1, type=5, cpp_type=1, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['HeaderProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['HeaderProto'] = _HEADERPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nHeaderProto = _reflection.GeneratedProtocolMessageType('HeaderProto', (_message.Message,), dict(\n  DESCRIPTOR = _HEADERPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.header_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.HeaderProto)\n  ))\n_sym_db.RegisterMessage(HeaderProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "documentation": {}
    },
    {
        "label": "HeaderProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "peekOfCode": "HeaderProto = _reflection.GeneratedProtocolMessageType('HeaderProto', (_message.Message,), dict(\n  DESCRIPTOR = _HEADERPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.header_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.HeaderProto)\n  ))\n_sym_db.RegisterMessage(HeaderProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.header_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/observation.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n4mlagents_envs/communicator_objects/observation.proto\\x12\\x14\\x63ommunicator_objects\\\"\\x8f\\x03\\n\\x10ObservationProto\\x12\\r\\n\\x05shape\\x18\\x01 \\x03(\\x05\\x12\\x44\\n\\x10\\x63ompression_type\\x18\\x02 \\x01(\\x0e\\x32*.communicator_objects.CompressionTypeProto\\x12\\x19\\n\\x0f\\x63ompressed_data\\x18\\x03 \\x01(\\x0cH\\x00\\x12\\x46\\n\\nfloat_data\\x18\\x04 \\x01(\\x0b\\x32\\x30.communicator_objects.ObservationProto.FloatDataH\\x00\\x12\\\"\\n\\x1a\\x63ompressed_channel_mapping\\x18\\x05 \\x03(\\x05\\x12\\x1c\\n\\x14\\x64imension_properties\\x18\\x06 \\x03(\\x05\\x12\\x44\\n\\x10observation_type\\x18\\x07 \\x01(\\x0e\\x32*.communicator_objects.ObservationTypeProto\\x12\\x0c\\n\\x04name\\x18\\x08 \\x01(\\t\\x1a\\x19\\n\\tFloatData\\x12\\x0c\\n\\x04\\x64\\x61ta\\x18\\x01 \\x03(\\x02\\x42\\x12\\n\\x10observation_data*)\\n\\x14\\x43ompressionTypeProto\\x12\\x08\\n\\x04NONE\\x10\\x00\\x12\\x07\\n\\x03PNG\\x10\\x01*@\\n\\x14ObservationTypeProto\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\x0f\\n\\x0bGOAL_SIGNAL\\x10\\x01\\\"\\x04\\x08\\x02\\x10\\x02\\\"\\x04\\x08\\x03\\x10\\x03\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_COMPRESSIONTYPEPROTO = _descriptor.EnumDescriptor(\n  name='CompressionTypeProto',\n  full_name='communicator_objects.CompressionTypeProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/observation.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n4mlagents_envs/communicator_objects/observation.proto\\x12\\x14\\x63ommunicator_objects\\\"\\x8f\\x03\\n\\x10ObservationProto\\x12\\r\\n\\x05shape\\x18\\x01 \\x03(\\x05\\x12\\x44\\n\\x10\\x63ompression_type\\x18\\x02 \\x01(\\x0e\\x32*.communicator_objects.CompressionTypeProto\\x12\\x19\\n\\x0f\\x63ompressed_data\\x18\\x03 \\x01(\\x0cH\\x00\\x12\\x46\\n\\nfloat_data\\x18\\x04 \\x01(\\x0b\\x32\\x30.communicator_objects.ObservationProto.FloatDataH\\x00\\x12\\\"\\n\\x1a\\x63ompressed_channel_mapping\\x18\\x05 \\x03(\\x05\\x12\\x1c\\n\\x14\\x64imension_properties\\x18\\x06 \\x03(\\x05\\x12\\x44\\n\\x10observation_type\\x18\\x07 \\x01(\\x0e\\x32*.communicator_objects.ObservationTypeProto\\x12\\x0c\\n\\x04name\\x18\\x08 \\x01(\\t\\x1a\\x19\\n\\tFloatData\\x12\\x0c\\n\\x04\\x64\\x61ta\\x18\\x01 \\x03(\\x02\\x42\\x12\\n\\x10observation_data*)\\n\\x14\\x43ompressionTypeProto\\x12\\x08\\n\\x04NONE\\x10\\x00\\x12\\x07\\n\\x03PNG\\x10\\x01*@\\n\\x14ObservationTypeProto\\x12\\x0b\\n\\x07\\x44\\x45\\x46\\x41ULT\\x10\\x00\\x12\\x0f\\n\\x0bGOAL_SIGNAL\\x10\\x01\\\"\\x04\\x08\\x02\\x10\\x02\\\"\\x04\\x08\\x03\\x10\\x03\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_COMPRESSIONTYPEPROTO = _descriptor.EnumDescriptor(\n  name='CompressionTypeProto',\n  full_name='communicator_objects.CompressionTypeProto',\n  filename=None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "_COMPRESSIONTYPEPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "_COMPRESSIONTYPEPROTO = _descriptor.EnumDescriptor(\n  name='CompressionTypeProto',\n  full_name='communicator_objects.CompressionTypeProto',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name='NONE', index=0, number=0,\n      options=None,\n      type=None),",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "CompressionTypeProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "CompressionTypeProto = enum_type_wrapper.EnumTypeWrapper(_COMPRESSIONTYPEPROTO)\n_OBSERVATIONTYPEPROTO = _descriptor.EnumDescriptor(\n  name='ObservationTypeProto',\n  full_name='communicator_objects.ObservationTypeProto',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name='DEFAULT', index=0, number=0,\n      options=None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "_OBSERVATIONTYPEPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "_OBSERVATIONTYPEPROTO = _descriptor.EnumDescriptor(\n  name='ObservationTypeProto',\n  full_name='communicator_objects.ObservationTypeProto',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name='DEFAULT', index=0, number=0,\n      options=None,\n      type=None),",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "ObservationTypeProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "ObservationTypeProto = enum_type_wrapper.EnumTypeWrapper(_OBSERVATIONTYPEPROTO)\nNONE = 0\nPNG = 1\nDEFAULT = 0\nGOAL_SIGNAL = 1\n_OBSERVATIONPROTO_FLOATDATA = _descriptor.Descriptor(\n  name='FloatData',\n  full_name='communicator_objects.ObservationProto.FloatData',\n  filename=None,\n  file=DESCRIPTOR,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "NONE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "NONE = 0\nPNG = 1\nDEFAULT = 0\nGOAL_SIGNAL = 1\n_OBSERVATIONPROTO_FLOATDATA = _descriptor.Descriptor(\n  name='FloatData',\n  full_name='communicator_objects.ObservationProto.FloatData',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "PNG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "PNG = 1\nDEFAULT = 0\nGOAL_SIGNAL = 1\n_OBSERVATIONPROTO_FLOATDATA = _descriptor.Descriptor(\n  name='FloatData',\n  full_name='communicator_objects.ObservationProto.FloatData',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "DEFAULT",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "DEFAULT = 0\nGOAL_SIGNAL = 1\n_OBSERVATIONPROTO_FLOATDATA = _descriptor.Descriptor(\n  name='FloatData',\n  full_name='communicator_objects.ObservationProto.FloatData',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "GOAL_SIGNAL",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "GOAL_SIGNAL = 1\n_OBSERVATIONPROTO_FLOATDATA = _descriptor.Descriptor(\n  name='FloatData',\n  full_name='communicator_objects.ObservationProto.FloatData',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='data', full_name='communicator_objects.ObservationProto.FloatData.data', index=0,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "_OBSERVATIONPROTO_FLOATDATA",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "_OBSERVATIONPROTO_FLOATDATA = _descriptor.Descriptor(\n  name='FloatData',\n  full_name='communicator_objects.ObservationProto.FloatData',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='data', full_name='communicator_objects.ObservationProto.FloatData.data', index=0,\n      number=1, type=2, cpp_type=6, label=3,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "_OBSERVATIONPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "_OBSERVATIONPROTO = _descriptor.Descriptor(\n  name='ObservationProto',\n  full_name='communicator_objects.ObservationProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='shape', full_name='communicator_objects.ObservationProto.shape', index=0,\n      number=1, type=5, cpp_type=1, label=3,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "_OBSERVATIONPROTO_FLOATDATA.containing_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "_OBSERVATIONPROTO_FLOATDATA.containing_type = _OBSERVATIONPROTO\n_OBSERVATIONPROTO.fields_by_name['compression_type'].enum_type = _COMPRESSIONTYPEPROTO\n_OBSERVATIONPROTO.fields_by_name['float_data'].message_type = _OBSERVATIONPROTO_FLOATDATA\n_OBSERVATIONPROTO.fields_by_name['observation_type'].enum_type = _OBSERVATIONTYPEPROTO\n_OBSERVATIONPROTO.oneofs_by_name['observation_data'].fields.append(\n  _OBSERVATIONPROTO.fields_by_name['compressed_data'])\n_OBSERVATIONPROTO.fields_by_name['compressed_data'].containing_oneof = _OBSERVATIONPROTO.oneofs_by_name['observation_data']\n_OBSERVATIONPROTO.oneofs_by_name['observation_data'].fields.append(\n  _OBSERVATIONPROTO.fields_by_name['float_data'])\n_OBSERVATIONPROTO.fields_by_name['float_data'].containing_oneof = _OBSERVATIONPROTO.oneofs_by_name['observation_data']",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "_OBSERVATIONPROTO.fields_by_name['compression_type'].enum_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "_OBSERVATIONPROTO.fields_by_name['compression_type'].enum_type = _COMPRESSIONTYPEPROTO\n_OBSERVATIONPROTO.fields_by_name['float_data'].message_type = _OBSERVATIONPROTO_FLOATDATA\n_OBSERVATIONPROTO.fields_by_name['observation_type'].enum_type = _OBSERVATIONTYPEPROTO\n_OBSERVATIONPROTO.oneofs_by_name['observation_data'].fields.append(\n  _OBSERVATIONPROTO.fields_by_name['compressed_data'])\n_OBSERVATIONPROTO.fields_by_name['compressed_data'].containing_oneof = _OBSERVATIONPROTO.oneofs_by_name['observation_data']\n_OBSERVATIONPROTO.oneofs_by_name['observation_data'].fields.append(\n  _OBSERVATIONPROTO.fields_by_name['float_data'])\n_OBSERVATIONPROTO.fields_by_name['float_data'].containing_oneof = _OBSERVATIONPROTO.oneofs_by_name['observation_data']\nDESCRIPTOR.message_types_by_name['ObservationProto'] = _OBSERVATIONPROTO",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "_OBSERVATIONPROTO.fields_by_name['float_data'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "_OBSERVATIONPROTO.fields_by_name['float_data'].message_type = _OBSERVATIONPROTO_FLOATDATA\n_OBSERVATIONPROTO.fields_by_name['observation_type'].enum_type = _OBSERVATIONTYPEPROTO\n_OBSERVATIONPROTO.oneofs_by_name['observation_data'].fields.append(\n  _OBSERVATIONPROTO.fields_by_name['compressed_data'])\n_OBSERVATIONPROTO.fields_by_name['compressed_data'].containing_oneof = _OBSERVATIONPROTO.oneofs_by_name['observation_data']\n_OBSERVATIONPROTO.oneofs_by_name['observation_data'].fields.append(\n  _OBSERVATIONPROTO.fields_by_name['float_data'])\n_OBSERVATIONPROTO.fields_by_name['float_data'].containing_oneof = _OBSERVATIONPROTO.oneofs_by_name['observation_data']\nDESCRIPTOR.message_types_by_name['ObservationProto'] = _OBSERVATIONPROTO\nDESCRIPTOR.enum_types_by_name['CompressionTypeProto'] = _COMPRESSIONTYPEPROTO",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "_OBSERVATIONPROTO.fields_by_name['observation_type'].enum_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "_OBSERVATIONPROTO.fields_by_name['observation_type'].enum_type = _OBSERVATIONTYPEPROTO\n_OBSERVATIONPROTO.oneofs_by_name['observation_data'].fields.append(\n  _OBSERVATIONPROTO.fields_by_name['compressed_data'])\n_OBSERVATIONPROTO.fields_by_name['compressed_data'].containing_oneof = _OBSERVATIONPROTO.oneofs_by_name['observation_data']\n_OBSERVATIONPROTO.oneofs_by_name['observation_data'].fields.append(\n  _OBSERVATIONPROTO.fields_by_name['float_data'])\n_OBSERVATIONPROTO.fields_by_name['float_data'].containing_oneof = _OBSERVATIONPROTO.oneofs_by_name['observation_data']\nDESCRIPTOR.message_types_by_name['ObservationProto'] = _OBSERVATIONPROTO\nDESCRIPTOR.enum_types_by_name['CompressionTypeProto'] = _COMPRESSIONTYPEPROTO\nDESCRIPTOR.enum_types_by_name['ObservationTypeProto'] = _OBSERVATIONTYPEPROTO",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "_OBSERVATIONPROTO.fields_by_name['compressed_data'].containing_oneof",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "_OBSERVATIONPROTO.fields_by_name['compressed_data'].containing_oneof = _OBSERVATIONPROTO.oneofs_by_name['observation_data']\n_OBSERVATIONPROTO.oneofs_by_name['observation_data'].fields.append(\n  _OBSERVATIONPROTO.fields_by_name['float_data'])\n_OBSERVATIONPROTO.fields_by_name['float_data'].containing_oneof = _OBSERVATIONPROTO.oneofs_by_name['observation_data']\nDESCRIPTOR.message_types_by_name['ObservationProto'] = _OBSERVATIONPROTO\nDESCRIPTOR.enum_types_by_name['CompressionTypeProto'] = _COMPRESSIONTYPEPROTO\nDESCRIPTOR.enum_types_by_name['ObservationTypeProto'] = _OBSERVATIONTYPEPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nObservationProto = _reflection.GeneratedProtocolMessageType('ObservationProto', (_message.Message,), dict(\n  FloatData = _reflection.GeneratedProtocolMessageType('FloatData', (_message.Message,), dict(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "_OBSERVATIONPROTO.fields_by_name['float_data'].containing_oneof",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "_OBSERVATIONPROTO.fields_by_name['float_data'].containing_oneof = _OBSERVATIONPROTO.oneofs_by_name['observation_data']\nDESCRIPTOR.message_types_by_name['ObservationProto'] = _OBSERVATIONPROTO\nDESCRIPTOR.enum_types_by_name['CompressionTypeProto'] = _COMPRESSIONTYPEPROTO\nDESCRIPTOR.enum_types_by_name['ObservationTypeProto'] = _OBSERVATIONTYPEPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nObservationProto = _reflection.GeneratedProtocolMessageType('ObservationProto', (_message.Message,), dict(\n  FloatData = _reflection.GeneratedProtocolMessageType('FloatData', (_message.Message,), dict(\n    DESCRIPTOR = _OBSERVATIONPROTO_FLOATDATA,\n    __module__ = 'mlagents_envs.communicator_objects.observation_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.ObservationProto.FloatData)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['ObservationProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['ObservationProto'] = _OBSERVATIONPROTO\nDESCRIPTOR.enum_types_by_name['CompressionTypeProto'] = _COMPRESSIONTYPEPROTO\nDESCRIPTOR.enum_types_by_name['ObservationTypeProto'] = _OBSERVATIONTYPEPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nObservationProto = _reflection.GeneratedProtocolMessageType('ObservationProto', (_message.Message,), dict(\n  FloatData = _reflection.GeneratedProtocolMessageType('FloatData', (_message.Message,), dict(\n    DESCRIPTOR = _OBSERVATIONPROTO_FLOATDATA,\n    __module__ = 'mlagents_envs.communicator_objects.observation_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.ObservationProto.FloatData)\n    ))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.enum_types_by_name['CompressionTypeProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "DESCRIPTOR.enum_types_by_name['CompressionTypeProto'] = _COMPRESSIONTYPEPROTO\nDESCRIPTOR.enum_types_by_name['ObservationTypeProto'] = _OBSERVATIONTYPEPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nObservationProto = _reflection.GeneratedProtocolMessageType('ObservationProto', (_message.Message,), dict(\n  FloatData = _reflection.GeneratedProtocolMessageType('FloatData', (_message.Message,), dict(\n    DESCRIPTOR = _OBSERVATIONPROTO_FLOATDATA,\n    __module__ = 'mlagents_envs.communicator_objects.observation_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.ObservationProto.FloatData)\n    ))\n  ,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.enum_types_by_name['ObservationTypeProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "DESCRIPTOR.enum_types_by_name['ObservationTypeProto'] = _OBSERVATIONTYPEPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nObservationProto = _reflection.GeneratedProtocolMessageType('ObservationProto', (_message.Message,), dict(\n  FloatData = _reflection.GeneratedProtocolMessageType('FloatData', (_message.Message,), dict(\n    DESCRIPTOR = _OBSERVATIONPROTO_FLOATDATA,\n    __module__ = 'mlagents_envs.communicator_objects.observation_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.ObservationProto.FloatData)\n    ))\n  ,\n  DESCRIPTOR = _OBSERVATIONPROTO,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "ObservationProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "ObservationProto = _reflection.GeneratedProtocolMessageType('ObservationProto', (_message.Message,), dict(\n  FloatData = _reflection.GeneratedProtocolMessageType('FloatData', (_message.Message,), dict(\n    DESCRIPTOR = _OBSERVATIONPROTO_FLOATDATA,\n    __module__ = 'mlagents_envs.communicator_objects.observation_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.ObservationProto.FloatData)\n    ))\n  ,\n  DESCRIPTOR = _OBSERVATIONPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.observation_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.ObservationProto)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.observation_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/space_type.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n3mlagents_envs/communicator_objects/space_type.proto\\x12\\x14\\x63ommunicator_objects*.\\n\\x0eSpaceTypeProto\\x12\\x0c\\n\\x08\\x64iscrete\\x10\\x00\\x12\\x0e\\n\\ncontinuous\\x10\\x01\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_SPACETYPEPROTO = _descriptor.EnumDescriptor(\n  name='SpaceTypeProto',\n  full_name='communicator_objects.SpaceTypeProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/space_type.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n3mlagents_envs/communicator_objects/space_type.proto\\x12\\x14\\x63ommunicator_objects*.\\n\\x0eSpaceTypeProto\\x12\\x0c\\n\\x08\\x64iscrete\\x10\\x00\\x12\\x0e\\n\\ncontinuous\\x10\\x01\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_SPACETYPEPROTO = _descriptor.EnumDescriptor(\n  name='SpaceTypeProto',\n  full_name='communicator_objects.SpaceTypeProto',\n  filename=None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "documentation": {}
    },
    {
        "label": "_SPACETYPEPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "peekOfCode": "_SPACETYPEPROTO = _descriptor.EnumDescriptor(\n  name='SpaceTypeProto',\n  full_name='communicator_objects.SpaceTypeProto',\n  filename=None,\n  file=DESCRIPTOR,\n  values=[\n    _descriptor.EnumValueDescriptor(\n      name='discrete', index=0, number=0,\n      options=None,\n      type=None),",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "documentation": {}
    },
    {
        "label": "SpaceTypeProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "peekOfCode": "SpaceTypeProto = enum_type_wrapper.EnumTypeWrapper(_SPACETYPEPROTO)\ndiscrete = 0\ncontinuous = 1\nDESCRIPTOR.enum_types_by_name['SpaceTypeProto'] = _SPACETYPEPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "documentation": {}
    },
    {
        "label": "discrete",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "peekOfCode": "discrete = 0\ncontinuous = 1\nDESCRIPTOR.enum_types_by_name['SpaceTypeProto'] = _SPACETYPEPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "documentation": {}
    },
    {
        "label": "continuous",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "peekOfCode": "continuous = 1\nDESCRIPTOR.enum_types_by_name['SpaceTypeProto'] = _SPACETYPEPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.enum_types_by_name['SpaceTypeProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "peekOfCode": "DESCRIPTOR.enum_types_by_name['SpaceTypeProto'] = _SPACETYPEPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.space_type_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/training_analytics.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n;mlagents_envs/communicator_objects/training_analytics.proto\\x12\\x14\\x63ommunicator_objects\\\"\\xee\\x01\\n\\x1eTrainingEnvironmentInitialized\\x12\\x18\\n\\x10mlagents_version\\x18\\x01 \\x01(\\t\\x12\\x1d\\n\\x15mlagents_envs_version\\x18\\x02 \\x01(\\t\\x12\\x16\\n\\x0epython_version\\x18\\x03 \\x01(\\t\\x12\\x15\\n\\rtorch_version\\x18\\x04 \\x01(\\t\\x12\\x19\\n\\x11torch_device_type\\x18\\x05 \\x01(\\t\\x12\\x10\\n\\x08num_envs\\x18\\x06 \\x01(\\x05\\x12\\\"\\n\\x1anum_environment_parameters\\x18\\x07 \\x01(\\x05\\x12\\x13\\n\\x0brun_options\\x18\\x08 \\x01(\\t\\\"\\xbd\\x03\\n\\x1bTrainingBehaviorInitialized\\x12\\x15\\n\\rbehavior_name\\x18\\x01 \\x01(\\t\\x12\\x14\\n\\x0ctrainer_type\\x18\\x02 \\x01(\\t\\x12 \\n\\x18\\x65xtrinsic_reward_enabled\\x18\\x03 \\x01(\\x08\\x12\\x1b\\n\\x13gail_reward_enabled\\x18\\x04 \\x01(\\x08\\x12 \\n\\x18\\x63uriosity_reward_enabled\\x18\\x05 \\x01(\\x08\\x12\\x1a\\n\\x12rnd_reward_enabled\\x18\\x06 \\x01(\\x08\\x12\\\"\\n\\x1a\\x62\\x65havioral_cloning_enabled\\x18\\x07 \\x01(\\x08\\x12\\x19\\n\\x11recurrent_enabled\\x18\\x08 \\x01(\\x08\\x12\\x16\\n\\x0evisual_encoder\\x18\\t \\x01(\\t\\x12\\x1a\\n\\x12num_network_layers\\x18\\n \\x01(\\x05\\x12 \\n\\x18num_network_hidden_units\\x18\\x0b \\x01(\\x05\\x12\\x18\\n\\x10trainer_threaded\\x18\\x0c \\x01(\\x08\\x12\\x19\\n\\x11self_play_enabled\\x18\\r \\x01(\\x08\\x12\\x1a\\n\\x12\\x63urriculum_enabled\\x18\\x0e \\x01(\\x08\\x12\\x0e\\n\\x06\\x63onfig\\x18\\x0f \\x01(\\tB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_TRAININGENVIRONMENTINITIALIZED = _descriptor.Descriptor(\n  name='TrainingEnvironmentInitialized',\n  full_name='communicator_objects.TrainingEnvironmentInitialized',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/training_analytics.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n;mlagents_envs/communicator_objects/training_analytics.proto\\x12\\x14\\x63ommunicator_objects\\\"\\xee\\x01\\n\\x1eTrainingEnvironmentInitialized\\x12\\x18\\n\\x10mlagents_version\\x18\\x01 \\x01(\\t\\x12\\x1d\\n\\x15mlagents_envs_version\\x18\\x02 \\x01(\\t\\x12\\x16\\n\\x0epython_version\\x18\\x03 \\x01(\\t\\x12\\x15\\n\\rtorch_version\\x18\\x04 \\x01(\\t\\x12\\x19\\n\\x11torch_device_type\\x18\\x05 \\x01(\\t\\x12\\x10\\n\\x08num_envs\\x18\\x06 \\x01(\\x05\\x12\\\"\\n\\x1anum_environment_parameters\\x18\\x07 \\x01(\\x05\\x12\\x13\\n\\x0brun_options\\x18\\x08 \\x01(\\t\\\"\\xbd\\x03\\n\\x1bTrainingBehaviorInitialized\\x12\\x15\\n\\rbehavior_name\\x18\\x01 \\x01(\\t\\x12\\x14\\n\\x0ctrainer_type\\x18\\x02 \\x01(\\t\\x12 \\n\\x18\\x65xtrinsic_reward_enabled\\x18\\x03 \\x01(\\x08\\x12\\x1b\\n\\x13gail_reward_enabled\\x18\\x04 \\x01(\\x08\\x12 \\n\\x18\\x63uriosity_reward_enabled\\x18\\x05 \\x01(\\x08\\x12\\x1a\\n\\x12rnd_reward_enabled\\x18\\x06 \\x01(\\x08\\x12\\\"\\n\\x1a\\x62\\x65havioral_cloning_enabled\\x18\\x07 \\x01(\\x08\\x12\\x19\\n\\x11recurrent_enabled\\x18\\x08 \\x01(\\x08\\x12\\x16\\n\\x0evisual_encoder\\x18\\t \\x01(\\t\\x12\\x1a\\n\\x12num_network_layers\\x18\\n \\x01(\\x05\\x12 \\n\\x18num_network_hidden_units\\x18\\x0b \\x01(\\x05\\x12\\x18\\n\\x10trainer_threaded\\x18\\x0c \\x01(\\x08\\x12\\x19\\n\\x11self_play_enabled\\x18\\r \\x01(\\x08\\x12\\x1a\\n\\x12\\x63urriculum_enabled\\x18\\x0e \\x01(\\x08\\x12\\x0e\\n\\x06\\x63onfig\\x18\\x0f \\x01(\\tB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n)\n_TRAININGENVIRONMENTINITIALIZED = _descriptor.Descriptor(\n  name='TrainingEnvironmentInitialized',\n  full_name='communicator_objects.TrainingEnvironmentInitialized',\n  filename=None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "documentation": {}
    },
    {
        "label": "_TRAININGENVIRONMENTINITIALIZED",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "peekOfCode": "_TRAININGENVIRONMENTINITIALIZED = _descriptor.Descriptor(\n  name='TrainingEnvironmentInitialized',\n  full_name='communicator_objects.TrainingEnvironmentInitialized',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='mlagents_version', full_name='communicator_objects.TrainingEnvironmentInitialized.mlagents_version', index=0,\n      number=1, type=9, cpp_type=9, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "documentation": {}
    },
    {
        "label": "_TRAININGBEHAVIORINITIALIZED",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "peekOfCode": "_TRAININGBEHAVIORINITIALIZED = _descriptor.Descriptor(\n  name='TrainingBehaviorInitialized',\n  full_name='communicator_objects.TrainingBehaviorInitialized',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='behavior_name', full_name='communicator_objects.TrainingBehaviorInitialized.behavior_name', index=0,\n      number=1, type=9, cpp_type=9, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['TrainingEnvironmentInitialized']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['TrainingEnvironmentInitialized'] = _TRAININGENVIRONMENTINITIALIZED\nDESCRIPTOR.message_types_by_name['TrainingBehaviorInitialized'] = _TRAININGBEHAVIORINITIALIZED\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nTrainingEnvironmentInitialized = _reflection.GeneratedProtocolMessageType('TrainingEnvironmentInitialized', (_message.Message,), dict(\n  DESCRIPTOR = _TRAININGENVIRONMENTINITIALIZED,\n  __module__ = 'mlagents_envs.communicator_objects.training_analytics_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.TrainingEnvironmentInitialized)\n  ))\n_sym_db.RegisterMessage(TrainingEnvironmentInitialized)\nTrainingBehaviorInitialized = _reflection.GeneratedProtocolMessageType('TrainingBehaviorInitialized', (_message.Message,), dict(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['TrainingBehaviorInitialized']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['TrainingBehaviorInitialized'] = _TRAININGBEHAVIORINITIALIZED\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nTrainingEnvironmentInitialized = _reflection.GeneratedProtocolMessageType('TrainingEnvironmentInitialized', (_message.Message,), dict(\n  DESCRIPTOR = _TRAININGENVIRONMENTINITIALIZED,\n  __module__ = 'mlagents_envs.communicator_objects.training_analytics_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.TrainingEnvironmentInitialized)\n  ))\n_sym_db.RegisterMessage(TrainingEnvironmentInitialized)\nTrainingBehaviorInitialized = _reflection.GeneratedProtocolMessageType('TrainingBehaviorInitialized', (_message.Message,), dict(\n  DESCRIPTOR = _TRAININGBEHAVIORINITIALIZED,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "documentation": {}
    },
    {
        "label": "TrainingEnvironmentInitialized",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "peekOfCode": "TrainingEnvironmentInitialized = _reflection.GeneratedProtocolMessageType('TrainingEnvironmentInitialized', (_message.Message,), dict(\n  DESCRIPTOR = _TRAININGENVIRONMENTINITIALIZED,\n  __module__ = 'mlagents_envs.communicator_objects.training_analytics_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.TrainingEnvironmentInitialized)\n  ))\n_sym_db.RegisterMessage(TrainingEnvironmentInitialized)\nTrainingBehaviorInitialized = _reflection.GeneratedProtocolMessageType('TrainingBehaviorInitialized', (_message.Message,), dict(\n  DESCRIPTOR = _TRAININGBEHAVIORINITIALIZED,\n  __module__ = 'mlagents_envs.communicator_objects.training_analytics_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.TrainingBehaviorInitialized)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "documentation": {}
    },
    {
        "label": "TrainingBehaviorInitialized",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "peekOfCode": "TrainingBehaviorInitialized = _reflection.GeneratedProtocolMessageType('TrainingBehaviorInitialized', (_message.Message,), dict(\n  DESCRIPTOR = _TRAININGBEHAVIORINITIALIZED,\n  __module__ = 'mlagents_envs.communicator_objects.training_analytics_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.TrainingBehaviorInitialized)\n  ))\n_sym_db.RegisterMessage(TrainingBehaviorInitialized)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.training_analytics_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nfrom mlagents_envs.communicator_objects import unity_rl_input_pb2 as mlagents__envs_dot_communicator__objects_dot_unity__rl__input__pb2\nfrom mlagents_envs.communicator_objects import unity_rl_initialization_input_pb2 as mlagents__envs_dot_communicator__objects_dot_unity__rl__initialization__input__pb2\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_input.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n4mlagents_envs/communicator_objects/unity_input.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x37mlagents_envs/communicator_objects/unity_rl_input.proto\\x1a\\x46mlagents_envs/communicator_objects/unity_rl_initialization_input.proto\\\"\\xa4\\x01\\n\\x0fUnityInputProto\\x12\\x39\\n\\x08rl_input\\x18\\x01 \\x01(\\x0b\\x32\\'.communicator_objects.UnityRLInputProto\\x12V\\n\\x17rl_initialization_input\\x18\\x02 \\x01(\\x0b\\x32\\x35.communicator_objects.UnityRLInitializationInputProtoB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_unity__rl__input__pb2.DESCRIPTOR,mlagents__envs_dot_communicator__objects_dot_unity__rl__initialization__input__pb2.DESCRIPTOR,])",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_input.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n4mlagents_envs/communicator_objects/unity_input.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x37mlagents_envs/communicator_objects/unity_rl_input.proto\\x1a\\x46mlagents_envs/communicator_objects/unity_rl_initialization_input.proto\\\"\\xa4\\x01\\n\\x0fUnityInputProto\\x12\\x39\\n\\x08rl_input\\x18\\x01 \\x01(\\x0b\\x32\\'.communicator_objects.UnityRLInputProto\\x12V\\n\\x17rl_initialization_input\\x18\\x02 \\x01(\\x0b\\x32\\x35.communicator_objects.UnityRLInitializationInputProtoB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_unity__rl__input__pb2.DESCRIPTOR,mlagents__envs_dot_communicator__objects_dot_unity__rl__initialization__input__pb2.DESCRIPTOR,])\n_UNITYINPUTPROTO = _descriptor.Descriptor(\n  name='UnityInputProto',\n  full_name='communicator_objects.UnityInputProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYINPUTPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "peekOfCode": "_UNITYINPUTPROTO = _descriptor.Descriptor(\n  name='UnityInputProto',\n  full_name='communicator_objects.UnityInputProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='rl_input', full_name='communicator_objects.UnityInputProto.rl_input', index=0,\n      number=1, type=11, cpp_type=10, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYINPUTPROTO.fields_by_name['rl_input'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "peekOfCode": "_UNITYINPUTPROTO.fields_by_name['rl_input'].message_type = mlagents__envs_dot_communicator__objects_dot_unity__rl__input__pb2._UNITYRLINPUTPROTO\n_UNITYINPUTPROTO.fields_by_name['rl_initialization_input'].message_type = mlagents__envs_dot_communicator__objects_dot_unity__rl__initialization__input__pb2._UNITYRLINITIALIZATIONINPUTPROTO\nDESCRIPTOR.message_types_by_name['UnityInputProto'] = _UNITYINPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityInputProto = _reflection.GeneratedProtocolMessageType('UnityInputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYINPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_input_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityInputProto)\n  ))\n_sym_db.RegisterMessage(UnityInputProto)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYINPUTPROTO.fields_by_name['rl_initialization_input'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "peekOfCode": "_UNITYINPUTPROTO.fields_by_name['rl_initialization_input'].message_type = mlagents__envs_dot_communicator__objects_dot_unity__rl__initialization__input__pb2._UNITYRLINITIALIZATIONINPUTPROTO\nDESCRIPTOR.message_types_by_name['UnityInputProto'] = _UNITYINPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityInputProto = _reflection.GeneratedProtocolMessageType('UnityInputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYINPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_input_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityInputProto)\n  ))\n_sym_db.RegisterMessage(UnityInputProto)\nDESCRIPTOR.has_options = True",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['UnityInputProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['UnityInputProto'] = _UNITYINPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityInputProto = _reflection.GeneratedProtocolMessageType('UnityInputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYINPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_input_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityInputProto)\n  ))\n_sym_db.RegisterMessage(UnityInputProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "UnityInputProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "peekOfCode": "UnityInputProto = _reflection.GeneratedProtocolMessageType('UnityInputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYINPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_input_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityInputProto)\n  ))\n_sym_db.RegisterMessage(UnityInputProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_input_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nfrom mlagents_envs.communicator_objects import unity_output_pb2 as mlagents__envs_dot_communicator__objects_dot_unity__output__pb2\nfrom mlagents_envs.communicator_objects import unity_input_pb2 as mlagents__envs_dot_communicator__objects_dot_unity__input__pb2\nfrom mlagents_envs.communicator_objects import header_pb2 as mlagents__envs_dot_communicator__objects_dot_header__pb2\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_message.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n6mlagents_envs/communicator_objects/unity_message.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x35mlagents_envs/communicator_objects/unity_output.proto\\x1a\\x34mlagents_envs/communicator_objects/unity_input.proto\\x1a/mlagents_envs/communicator_objects/header.proto\\\"\\xc0\\x01\\n\\x11UnityMessageProto\\x12\\x31\\n\\x06header\\x18\\x01 \\x01(\\x0b\\x32!.communicator_objects.HeaderProto\\x12<\\n\\x0cunity_output\\x18\\x02 \\x01(\\x0b\\x32&.communicator_objects.UnityOutputProto\\x12:\\n\\x0bunity_input\\x18\\x03 \\x01(\\x0b\\x32%.communicator_objects.UnityInputProtoB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_message.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n6mlagents_envs/communicator_objects/unity_message.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x35mlagents_envs/communicator_objects/unity_output.proto\\x1a\\x34mlagents_envs/communicator_objects/unity_input.proto\\x1a/mlagents_envs/communicator_objects/header.proto\\\"\\xc0\\x01\\n\\x11UnityMessageProto\\x12\\x31\\n\\x06header\\x18\\x01 \\x01(\\x0b\\x32!.communicator_objects.HeaderProto\\x12<\\n\\x0cunity_output\\x18\\x02 \\x01(\\x0b\\x32&.communicator_objects.UnityOutputProto\\x12:\\n\\x0bunity_input\\x18\\x03 \\x01(\\x0b\\x32%.communicator_objects.UnityInputProtoB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_unity__output__pb2.DESCRIPTOR,mlagents__envs_dot_communicator__objects_dot_unity__input__pb2.DESCRIPTOR,mlagents__envs_dot_communicator__objects_dot_header__pb2.DESCRIPTOR,])\n_UNITYMESSAGEPROTO = _descriptor.Descriptor(\n  name='UnityMessageProto',\n  full_name='communicator_objects.UnityMessageProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYMESSAGEPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "peekOfCode": "_UNITYMESSAGEPROTO = _descriptor.Descriptor(\n  name='UnityMessageProto',\n  full_name='communicator_objects.UnityMessageProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='header', full_name='communicator_objects.UnityMessageProto.header', index=0,\n      number=1, type=11, cpp_type=10, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYMESSAGEPROTO.fields_by_name['header'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "peekOfCode": "_UNITYMESSAGEPROTO.fields_by_name['header'].message_type = mlagents__envs_dot_communicator__objects_dot_header__pb2._HEADERPROTO\n_UNITYMESSAGEPROTO.fields_by_name['unity_output'].message_type = mlagents__envs_dot_communicator__objects_dot_unity__output__pb2._UNITYOUTPUTPROTO\n_UNITYMESSAGEPROTO.fields_by_name['unity_input'].message_type = mlagents__envs_dot_communicator__objects_dot_unity__input__pb2._UNITYINPUTPROTO\nDESCRIPTOR.message_types_by_name['UnityMessageProto'] = _UNITYMESSAGEPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityMessageProto = _reflection.GeneratedProtocolMessageType('UnityMessageProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYMESSAGEPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_message_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityMessageProto)\n  ))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYMESSAGEPROTO.fields_by_name['unity_output'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "peekOfCode": "_UNITYMESSAGEPROTO.fields_by_name['unity_output'].message_type = mlagents__envs_dot_communicator__objects_dot_unity__output__pb2._UNITYOUTPUTPROTO\n_UNITYMESSAGEPROTO.fields_by_name['unity_input'].message_type = mlagents__envs_dot_communicator__objects_dot_unity__input__pb2._UNITYINPUTPROTO\nDESCRIPTOR.message_types_by_name['UnityMessageProto'] = _UNITYMESSAGEPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityMessageProto = _reflection.GeneratedProtocolMessageType('UnityMessageProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYMESSAGEPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_message_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityMessageProto)\n  ))\n_sym_db.RegisterMessage(UnityMessageProto)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYMESSAGEPROTO.fields_by_name['unity_input'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "peekOfCode": "_UNITYMESSAGEPROTO.fields_by_name['unity_input'].message_type = mlagents__envs_dot_communicator__objects_dot_unity__input__pb2._UNITYINPUTPROTO\nDESCRIPTOR.message_types_by_name['UnityMessageProto'] = _UNITYMESSAGEPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityMessageProto = _reflection.GeneratedProtocolMessageType('UnityMessageProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYMESSAGEPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_message_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityMessageProto)\n  ))\n_sym_db.RegisterMessage(UnityMessageProto)\nDESCRIPTOR.has_options = True",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['UnityMessageProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['UnityMessageProto'] = _UNITYMESSAGEPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityMessageProto = _reflection.GeneratedProtocolMessageType('UnityMessageProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYMESSAGEPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_message_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityMessageProto)\n  ))\n_sym_db.RegisterMessage(UnityMessageProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "documentation": {}
    },
    {
        "label": "UnityMessageProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "peekOfCode": "UnityMessageProto = _reflection.GeneratedProtocolMessageType('UnityMessageProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYMESSAGEPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_message_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityMessageProto)\n  ))\n_sym_db.RegisterMessage(UnityMessageProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_message_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nfrom mlagents_envs.communicator_objects import unity_rl_output_pb2 as mlagents__envs_dot_communicator__objects_dot_unity__rl__output__pb2\nfrom mlagents_envs.communicator_objects import unity_rl_initialization_output_pb2 as mlagents__envs_dot_communicator__objects_dot_unity__rl__initialization__output__pb2\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_output.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n5mlagents_envs/communicator_objects/unity_output.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x38mlagents_envs/communicator_objects/unity_rl_output.proto\\x1aGmlagents_envs/communicator_objects/unity_rl_initialization_output.proto\\\"\\xa9\\x01\\n\\x10UnityOutputProto\\x12;\\n\\trl_output\\x18\\x01 \\x01(\\x0b\\x32(.communicator_objects.UnityRLOutputProto\\x12X\\n\\x18rl_initialization_output\\x18\\x02 \\x01(\\x0b\\x32\\x36.communicator_objects.UnityRLInitializationOutputProtoB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_unity__rl__output__pb2.DESCRIPTOR,mlagents__envs_dot_communicator__objects_dot_unity__rl__initialization__output__pb2.DESCRIPTOR,])",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_output.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n5mlagents_envs/communicator_objects/unity_output.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x38mlagents_envs/communicator_objects/unity_rl_output.proto\\x1aGmlagents_envs/communicator_objects/unity_rl_initialization_output.proto\\\"\\xa9\\x01\\n\\x10UnityOutputProto\\x12;\\n\\trl_output\\x18\\x01 \\x01(\\x0b\\x32(.communicator_objects.UnityRLOutputProto\\x12X\\n\\x18rl_initialization_output\\x18\\x02 \\x01(\\x0b\\x32\\x36.communicator_objects.UnityRLInitializationOutputProtoB%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_unity__rl__output__pb2.DESCRIPTOR,mlagents__envs_dot_communicator__objects_dot_unity__rl__initialization__output__pb2.DESCRIPTOR,])\n_UNITYOUTPUTPROTO = _descriptor.Descriptor(\n  name='UnityOutputProto',\n  full_name='communicator_objects.UnityOutputProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYOUTPUTPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "peekOfCode": "_UNITYOUTPUTPROTO = _descriptor.Descriptor(\n  name='UnityOutputProto',\n  full_name='communicator_objects.UnityOutputProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='rl_output', full_name='communicator_objects.UnityOutputProto.rl_output', index=0,\n      number=1, type=11, cpp_type=10, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYOUTPUTPROTO.fields_by_name['rl_output'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "peekOfCode": "_UNITYOUTPUTPROTO.fields_by_name['rl_output'].message_type = mlagents__envs_dot_communicator__objects_dot_unity__rl__output__pb2._UNITYRLOUTPUTPROTO\n_UNITYOUTPUTPROTO.fields_by_name['rl_initialization_output'].message_type = mlagents__envs_dot_communicator__objects_dot_unity__rl__initialization__output__pb2._UNITYRLINITIALIZATIONOUTPUTPROTO\nDESCRIPTOR.message_types_by_name['UnityOutputProto'] = _UNITYOUTPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityOutputProto = _reflection.GeneratedProtocolMessageType('UnityOutputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYOUTPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_output_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityOutputProto)\n  ))\n_sym_db.RegisterMessage(UnityOutputProto)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYOUTPUTPROTO.fields_by_name['rl_initialization_output'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "peekOfCode": "_UNITYOUTPUTPROTO.fields_by_name['rl_initialization_output'].message_type = mlagents__envs_dot_communicator__objects_dot_unity__rl__initialization__output__pb2._UNITYRLINITIALIZATIONOUTPUTPROTO\nDESCRIPTOR.message_types_by_name['UnityOutputProto'] = _UNITYOUTPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityOutputProto = _reflection.GeneratedProtocolMessageType('UnityOutputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYOUTPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_output_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityOutputProto)\n  ))\n_sym_db.RegisterMessage(UnityOutputProto)\nDESCRIPTOR.has_options = True",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['UnityOutputProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['UnityOutputProto'] = _UNITYOUTPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityOutputProto = _reflection.GeneratedProtocolMessageType('UnityOutputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYOUTPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_output_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityOutputProto)\n  ))\n_sym_db.RegisterMessage(UnityOutputProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "documentation": {}
    },
    {
        "label": "UnityOutputProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "peekOfCode": "UnityOutputProto = _reflection.GeneratedProtocolMessageType('UnityOutputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYOUTPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_output_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityOutputProto)\n  ))\n_sym_db.RegisterMessage(UnityOutputProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_output_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nfrom mlagents_envs.communicator_objects import capabilities_pb2 as mlagents__envs_dot_communicator__objects_dot_capabilities__pb2\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_rl_initialization_input.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\nFmlagents_envs/communicator_objects/unity_rl_initialization_input.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x35mlagents_envs/communicator_objects/capabilities.proto\\\"\\xc0\\x01\\n\\x1fUnityRLInitializationInputProto\\x12\\x0c\\n\\x04seed\\x18\\x01 \\x01(\\x05\\x12\\x1d\\n\\x15\\x63ommunication_version\\x18\\x02 \\x01(\\t\\x12\\x17\\n\\x0fpackage_version\\x18\\x03 \\x01(\\t\\x12\\x44\\n\\x0c\\x63\\x61pabilities\\x18\\x04 \\x01(\\x0b\\x32..communicator_objects.UnityRLCapabilitiesProto\\x12\\x11\\n\\tnum_areas\\x18\\x05 \\x01(\\x05\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_capabilities__pb2.DESCRIPTOR,])\n_UNITYRLINITIALIZATIONINPUTPROTO = _descriptor.Descriptor(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_rl_initialization_input.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\nFmlagents_envs/communicator_objects/unity_rl_initialization_input.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x35mlagents_envs/communicator_objects/capabilities.proto\\\"\\xc0\\x01\\n\\x1fUnityRLInitializationInputProto\\x12\\x0c\\n\\x04seed\\x18\\x01 \\x01(\\x05\\x12\\x1d\\n\\x15\\x63ommunication_version\\x18\\x02 \\x01(\\t\\x12\\x17\\n\\x0fpackage_version\\x18\\x03 \\x01(\\t\\x12\\x44\\n\\x0c\\x63\\x61pabilities\\x18\\x04 \\x01(\\x0b\\x32..communicator_objects.UnityRLCapabilitiesProto\\x12\\x11\\n\\tnum_areas\\x18\\x05 \\x01(\\x05\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_capabilities__pb2.DESCRIPTOR,])\n_UNITYRLINITIALIZATIONINPUTPROTO = _descriptor.Descriptor(\n  name='UnityRLInitializationInputProto',\n  full_name='communicator_objects.UnityRLInitializationInputProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINITIALIZATIONINPUTPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "peekOfCode": "_UNITYRLINITIALIZATIONINPUTPROTO = _descriptor.Descriptor(\n  name='UnityRLInitializationInputProto',\n  full_name='communicator_objects.UnityRLInitializationInputProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='seed', full_name='communicator_objects.UnityRLInitializationInputProto.seed', index=0,\n      number=1, type=5, cpp_type=1, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINITIALIZATIONINPUTPROTO.fields_by_name['capabilities'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "peekOfCode": "_UNITYRLINITIALIZATIONINPUTPROTO.fields_by_name['capabilities'].message_type = mlagents__envs_dot_communicator__objects_dot_capabilities__pb2._UNITYRLCAPABILITIESPROTO\nDESCRIPTOR.message_types_by_name['UnityRLInitializationInputProto'] = _UNITYRLINITIALIZATIONINPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLInitializationInputProto = _reflection.GeneratedProtocolMessageType('UnityRLInitializationInputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYRLINITIALIZATIONINPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLInitializationInputProto)\n  ))\n_sym_db.RegisterMessage(UnityRLInitializationInputProto)\nDESCRIPTOR.has_options = True",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['UnityRLInitializationInputProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['UnityRLInitializationInputProto'] = _UNITYRLINITIALIZATIONINPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLInitializationInputProto = _reflection.GeneratedProtocolMessageType('UnityRLInitializationInputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYRLINITIALIZATIONINPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLInitializationInputProto)\n  ))\n_sym_db.RegisterMessage(UnityRLInitializationInputProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "documentation": {}
    },
    {
        "label": "UnityRLInitializationInputProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "peekOfCode": "UnityRLInitializationInputProto = _reflection.GeneratedProtocolMessageType('UnityRLInitializationInputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYRLINITIALIZATIONINPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLInitializationInputProto)\n  ))\n_sym_db.RegisterMessage(UnityRLInitializationInputProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_input_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nfrom mlagents_envs.communicator_objects import capabilities_pb2 as mlagents__envs_dot_communicator__objects_dot_capabilities__pb2\nfrom mlagents_envs.communicator_objects import brain_parameters_pb2 as mlagents__envs_dot_communicator__objects_dot_brain__parameters__pb2\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_rl_initialization_output.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\nGmlagents_envs/communicator_objects/unity_rl_initialization_output.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x35mlagents_envs/communicator_objects/capabilities.proto\\x1a\\x39mlagents_envs/communicator_objects/brain_parameters.proto\\\"\\x8c\\x02\\n UnityRLInitializationOutputProto\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x1d\\n\\x15\\x63ommunication_version\\x18\\x02 \\x01(\\t\\x12\\x10\\n\\x08log_path\\x18\\x03 \\x01(\\t\\x12\\x44\\n\\x10\\x62rain_parameters\\x18\\x05 \\x03(\\x0b\\x32*.communicator_objects.BrainParametersProto\\x12\\x17\\n\\x0fpackage_version\\x18\\x07 \\x01(\\t\\x12\\x44\\n\\x0c\\x63\\x61pabilities\\x18\\x08 \\x01(\\x0b\\x32..communicator_objects.UnityRLCapabilitiesProtoJ\\x04\\x08\\x06\\x10\\x07\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_capabilities__pb2.DESCRIPTOR,mlagents__envs_dot_communicator__objects_dot_brain__parameters__pb2.DESCRIPTOR,])",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_rl_initialization_output.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\nGmlagents_envs/communicator_objects/unity_rl_initialization_output.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x35mlagents_envs/communicator_objects/capabilities.proto\\x1a\\x39mlagents_envs/communicator_objects/brain_parameters.proto\\\"\\x8c\\x02\\n UnityRLInitializationOutputProto\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x1d\\n\\x15\\x63ommunication_version\\x18\\x02 \\x01(\\t\\x12\\x10\\n\\x08log_path\\x18\\x03 \\x01(\\t\\x12\\x44\\n\\x10\\x62rain_parameters\\x18\\x05 \\x03(\\x0b\\x32*.communicator_objects.BrainParametersProto\\x12\\x17\\n\\x0fpackage_version\\x18\\x07 \\x01(\\t\\x12\\x44\\n\\x0c\\x63\\x61pabilities\\x18\\x08 \\x01(\\x0b\\x32..communicator_objects.UnityRLCapabilitiesProtoJ\\x04\\x08\\x06\\x10\\x07\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_capabilities__pb2.DESCRIPTOR,mlagents__envs_dot_communicator__objects_dot_brain__parameters__pb2.DESCRIPTOR,])\n_UNITYRLINITIALIZATIONOUTPUTPROTO = _descriptor.Descriptor(\n  name='UnityRLInitializationOutputProto',\n  full_name='communicator_objects.UnityRLInitializationOutputProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINITIALIZATIONOUTPUTPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "peekOfCode": "_UNITYRLINITIALIZATIONOUTPUTPROTO = _descriptor.Descriptor(\n  name='UnityRLInitializationOutputProto',\n  full_name='communicator_objects.UnityRLInitializationOutputProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='name', full_name='communicator_objects.UnityRLInitializationOutputProto.name', index=0,\n      number=1, type=9, cpp_type=9, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINITIALIZATIONOUTPUTPROTO.fields_by_name['brain_parameters'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "peekOfCode": "_UNITYRLINITIALIZATIONOUTPUTPROTO.fields_by_name['brain_parameters'].message_type = mlagents__envs_dot_communicator__objects_dot_brain__parameters__pb2._BRAINPARAMETERSPROTO\n_UNITYRLINITIALIZATIONOUTPUTPROTO.fields_by_name['capabilities'].message_type = mlagents__envs_dot_communicator__objects_dot_capabilities__pb2._UNITYRLCAPABILITIESPROTO\nDESCRIPTOR.message_types_by_name['UnityRLInitializationOutputProto'] = _UNITYRLINITIALIZATIONOUTPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLInitializationOutputProto = _reflection.GeneratedProtocolMessageType('UnityRLInitializationOutputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYRLINITIALIZATIONOUTPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLInitializationOutputProto)\n  ))\n_sym_db.RegisterMessage(UnityRLInitializationOutputProto)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINITIALIZATIONOUTPUTPROTO.fields_by_name['capabilities'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "peekOfCode": "_UNITYRLINITIALIZATIONOUTPUTPROTO.fields_by_name['capabilities'].message_type = mlagents__envs_dot_communicator__objects_dot_capabilities__pb2._UNITYRLCAPABILITIESPROTO\nDESCRIPTOR.message_types_by_name['UnityRLInitializationOutputProto'] = _UNITYRLINITIALIZATIONOUTPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLInitializationOutputProto = _reflection.GeneratedProtocolMessageType('UnityRLInitializationOutputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYRLINITIALIZATIONOUTPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLInitializationOutputProto)\n  ))\n_sym_db.RegisterMessage(UnityRLInitializationOutputProto)\nDESCRIPTOR.has_options = True",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['UnityRLInitializationOutputProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['UnityRLInitializationOutputProto'] = _UNITYRLINITIALIZATIONOUTPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLInitializationOutputProto = _reflection.GeneratedProtocolMessageType('UnityRLInitializationOutputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYRLINITIALIZATIONOUTPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLInitializationOutputProto)\n  ))\n_sym_db.RegisterMessage(UnityRLInitializationOutputProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "documentation": {}
    },
    {
        "label": "UnityRLInitializationOutputProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "peekOfCode": "UnityRLInitializationOutputProto = _reflection.GeneratedProtocolMessageType('UnityRLInitializationOutputProto', (_message.Message,), dict(\n  DESCRIPTOR = _UNITYRLINITIALIZATIONOUTPUTPROTO,\n  __module__ = 'mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2'\n  # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLInitializationOutputProto)\n  ))\n_sym_db.RegisterMessage(UnityRLInitializationOutputProto)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_initialization_output_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nfrom mlagents_envs.communicator_objects import agent_action_pb2 as mlagents__envs_dot_communicator__objects_dot_agent__action__pb2\nfrom mlagents_envs.communicator_objects import command_pb2 as mlagents__envs_dot_communicator__objects_dot_command__pb2\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_rl_input.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n7mlagents_envs/communicator_objects/unity_rl_input.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x35mlagents_envs/communicator_objects/agent_action.proto\\x1a\\x30mlagents_envs/communicator_objects/command.proto\\\"\\xfe\\x02\\n\\x11UnityRLInputProto\\x12P\\n\\ragent_actions\\x18\\x01 \\x03(\\x0b\\x32\\x39.communicator_objects.UnityRLInputProto.AgentActionsEntry\\x12\\x33\\n\\x07\\x63ommand\\x18\\x04 \\x01(\\x0e\\x32\\\".communicator_objects.CommandProto\\x12\\x14\\n\\x0cside_channel\\x18\\x05 \\x01(\\x0c\\x1aM\\n\\x14ListAgentActionProto\\x12\\x35\\n\\x05value\\x18\\x01 \\x03(\\x0b\\x32&.communicator_objects.AgentActionProto\\x1aq\\n\\x11\\x41gentActionsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12K\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32<.communicator_objects.UnityRLInputProto.ListAgentActionProto:\\x02\\x38\\x01J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_agent__action__pb2.DESCRIPTOR,mlagents__envs_dot_communicator__objects_dot_command__pb2.DESCRIPTOR,])",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_rl_input.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n7mlagents_envs/communicator_objects/unity_rl_input.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x35mlagents_envs/communicator_objects/agent_action.proto\\x1a\\x30mlagents_envs/communicator_objects/command.proto\\\"\\xfe\\x02\\n\\x11UnityRLInputProto\\x12P\\n\\ragent_actions\\x18\\x01 \\x03(\\x0b\\x32\\x39.communicator_objects.UnityRLInputProto.AgentActionsEntry\\x12\\x33\\n\\x07\\x63ommand\\x18\\x04 \\x01(\\x0e\\x32\\\".communicator_objects.CommandProto\\x12\\x14\\n\\x0cside_channel\\x18\\x05 \\x01(\\x0c\\x1aM\\n\\x14ListAgentActionProto\\x12\\x35\\n\\x05value\\x18\\x01 \\x03(\\x0b\\x32&.communicator_objects.AgentActionProto\\x1aq\\n\\x11\\x41gentActionsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12K\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32<.communicator_objects.UnityRLInputProto.ListAgentActionProto:\\x02\\x38\\x01J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_agent__action__pb2.DESCRIPTOR,mlagents__envs_dot_communicator__objects_dot_command__pb2.DESCRIPTOR,])\n_UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO = _descriptor.Descriptor(\n  name='ListAgentActionProto',\n  full_name='communicator_objects.UnityRLInputProto.ListAgentActionProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "_UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO = _descriptor.Descriptor(\n  name='ListAgentActionProto',\n  full_name='communicator_objects.UnityRLInputProto.ListAgentActionProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='value', full_name='communicator_objects.UnityRLInputProto.ListAgentActionProto.value', index=0,\n      number=1, type=11, cpp_type=10, label=3,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINPUTPROTO_AGENTACTIONSENTRY",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "_UNITYRLINPUTPROTO_AGENTACTIONSENTRY = _descriptor.Descriptor(\n  name='AgentActionsEntry',\n  full_name='communicator_objects.UnityRLInputProto.AgentActionsEntry',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='key', full_name='communicator_objects.UnityRLInputProto.AgentActionsEntry.key', index=0,\n      number=1, type=9, cpp_type=9, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINPUTPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "_UNITYRLINPUTPROTO = _descriptor.Descriptor(\n  name='UnityRLInputProto',\n  full_name='communicator_objects.UnityRLInputProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='agent_actions', full_name='communicator_objects.UnityRLInputProto.agent_actions', index=0,\n      number=1, type=11, cpp_type=10, label=3,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO.fields_by_name['value'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "_UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO.fields_by_name['value'].message_type = mlagents__envs_dot_communicator__objects_dot_agent__action__pb2._AGENTACTIONPROTO\n_UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO.containing_type = _UNITYRLINPUTPROTO\n_UNITYRLINPUTPROTO_AGENTACTIONSENTRY.fields_by_name['value'].message_type = _UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO\n_UNITYRLINPUTPROTO_AGENTACTIONSENTRY.containing_type = _UNITYRLINPUTPROTO\n_UNITYRLINPUTPROTO.fields_by_name['agent_actions'].message_type = _UNITYRLINPUTPROTO_AGENTACTIONSENTRY\n_UNITYRLINPUTPROTO.fields_by_name['command'].enum_type = mlagents__envs_dot_communicator__objects_dot_command__pb2._COMMANDPROTO\nDESCRIPTOR.message_types_by_name['UnityRLInputProto'] = _UNITYRLINPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLInputProto = _reflection.GeneratedProtocolMessageType('UnityRLInputProto', (_message.Message,), dict(\n  ListAgentActionProto = _reflection.GeneratedProtocolMessageType('ListAgentActionProto', (_message.Message,), dict(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO.containing_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "_UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO.containing_type = _UNITYRLINPUTPROTO\n_UNITYRLINPUTPROTO_AGENTACTIONSENTRY.fields_by_name['value'].message_type = _UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO\n_UNITYRLINPUTPROTO_AGENTACTIONSENTRY.containing_type = _UNITYRLINPUTPROTO\n_UNITYRLINPUTPROTO.fields_by_name['agent_actions'].message_type = _UNITYRLINPUTPROTO_AGENTACTIONSENTRY\n_UNITYRLINPUTPROTO.fields_by_name['command'].enum_type = mlagents__envs_dot_communicator__objects_dot_command__pb2._COMMANDPROTO\nDESCRIPTOR.message_types_by_name['UnityRLInputProto'] = _UNITYRLINPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLInputProto = _reflection.GeneratedProtocolMessageType('UnityRLInputProto', (_message.Message,), dict(\n  ListAgentActionProto = _reflection.GeneratedProtocolMessageType('ListAgentActionProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINPUTPROTO_AGENTACTIONSENTRY.fields_by_name['value'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "_UNITYRLINPUTPROTO_AGENTACTIONSENTRY.fields_by_name['value'].message_type = _UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO\n_UNITYRLINPUTPROTO_AGENTACTIONSENTRY.containing_type = _UNITYRLINPUTPROTO\n_UNITYRLINPUTPROTO.fields_by_name['agent_actions'].message_type = _UNITYRLINPUTPROTO_AGENTACTIONSENTRY\n_UNITYRLINPUTPROTO.fields_by_name['command'].enum_type = mlagents__envs_dot_communicator__objects_dot_command__pb2._COMMANDPROTO\nDESCRIPTOR.message_types_by_name['UnityRLInputProto'] = _UNITYRLINPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLInputProto = _reflection.GeneratedProtocolMessageType('UnityRLInputProto', (_message.Message,), dict(\n  ListAgentActionProto = _reflection.GeneratedProtocolMessageType('ListAgentActionProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_input_pb2'",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINPUTPROTO_AGENTACTIONSENTRY.containing_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "_UNITYRLINPUTPROTO_AGENTACTIONSENTRY.containing_type = _UNITYRLINPUTPROTO\n_UNITYRLINPUTPROTO.fields_by_name['agent_actions'].message_type = _UNITYRLINPUTPROTO_AGENTACTIONSENTRY\n_UNITYRLINPUTPROTO.fields_by_name['command'].enum_type = mlagents__envs_dot_communicator__objects_dot_command__pb2._COMMANDPROTO\nDESCRIPTOR.message_types_by_name['UnityRLInputProto'] = _UNITYRLINPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLInputProto = _reflection.GeneratedProtocolMessageType('UnityRLInputProto', (_message.Message,), dict(\n  ListAgentActionProto = _reflection.GeneratedProtocolMessageType('ListAgentActionProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_input_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLInputProto.ListAgentActionProto)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINPUTPROTO.fields_by_name['agent_actions'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "_UNITYRLINPUTPROTO.fields_by_name['agent_actions'].message_type = _UNITYRLINPUTPROTO_AGENTACTIONSENTRY\n_UNITYRLINPUTPROTO.fields_by_name['command'].enum_type = mlagents__envs_dot_communicator__objects_dot_command__pb2._COMMANDPROTO\nDESCRIPTOR.message_types_by_name['UnityRLInputProto'] = _UNITYRLINPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLInputProto = _reflection.GeneratedProtocolMessageType('UnityRLInputProto', (_message.Message,), dict(\n  ListAgentActionProto = _reflection.GeneratedProtocolMessageType('ListAgentActionProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_input_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLInputProto.ListAgentActionProto)\n    ))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINPUTPROTO.fields_by_name['command'].enum_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "_UNITYRLINPUTPROTO.fields_by_name['command'].enum_type = mlagents__envs_dot_communicator__objects_dot_command__pb2._COMMANDPROTO\nDESCRIPTOR.message_types_by_name['UnityRLInputProto'] = _UNITYRLINPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLInputProto = _reflection.GeneratedProtocolMessageType('UnityRLInputProto', (_message.Message,), dict(\n  ListAgentActionProto = _reflection.GeneratedProtocolMessageType('ListAgentActionProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_input_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLInputProto.ListAgentActionProto)\n    ))\n  ,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['UnityRLInputProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['UnityRLInputProto'] = _UNITYRLINPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLInputProto = _reflection.GeneratedProtocolMessageType('UnityRLInputProto', (_message.Message,), dict(\n  ListAgentActionProto = _reflection.GeneratedProtocolMessageType('ListAgentActionProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_input_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLInputProto.ListAgentActionProto)\n    ))\n  ,\n  AgentActionsEntry = _reflection.GeneratedProtocolMessageType('AgentActionsEntry', (_message.Message,), dict(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "UnityRLInputProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "UnityRLInputProto = _reflection.GeneratedProtocolMessageType('UnityRLInputProto', (_message.Message,), dict(\n  ListAgentActionProto = _reflection.GeneratedProtocolMessageType('ListAgentActionProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLINPUTPROTO_LISTAGENTACTIONPROTO,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_input_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLInputProto.ListAgentActionProto)\n    ))\n  ,\n  AgentActionsEntry = _reflection.GeneratedProtocolMessageType('AgentActionsEntry', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLINPUTPROTO_AGENTACTIONSENTRY,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_input_pb2'",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n_UNITYRLINPUTPROTO_AGENTACTIONSENTRY.has_options = True\n_UNITYRLINPUTPROTO_AGENTACTIONSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\\001'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n_UNITYRLINPUTPROTO_AGENTACTIONSENTRY.has_options = True\n_UNITYRLINPUTPROTO_AGENTACTIONSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\\001'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINPUTPROTO_AGENTACTIONSENTRY.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "_UNITYRLINPUTPROTO_AGENTACTIONSENTRY.has_options = True\n_UNITYRLINPUTPROTO_AGENTACTIONSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\\001'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLINPUTPROTO_AGENTACTIONSENTRY._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "peekOfCode": "_UNITYRLINPUTPROTO_AGENTACTIONSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\\001'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_input_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nfrom mlagents_envs.communicator_objects import agent_info_pb2 as mlagents__envs_dot_communicator__objects_dot_agent__info__pb2\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_rl_output.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n8mlagents_envs/communicator_objects/unity_rl_output.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x33mlagents_envs/communicator_objects/agent_info.proto\\\"\\xb9\\x02\\n\\x12UnityRLOutputProto\\x12L\\n\\nagentInfos\\x18\\x02 \\x03(\\x0b\\x32\\x38.communicator_objects.UnityRLOutputProto.AgentInfosEntry\\x12\\x14\\n\\x0cside_channel\\x18\\x03 \\x01(\\x0c\\x1aI\\n\\x12ListAgentInfoProto\\x12\\x33\\n\\x05value\\x18\\x01 \\x03(\\x0b\\x32$.communicator_objects.AgentInfoProto\\x1an\\n\\x0f\\x41gentInfosEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12J\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32;.communicator_objects.UnityRLOutputProto.ListAgentInfoProto:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_agent__info__pb2.DESCRIPTOR,])\n_UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO = _descriptor.Descriptor(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_rl_output.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n8mlagents_envs/communicator_objects/unity_rl_output.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x33mlagents_envs/communicator_objects/agent_info.proto\\\"\\xb9\\x02\\n\\x12UnityRLOutputProto\\x12L\\n\\nagentInfos\\x18\\x02 \\x03(\\x0b\\x32\\x38.communicator_objects.UnityRLOutputProto.AgentInfosEntry\\x12\\x14\\n\\x0cside_channel\\x18\\x03 \\x01(\\x0c\\x1aI\\n\\x12ListAgentInfoProto\\x12\\x33\\n\\x05value\\x18\\x01 \\x03(\\x0b\\x32$.communicator_objects.AgentInfoProto\\x1an\\n\\x0f\\x41gentInfosEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12J\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32;.communicator_objects.UnityRLOutputProto.ListAgentInfoProto:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_agent__info__pb2.DESCRIPTOR,])\n_UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO = _descriptor.Descriptor(\n  name='ListAgentInfoProto',\n  full_name='communicator_objects.UnityRLOutputProto.ListAgentInfoProto',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "_UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO = _descriptor.Descriptor(\n  name='ListAgentInfoProto',\n  full_name='communicator_objects.UnityRLOutputProto.ListAgentInfoProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='value', full_name='communicator_objects.UnityRLOutputProto.ListAgentInfoProto.value', index=0,\n      number=1, type=11, cpp_type=10, label=3,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY = _descriptor.Descriptor(\n  name='AgentInfosEntry',\n  full_name='communicator_objects.UnityRLOutputProto.AgentInfosEntry',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='key', full_name='communicator_objects.UnityRLOutputProto.AgentInfosEntry.key', index=0,\n      number=1, type=9, cpp_type=9, label=1,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLOUTPUTPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "_UNITYRLOUTPUTPROTO = _descriptor.Descriptor(\n  name='UnityRLOutputProto',\n  full_name='communicator_objects.UnityRLOutputProto',\n  filename=None,\n  file=DESCRIPTOR,\n  containing_type=None,\n  fields=[\n    _descriptor.FieldDescriptor(\n      name='agentInfos', full_name='communicator_objects.UnityRLOutputProto.agentInfos', index=0,\n      number=2, type=11, cpp_type=10, label=3,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO.fields_by_name['value'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "_UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO.fields_by_name['value'].message_type = mlagents__envs_dot_communicator__objects_dot_agent__info__pb2._AGENTINFOPROTO\n_UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO.containing_type = _UNITYRLOUTPUTPROTO\n_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY.fields_by_name['value'].message_type = _UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO\n_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY.containing_type = _UNITYRLOUTPUTPROTO\n_UNITYRLOUTPUTPROTO.fields_by_name['agentInfos'].message_type = _UNITYRLOUTPUTPROTO_AGENTINFOSENTRY\nDESCRIPTOR.message_types_by_name['UnityRLOutputProto'] = _UNITYRLOUTPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLOutputProto = _reflection.GeneratedProtocolMessageType('UnityRLOutputProto', (_message.Message,), dict(\n  ListAgentInfoProto = _reflection.GeneratedProtocolMessageType('ListAgentInfoProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO.containing_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "_UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO.containing_type = _UNITYRLOUTPUTPROTO\n_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY.fields_by_name['value'].message_type = _UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO\n_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY.containing_type = _UNITYRLOUTPUTPROTO\n_UNITYRLOUTPUTPROTO.fields_by_name['agentInfos'].message_type = _UNITYRLOUTPUTPROTO_AGENTINFOSENTRY\nDESCRIPTOR.message_types_by_name['UnityRLOutputProto'] = _UNITYRLOUTPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLOutputProto = _reflection.GeneratedProtocolMessageType('UnityRLOutputProto', (_message.Message,), dict(\n  ListAgentInfoProto = _reflection.GeneratedProtocolMessageType('ListAgentInfoProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_output_pb2'",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY.fields_by_name['value'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY.fields_by_name['value'].message_type = _UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO\n_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY.containing_type = _UNITYRLOUTPUTPROTO\n_UNITYRLOUTPUTPROTO.fields_by_name['agentInfos'].message_type = _UNITYRLOUTPUTPROTO_AGENTINFOSENTRY\nDESCRIPTOR.message_types_by_name['UnityRLOutputProto'] = _UNITYRLOUTPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLOutputProto = _reflection.GeneratedProtocolMessageType('UnityRLOutputProto', (_message.Message,), dict(\n  ListAgentInfoProto = _reflection.GeneratedProtocolMessageType('ListAgentInfoProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_output_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLOutputProto.ListAgentInfoProto)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY.containing_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY.containing_type = _UNITYRLOUTPUTPROTO\n_UNITYRLOUTPUTPROTO.fields_by_name['agentInfos'].message_type = _UNITYRLOUTPUTPROTO_AGENTINFOSENTRY\nDESCRIPTOR.message_types_by_name['UnityRLOutputProto'] = _UNITYRLOUTPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLOutputProto = _reflection.GeneratedProtocolMessageType('UnityRLOutputProto', (_message.Message,), dict(\n  ListAgentInfoProto = _reflection.GeneratedProtocolMessageType('ListAgentInfoProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_output_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLOutputProto.ListAgentInfoProto)\n    ))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLOUTPUTPROTO.fields_by_name['agentInfos'].message_type",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "_UNITYRLOUTPUTPROTO.fields_by_name['agentInfos'].message_type = _UNITYRLOUTPUTPROTO_AGENTINFOSENTRY\nDESCRIPTOR.message_types_by_name['UnityRLOutputProto'] = _UNITYRLOUTPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLOutputProto = _reflection.GeneratedProtocolMessageType('UnityRLOutputProto', (_message.Message,), dict(\n  ListAgentInfoProto = _reflection.GeneratedProtocolMessageType('ListAgentInfoProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_output_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLOutputProto.ListAgentInfoProto)\n    ))\n  ,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.message_types_by_name['UnityRLOutputProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "DESCRIPTOR.message_types_by_name['UnityRLOutputProto'] = _UNITYRLOUTPUTPROTO\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nUnityRLOutputProto = _reflection.GeneratedProtocolMessageType('UnityRLOutputProto', (_message.Message,), dict(\n  ListAgentInfoProto = _reflection.GeneratedProtocolMessageType('ListAgentInfoProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_output_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLOutputProto.ListAgentInfoProto)\n    ))\n  ,\n  AgentInfosEntry = _reflection.GeneratedProtocolMessageType('AgentInfosEntry', (_message.Message,), dict(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "UnityRLOutputProto",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "UnityRLOutputProto = _reflection.GeneratedProtocolMessageType('UnityRLOutputProto', (_message.Message,), dict(\n  ListAgentInfoProto = _reflection.GeneratedProtocolMessageType('ListAgentInfoProto', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLOUTPUTPROTO_LISTAGENTINFOPROTO,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_output_pb2'\n    # @@protoc_insertion_point(class_scope:communicator_objects.UnityRLOutputProto.ListAgentInfoProto)\n    ))\n  ,\n  AgentInfosEntry = _reflection.GeneratedProtocolMessageType('AgentInfosEntry', (_message.Message,), dict(\n    DESCRIPTOR = _UNITYRLOUTPUTPROTO_AGENTINFOSENTRY,\n    __module__ = 'mlagents_envs.communicator_objects.unity_rl_output_pb2'",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY.has_options = True\n_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\\001'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY.has_options = True\n_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\\001'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY.has_options = True\n_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\\001'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "peekOfCode": "_UNITYRLOUTPUTPROTO_AGENTINFOSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\\001'))\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_rl_output_pb2",
        "documentation": {}
    },
    {
        "label": "_sym_db",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "peekOfCode": "_sym_db = _symbol_database.Default()\nfrom mlagents_envs.communicator_objects import unity_message_pb2 as mlagents__envs_dot_communicator__objects_dot_unity__message__pb2\nDESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_to_external.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n:mlagents_envs/communicator_objects/unity_to_external.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x36mlagents_envs/communicator_objects/unity_message.proto2v\\n\\x14UnityToExternalProto\\x12^\\n\\x08\\x45xchange\\x12\\'.communicator_objects.UnityMessageProto\\x1a\\'.communicator_objects.UnityMessageProto\\\"\\x00\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_unity__message__pb2.DESCRIPTOR,])\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "peekOfCode": "DESCRIPTOR = _descriptor.FileDescriptor(\n  name='mlagents_envs/communicator_objects/unity_to_external.proto',\n  package='communicator_objects',\n  syntax='proto3',\n  serialized_pb=_b('\\n:mlagents_envs/communicator_objects/unity_to_external.proto\\x12\\x14\\x63ommunicator_objects\\x1a\\x36mlagents_envs/communicator_objects/unity_message.proto2v\\n\\x14UnityToExternalProto\\x12^\\n\\x08\\x45xchange\\x12\\'.communicator_objects.UnityMessageProto\\x1a\\'.communicator_objects.UnityMessageProto\\\"\\x00\\x42%\\xaa\\x02\\\"Unity.MLAgents.CommunicatorObjectsb\\x06proto3')\n  ,\n  dependencies=[mlagents__envs_dot_communicator__objects_dot_unity__message__pb2.DESCRIPTOR,])\n_sym_db.RegisterFileDescriptor(DESCRIPTOR)\nDESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.has_options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "peekOfCode": "DESCRIPTOR.has_options = True\nDESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n_UNITYTOEXTERNALPROTO = _descriptor.ServiceDescriptor(\n  name='UnityToExternalProto',\n  full_name='communicator_objects.UnityToExternalProto',\n  file=DESCRIPTOR,\n  index=0,\n  options=None,\n  serialized_start=140,\n  serialized_end=258,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR._options",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "peekOfCode": "DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\\252\\002\\\"Unity.MLAgents.CommunicatorObjects'))\n_UNITYTOEXTERNALPROTO = _descriptor.ServiceDescriptor(\n  name='UnityToExternalProto',\n  full_name='communicator_objects.UnityToExternalProto',\n  file=DESCRIPTOR,\n  index=0,\n  options=None,\n  serialized_start=140,\n  serialized_end=258,\n  methods=[",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "documentation": {}
    },
    {
        "label": "_UNITYTOEXTERNALPROTO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "peekOfCode": "_UNITYTOEXTERNALPROTO = _descriptor.ServiceDescriptor(\n  name='UnityToExternalProto',\n  full_name='communicator_objects.UnityToExternalProto',\n  file=DESCRIPTOR,\n  index=0,\n  options=None,\n  serialized_start=140,\n  serialized_end=258,\n  methods=[\n  _descriptor.MethodDescriptor(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "documentation": {}
    },
    {
        "label": "DESCRIPTOR.services_by_name['UnityToExternalProto']",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "peekOfCode": "DESCRIPTOR.services_by_name['UnityToExternalProto'] = _UNITYTOEXTERNALPROTO\n# @@protoc_insertion_point(module_scope)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2",
        "documentation": {}
    },
    {
        "label": "UnityToExternalProtoStub",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "peekOfCode": "class UnityToExternalProtoStub(object):\n  # missing associated documentation comment in .proto file\n  pass\n  def __init__(self, channel):\n    \"\"\"Constructor.\n    Args:\n      channel: A grpc.Channel.\n    \"\"\"\n    self.Exchange = channel.unary_unary(\n        '/communicator_objects.UnityToExternalProto/Exchange',",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "documentation": {}
    },
    {
        "label": "UnityToExternalProtoServicer",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "peekOfCode": "class UnityToExternalProtoServicer(object):\n  # missing associated documentation comment in .proto file\n  pass\n  def Exchange(self, request, context):\n    \"\"\"Sends the academy parameters\n    \"\"\"\n    context.set_code(grpc.StatusCode.UNIMPLEMENTED)\n    context.set_details('Method not implemented!')\n    raise NotImplementedError('Method not implemented!')\ndef add_UnityToExternalProtoServicer_to_server(servicer, server):",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "documentation": {}
    },
    {
        "label": "add_UnityToExternalProtoServicer_to_server",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "peekOfCode": "def add_UnityToExternalProtoServicer_to_server(servicer, server):\n  rpc_method_handlers = {\n      'Exchange': grpc.unary_unary_rpc_method_handler(\n          servicer.Exchange,\n          request_deserializer=mlagents__envs_dot_communicator__objects_dot_unity__message__pb2.UnityMessageProto.FromString,\n          response_serializer=mlagents__envs_dot_communicator__objects_dot_unity__message__pb2.UnityMessageProto.SerializeToString,\n      ),\n  }\n  generic_handler = grpc.method_handlers_generic_handler(\n      'communicator_objects.UnityToExternalProto', rpc_method_handlers)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator_objects.unity_to_external_pb2_grpc",
        "documentation": {}
    },
    {
        "label": "BaseRegistryEntry",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.base_registry_entry",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.base_registry_entry",
        "peekOfCode": "class BaseRegistryEntry:\n    def __init__(\n        self,\n        identifier: str,\n        expected_reward: Optional[float],\n        description: Optional[str],\n    ):\n        \"\"\"\n        BaseRegistryEntry allows launching a Unity Environment with its make method.\n        :param identifier: The name of the Unity Environment.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.base_registry_entry",
        "documentation": {}
    },
    {
        "label": "ZipFileWithProgress",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "peekOfCode": "class ZipFileWithProgress(ZipFile):\n    \"\"\"\n    This is a helper class inheriting from ZipFile that allows to display a progress\n    bar while the files are being extracted.\n    \"\"\"\n    def extract_zip(self, prefix: str, path: str) -> None:\n        members = self.namelist()\n        path = os.fspath(path)\n        total = len(members)\n        n = 0",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "get_local_binary_path",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "peekOfCode": "def get_local_binary_path(name: str, url: str) -> str:\n    \"\"\"\n    Returns the path to the executable previously downloaded with the name argument. If\n    None is found, the executable at the url argument will be downloaded and stored\n    under name for future uses.\n    :param name: The name that will be given to the folder containing the extracted data\n    :param url: The URL of the zip file\n    \"\"\"\n    NUMBER_ATTEMPTS = 5\n    path = get_local_binary_path_if_exists(name, url)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "get_local_binary_path_if_exists",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "peekOfCode": "def get_local_binary_path_if_exists(name: str, url: str) -> Optional[str]:\n    \"\"\"\n    Recursively searches for a Unity executable in the extracted files folders. This is\n    platform dependent : It will only return a Unity executable compatible with the\n    computer's OS. If no executable is found, None will be returned.\n    :param name: The name/identifier of the executable\n    :param url: The url the executable was downloaded from (for verification)\n    \"\"\"\n    _, bin_dir = get_tmp_dir()\n    extension = None",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "get_tmp_dir",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "peekOfCode": "def get_tmp_dir() -> Tuple[str, str]:\n    \"\"\"\n    Returns the path to the folder containing the downloaded zip files and the extracted\n    binaries. If these folders do not exist, they will be created.\n    :retrun: Tuple containing path to : (zip folder, extracted files folder)\n    \"\"\"\n    TEMPDIR = \"/tmp\" if platform == \"darwin\" else tempfile.gettempdir()\n    MLAGENTS = \"ml-agents-binaries\"\n    TMP_FOLDER_NAME = \"tmp\"\n    BINARY_FOLDER_NAME = \"binaries\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "download_and_extract_zip",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "peekOfCode": "def download_and_extract_zip(url: str, name: str) -> None:\n    \"\"\"\n    Downloads a zip file under a URL, extracts its contents into a folder with the name\n    argument and gives chmod 755 to all the files it contains. Files are downloaded and\n    extracted into special folders in the temp folder of the machine.\n    :param url: The URL of the zip file\n    :param name: The name that will be given to the folder containing the extracted data\n    \"\"\"\n    zip_dir, bin_dir = get_tmp_dir()\n    url_hash = \"-\" + hashlib.md5(url.encode()).hexdigest()",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "print_progress",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "peekOfCode": "def print_progress(prefix: str, percent: float) -> None:\n    \"\"\"\n    Displays a single progress bar in the terminal with value percent.\n    :param prefix: The string that will precede the progress bar.\n    :param percent: The percent progression of the bar (min is 0, max is 100)\n    \"\"\"\n    BAR_LEN = 20\n    percent = min(100, max(0, percent))\n    bar_progress = min(int(percent / 100 * BAR_LEN), BAR_LEN)\n    bar = \"|\" + \"\\u2588\" * bar_progress + \" \" * (BAR_LEN - bar_progress) + \"|\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "load_remote_manifest",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "peekOfCode": "def load_remote_manifest(url: str) -> Dict[str, Any]:\n    \"\"\"\n    Converts a remote yaml file into a Python dictionary\n    \"\"\"\n    tmp_dir, _ = get_tmp_dir()\n    try:\n        request = urllib.request.urlopen(url, timeout=30)\n    except urllib.error.HTTPError as e:  # type: ignore\n        e.msg += \" \" + url\n        raise",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "load_local_manifest",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "peekOfCode": "def load_local_manifest(path: str) -> Dict[str, Any]:\n    \"\"\"\n    Converts a local yaml file into a Python dictionary\n    \"\"\"\n    with open(path) as data_file:\n        return yaml.safe_load(data_file)\nclass ZipFileWithProgress(ZipFile):\n    \"\"\"\n    This is a helper class inheriting from ZipFile that allows to display a progress\n    bar while the files are being extracted.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "peekOfCode": "logger = get_logger(__name__)\n# The default logical block size is 8192 bytes (8 KB) for UFS file systems.\nBLOCK_SIZE = 8192\ndef get_local_binary_path(name: str, url: str) -> str:\n    \"\"\"\n    Returns the path to the executable previously downloaded with the name argument. If\n    None is found, the executable at the url argument will be downloaded and stored\n    under name for future uses.\n    :param name: The name that will be given to the folder containing the extracted data\n    :param url: The URL of the zip file",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "BLOCK_SIZE",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "peekOfCode": "BLOCK_SIZE = 8192\ndef get_local_binary_path(name: str, url: str) -> str:\n    \"\"\"\n    Returns the path to the executable previously downloaded with the name argument. If\n    None is found, the executable at the url argument will be downloaded and stored\n    under name for future uses.\n    :param name: The name that will be given to the folder containing the extracted data\n    :param url: The URL of the zip file\n    \"\"\"\n    NUMBER_ATTEMPTS = 5",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.binary_utils",
        "documentation": {}
    },
    {
        "label": "RemoteRegistryEntry",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.remote_registry_entry",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.remote_registry_entry",
        "peekOfCode": "class RemoteRegistryEntry(BaseRegistryEntry):\n    def __init__(\n        self,\n        identifier: str,\n        expected_reward: Optional[float],\n        description: Optional[str],\n        linux_url: Optional[str],\n        darwin_url: Optional[str],\n        win_url: Optional[str],\n        additional_args: Optional[List[str]] = None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.remote_registry_entry",
        "documentation": {}
    },
    {
        "label": "UnityEnvRegistry",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.unity_env_registry",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.unity_env_registry",
        "peekOfCode": "class UnityEnvRegistry(Mapping):\n    \"\"\"\n    ### UnityEnvRegistry\n    Provides a library of Unity environments that can be launched without the need\n    of downloading the Unity Editor.\n    The UnityEnvRegistry implements a Map, to access an entry of the Registry, use:\n    ```python\n    registry = UnityEnvRegistry()\n    entry = registry[<environment_identifyier>]\n    ```",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.unity_env_registry",
        "documentation": {}
    },
    {
        "label": "default_registry",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.unity_env_registry",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.unity_env_registry",
        "peekOfCode": "default_registry = UnityEnvRegistry()\ndefault_registry.register_from_yaml(\n    \"https://storage.googleapis.com/mlagents-test-environments/1.0.0/manifest.yaml\"\n)  # noqa E501",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.registry.unity_env_registry",
        "documentation": {}
    },
    {
        "label": "DefaultTrainingAnalyticsSideChannel",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.default_training_analytics_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.default_training_analytics_side_channel",
        "peekOfCode": "class DefaultTrainingAnalyticsSideChannel(SideChannel):\n    \"\"\"\n    Side channel that sends information about the training to the Unity environment so it can be logged.\n    \"\"\"\n    CHANNEL_ID = uuid.UUID(\"b664a4a9-d86f-5a5f-95cb-e8353a7e8356\")\n    def __init__(self) -> None:\n        # >>> uuid.uuid5(uuid.NAMESPACE_URL, \"com.unity.ml-agents/TrainingAnalyticsSideChannel\")\n        # UUID('b664a4a9-d86f-5a5f-95cb-e8353a7e8356')\n        # We purposefully use the SAME side channel as the TrainingAnalyticsSideChannel\n        super().__init__(DefaultTrainingAnalyticsSideChannel.CHANNEL_ID)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.default_training_analytics_side_channel",
        "documentation": {}
    },
    {
        "label": "EngineConfig",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.engine_configuration_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.engine_configuration_channel",
        "peekOfCode": "class EngineConfig(NamedTuple):\n    width: Optional[int]\n    height: Optional[int]\n    quality_level: Optional[int]\n    time_scale: Optional[float]\n    target_frame_rate: Optional[int]\n    capture_frame_rate: Optional[int]\n    @staticmethod\n    def default_config():\n        return EngineConfig(80, 80, 1, 20.0, -1, 60)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.engine_configuration_channel",
        "documentation": {}
    },
    {
        "label": "EngineConfigurationChannel",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.engine_configuration_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.engine_configuration_channel",
        "peekOfCode": "class EngineConfigurationChannel(SideChannel):\n    \"\"\"\n    This is the SideChannel for engine configuration exchange. The data in the\n    engine configuration is as follows :\n     - int width;\n     - int height;\n     - int qualityLevel;\n     - float timeScale;\n     - int targetFrameRate;\n     - int captureFrameRate;",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.engine_configuration_channel",
        "documentation": {}
    },
    {
        "label": "EnvironmentParametersChannel",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.environment_parameters_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.environment_parameters_channel",
        "peekOfCode": "class EnvironmentParametersChannel(SideChannel):\n    \"\"\"\n    This is the SideChannel for sending environment parameters to Unity.\n    You can send parameters to an environment with the command\n    set_float_parameter.\n    \"\"\"\n    class EnvironmentDataTypes(IntEnum):\n        FLOAT = 0\n        SAMPLER = 1\n    class SamplerTypes(IntEnum):",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.environment_parameters_channel",
        "documentation": {}
    },
    {
        "label": "FloatPropertiesChannel",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.float_properties_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.float_properties_channel",
        "peekOfCode": "class FloatPropertiesChannel(SideChannel):\n    \"\"\"\n    This is the SideChannel for float properties shared with Unity.\n    You can modify the float properties of an environment with the commands\n    set_property, get_property and list_properties.\n    \"\"\"\n    def __init__(self, channel_id: uuid.UUID = None) -> None:\n        self._float_properties: Dict[str, float] = {}\n        if channel_id is None:\n            channel_id = uuid.UUID(\"60ccf7d0-4f7e-11ea-b238-784f4387d1f7\")",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.float_properties_channel",
        "documentation": {}
    },
    {
        "label": "IncomingMessage",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.incoming_message",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.incoming_message",
        "peekOfCode": "class IncomingMessage:\n    \"\"\"\n    Utility class for reading the message written to a SideChannel.\n    Values must be read in the order they were written.\n    \"\"\"\n    def __init__(self, buffer: bytes, offset: int = 0):\n        \"\"\"\n        Create a new IncomingMessage from the bytes.\n        \"\"\"\n        self.buffer = buffer",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.incoming_message",
        "documentation": {}
    },
    {
        "label": "OutgoingMessage",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.outgoing_message",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.outgoing_message",
        "peekOfCode": "class OutgoingMessage:\n    \"\"\"\n    Utility class for forming the message that is written to a SideChannel.\n    All data is written in little-endian format using the struct module.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Create an OutgoingMessage with an empty buffer.\n        \"\"\"\n        self.buffer = bytearray()",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.outgoing_message",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.outgoing_message",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.outgoing_message",
        "peekOfCode": "logger = get_logger(__name__)\nclass OutgoingMessage:\n    \"\"\"\n    Utility class for forming the message that is written to a SideChannel.\n    All data is written in little-endian format using the struct module.\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Create an OutgoingMessage with an empty buffer.\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.outgoing_message",
        "documentation": {}
    },
    {
        "label": "RawBytesChannel",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.raw_bytes_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.raw_bytes_channel",
        "peekOfCode": "class RawBytesChannel(SideChannel):\n    \"\"\"\n    This is an example of what the SideChannel for raw bytes exchange would\n    look like. Is meant to be used for general research purpose.\n    \"\"\"\n    def __init__(self, channel_id: uuid.UUID):\n        self._received_messages: List[bytes] = []\n        super().__init__(channel_id)\n    def on_message_received(self, msg: IncomingMessage) -> None:\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.raw_bytes_channel",
        "documentation": {}
    },
    {
        "label": "SideChannel",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.side_channel",
        "peekOfCode": "class SideChannel(ABC):\n    \"\"\"\n    The side channel just get access to a bytes buffer that will be shared\n    between C# and Python. For example, We will create a specific side channel\n    for properties that will be a list of string (fixed size) to float number,\n    that can be modified by both C# and Python. All side channels are passed\n    to the Env object at construction.\n    \"\"\"\n    def __init__(self, channel_id: uuid.UUID):\n        self._channel_id: uuid.UUID = channel_id",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.side_channel",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.side_channel",
        "peekOfCode": "logger = get_logger(__name__)\nclass SideChannel(ABC):\n    \"\"\"\n    The side channel just get access to a bytes buffer that will be shared\n    between C# and Python. For example, We will create a specific side channel\n    for properties that will be a list of string (fixed size) to float number,\n    that can be modified by both C# and Python. All side channels are passed\n    to the Env object at construction.\n    \"\"\"\n    def __init__(self, channel_id: uuid.UUID):",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.side_channel",
        "documentation": {}
    },
    {
        "label": "SideChannelManager",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.side_channel_manager",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.side_channel_manager",
        "peekOfCode": "class SideChannelManager:\n    def __init__(self, side_channels=Optional[List[SideChannel]]):\n        self._side_channels_dict = self._get_side_channels_dict(side_channels)\n    def process_side_channel_message(self, data: bytes) -> None:\n        \"\"\"\n        Separates the data received from Python into individual messages for each\n        registered side channel and calls on_message_received on them.\n        :param data: The packed message sent by Unity\n        \"\"\"\n        offset = 0",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.side_channel_manager",
        "documentation": {}
    },
    {
        "label": "StatsAggregationMethod",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.stats_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.stats_side_channel",
        "peekOfCode": "class StatsAggregationMethod(Enum):\n    # Values within the summary period are averaged before reporting.\n    AVERAGE = 0\n    # Only the most recent value is reported.\n    MOST_RECENT = 1\n    # Values within the summary period are summed up before reporting.\n    SUM = 2\n    # All values within a summary period are reported as a histogram.\n    HISTOGRAM = 3\nStatList = List[Tuple[float, StatsAggregationMethod]]",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "StatsSideChannel",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.stats_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.stats_side_channel",
        "peekOfCode": "class StatsSideChannel(SideChannel):\n    \"\"\"\n    Side channel that receives (string, float) pairs from the environment, so that they can eventually\n    be passed to a StatsReporter.\n    \"\"\"\n    def __init__(self) -> None:\n        # >>> uuid.uuid5(uuid.NAMESPACE_URL, \"com.unity.ml-agents/StatsSideChannel\")\n        # UUID('a1d8f7b7-cec8-50f9-b78b-d3e165a78520')\n        super().__init__(uuid.UUID(\"a1d8f7b7-cec8-50f9-b78b-d3e165a78520\"))\n        self.stats: EnvironmentStats = defaultdict(list)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "StatList",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.stats_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.stats_side_channel",
        "peekOfCode": "StatList = List[Tuple[float, StatsAggregationMethod]]\nEnvironmentStats = Mapping[str, StatList]\nclass StatsSideChannel(SideChannel):\n    \"\"\"\n    Side channel that receives (string, float) pairs from the environment, so that they can eventually\n    be passed to a StatsReporter.\n    \"\"\"\n    def __init__(self) -> None:\n        # >>> uuid.uuid5(uuid.NAMESPACE_URL, \"com.unity.ml-agents/StatsSideChannel\")\n        # UUID('a1d8f7b7-cec8-50f9-b78b-d3e165a78520')",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "EnvironmentStats",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.stats_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.stats_side_channel",
        "peekOfCode": "EnvironmentStats = Mapping[str, StatList]\nclass StatsSideChannel(SideChannel):\n    \"\"\"\n    Side channel that receives (string, float) pairs from the environment, so that they can eventually\n    be passed to a StatsReporter.\n    \"\"\"\n    def __init__(self) -> None:\n        # >>> uuid.uuid5(uuid.NAMESPACE_URL, \"com.unity.ml-agents/StatsSideChannel\")\n        # UUID('a1d8f7b7-cec8-50f9-b78b-d3e165a78520')\n        super().__init__(uuid.UUID(\"a1d8f7b7-cec8-50f9-b78b-d3e165a78520\"))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.side_channel.stats_side_channel",
        "documentation": {}
    },
    {
        "label": "mock_glob_method",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "peekOfCode": "def mock_glob_method(path):\n    \"\"\"\n    Given a path input, returns a list of candidates\n    \"\"\"\n    if \".x86\" in path:\n        return [\"linux\"]\n    if \".app\" in path:\n        return [\"darwin\"]\n    if \".exe\" in path:\n        return [\"win32\"]",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "documentation": {}
    },
    {
        "label": "test_validate_path_empty",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "peekOfCode": "def test_validate_path_empty(glob_mock, platform_mock):\n    glob_mock.return_value = None\n    path = validate_environment_path(\" \")\n    assert path is None\n@mock.patch(\"mlagents_envs.env_utils.get_platform\")\n@mock.patch(\"glob.glob\")\ndef test_validate_path(glob_mock, platform_mock):\n    glob_mock.side_effect = mock_glob_method\n    for platform in [\"linux\", \"darwin\", \"win32\"]:\n        platform_mock.return_value = platform",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "documentation": {}
    },
    {
        "label": "test_validate_path",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "peekOfCode": "def test_validate_path(glob_mock, platform_mock):\n    glob_mock.side_effect = mock_glob_method\n    for platform in [\"linux\", \"darwin\", \"win32\"]:\n        platform_mock.return_value = platform\n        path = validate_environment_path(\" \")\n        assert path == platform\n@mock.patch(\"glob.glob\")\n@mock.patch(\"subprocess.Popen\")\ndef test_launch_executable(mock_popen, glob_mock):\n    with pytest.raises(UnityEnvironmentException):",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "documentation": {}
    },
    {
        "label": "test_launch_executable",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "peekOfCode": "def test_launch_executable(mock_popen, glob_mock):\n    with pytest.raises(UnityEnvironmentException):\n        launch_executable(\" \", [])\n    glob_mock.return_value = [\"FakeLaunchPath\"]\n    launch_executable(\" \", [])\n    mock_popen.side_effect = PermissionError(\"Fake permission error\")\n    with pytest.raises(UnityEnvironmentException):\n        launch_executable(\" \", [])\ndef test_set_logging_level():\n    for level in [INFO, ERROR, FATAL, CRITICAL, DEBUG]:",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "documentation": {}
    },
    {
        "label": "test_set_logging_level",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "peekOfCode": "def test_set_logging_level():\n    for level in [INFO, ERROR, FATAL, CRITICAL, DEBUG]:\n        set_log_level(level)\n        assert get_logger(\"test\").level == level",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_env_utils",
        "documentation": {}
    },
    {
        "label": "test_handles_bad_filename",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "peekOfCode": "def test_handles_bad_filename(get_communicator):\n    with pytest.raises(UnityEnvironmentException):\n        UnityEnvironment(\" \")\n@mock.patch(\"mlagents_envs.env_utils.launch_executable\")\n@mock.patch(\"mlagents_envs.environment.UnityEnvironment._get_communicator\")\ndef test_initialization(mock_communicator, mock_launcher):\n    mock_communicator.return_value = MockCommunicator(\n        discrete_action=False, visual_inputs=0\n    )\n    env = UnityEnvironment(\" \")",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "documentation": {}
    },
    {
        "label": "test_initialization",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "peekOfCode": "def test_initialization(mock_communicator, mock_launcher):\n    mock_communicator.return_value = MockCommunicator(\n        discrete_action=False, visual_inputs=0\n    )\n    env = UnityEnvironment(\" \")\n    assert list(env.behavior_specs.keys()) == [\"RealFakeBrain\"]\n    env.close()\n@pytest.mark.parametrize(\n    \"base_port,file_name,expected\",\n    [",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "documentation": {}
    },
    {
        "label": "test_port_defaults",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "peekOfCode": "def test_port_defaults(\n    mock_communicator, mock_launcher, base_port, file_name, expected\n):\n    mock_communicator.return_value = MockCommunicator(\n        discrete_action=False, visual_inputs=0\n    )\n    env = UnityEnvironment(file_name=file_name, worker_id=0, base_port=base_port)\n    assert expected == env._port\n    env.close()\n@mock.patch(\"mlagents_envs.env_utils.launch_executable\")",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "documentation": {}
    },
    {
        "label": "test_log_file_path_is_set",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "peekOfCode": "def test_log_file_path_is_set(mock_communicator, mock_launcher):\n    mock_communicator.return_value = MockCommunicator()\n    env = UnityEnvironment(\n        file_name=\"myfile\", worker_id=0, log_folder=\"./some-log-folder-path\"\n    )\n    args = env._executable_args()\n    log_file_index = args.index(\"-logFile\")\n    assert args[log_file_index + 1] == \"./some-log-folder-path/Player-0.log\"\n    env.close()\n@mock.patch(\"mlagents_envs.env_utils.launch_executable\")",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "documentation": {}
    },
    {
        "label": "test_reset",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "peekOfCode": "def test_reset(mock_communicator, mock_launcher):\n    mock_communicator.return_value = MockCommunicator(\n        discrete_action=False, visual_inputs=0\n    )\n    env = UnityEnvironment(\" \")\n    spec = env.behavior_specs[\"RealFakeBrain\"]\n    env.reset()\n    decision_steps, terminal_steps = env.get_steps(\"RealFakeBrain\")\n    env.close()\n    assert isinstance(decision_steps, DecisionSteps)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "documentation": {}
    },
    {
        "label": "test_step",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "peekOfCode": "def test_step(mock_communicator, mock_launcher):\n    mock_communicator.return_value = MockCommunicator(\n        discrete_action=False, visual_inputs=0\n    )\n    env = UnityEnvironment(\" \")\n    spec = env.behavior_specs[\"RealFakeBrain\"]\n    env.step()\n    decision_steps, terminal_steps = env.get_steps(\"RealFakeBrain\")\n    n_agents = len(decision_steps)\n    env.set_actions(\"RealFakeBrain\", spec.action_spec.empty_action(n_agents))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "documentation": {}
    },
    {
        "label": "test_close",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "peekOfCode": "def test_close(mock_communicator, mock_launcher):\n    comm = MockCommunicator(discrete_action=False, visual_inputs=0)\n    mock_communicator.return_value = comm\n    env = UnityEnvironment(\" \")\n    assert env._loaded\n    env.close()\n    assert not env._loaded\n    assert comm.has_been_closed\ndef test_check_communication_compatibility():\n    unity_ver = \"1.0.0\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "documentation": {}
    },
    {
        "label": "test_check_communication_compatibility",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "peekOfCode": "def test_check_communication_compatibility():\n    unity_ver = \"1.0.0\"\n    python_ver = \"1.0.0\"\n    unity_package_version = \"0.15.0\"\n    assert UnityEnvironment._check_communication_compatibility(\n        unity_ver, python_ver, unity_package_version\n    )\n    unity_ver = \"1.1.0\"\n    assert UnityEnvironment._check_communication_compatibility(\n        unity_ver, python_ver, unity_package_version",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "documentation": {}
    },
    {
        "label": "test_returncode_to_signal_name",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "peekOfCode": "def test_returncode_to_signal_name():\n    assert UnityEnvironment._returncode_to_signal_name(-2) == \"SIGINT\"\n    assert UnityEnvironment._returncode_to_signal_name(42) is None\n    assert UnityEnvironment._returncode_to_signal_name(\"SIGINT\") is None\nif __name__ == \"__main__\":\n    pytest.main()",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_envs",
        "documentation": {}
    },
    {
        "label": "delete_binaries",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_registry",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_registry",
        "peekOfCode": "def delete_binaries():\n    tmp_dir, bin_dir = get_tmp_dir()\n    shutil.rmtree(tmp_dir)\n    shutil.rmtree(bin_dir)\ndef create_registry():\n    reg = UnityEnvRegistry()\n    entry = RemoteRegistryEntry(\n        BASIC_ID,\n        0.0,\n        \"Description\",",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_registry",
        "documentation": {}
    },
    {
        "label": "create_registry",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_registry",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_registry",
        "peekOfCode": "def create_registry():\n    reg = UnityEnvRegistry()\n    entry = RemoteRegistryEntry(\n        BASIC_ID,\n        0.0,\n        \"Description\",\n        \"https://storage.googleapis.com/mlagents-test-environments/1.0.0/linux/Basic.zip\",\n        \"https://storage.googleapis.com/mlagents-test-environments/1.0.0/darwin/Basic.zip\",\n        \"https://storage.googleapis.com/mlagents-test-environments/1.0.0/windows/Basic.zip\",\n    )",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_registry",
        "documentation": {}
    },
    {
        "label": "test_basic_in_registry",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_registry",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_registry",
        "peekOfCode": "def test_basic_in_registry():\n    assert BASIC_ID in default_registry\n    os.environ[\"TERM\"] = \"xterm\"\n    delete_binaries()\n    registry = create_registry()\n    for worker_id in range(2):\n        assert BASIC_ID in registry\n        env = registry[BASIC_ID].make(\n            base_port=6002, worker_id=worker_id, no_graphics=True\n        )",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_registry",
        "documentation": {}
    },
    {
        "label": "BASIC_ID",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_registry",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_registry",
        "peekOfCode": "BASIC_ID = \"Basic\"\ndef delete_binaries():\n    tmp_dir, bin_dir = get_tmp_dir()\n    shutil.rmtree(tmp_dir)\n    shutil.rmtree(bin_dir)\ndef create_registry():\n    reg = UnityEnvRegistry()\n    entry = RemoteRegistryEntry(\n        BASIC_ID,\n        0.0,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_registry",
        "documentation": {}
    },
    {
        "label": "test_rpc_communicator_checks_port_on_create",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "peekOfCode": "def test_rpc_communicator_checks_port_on_create():\n    first_comm = RpcCommunicator()\n    with pytest.raises(UnityWorkerInUseException):\n        second_comm = RpcCommunicator()\n        second_comm.close()\n    first_comm.close()\ndef test_rpc_communicator_close():\n    # Ensures it is possible to open a new RPC Communicators\n    # after closing one on the same worker_id\n    first_comm = RpcCommunicator()",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "documentation": {}
    },
    {
        "label": "test_rpc_communicator_close",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "peekOfCode": "def test_rpc_communicator_close():\n    # Ensures it is possible to open a new RPC Communicators\n    # after closing one on the same worker_id\n    first_comm = RpcCommunicator()\n    first_comm.close()\n    second_comm = RpcCommunicator()\n    second_comm.close()\ndef test_rpc_communicator_create_multiple_workers():\n    # Ensures multiple RPC communicators can be created with\n    # different worker_ids without causing an error.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "documentation": {}
    },
    {
        "label": "test_rpc_communicator_create_multiple_workers",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "peekOfCode": "def test_rpc_communicator_create_multiple_workers():\n    # Ensures multiple RPC communicators can be created with\n    # different worker_ids without causing an error.\n    first_comm = RpcCommunicator()\n    second_comm = RpcCommunicator(worker_id=1)\n    first_comm.close()\n    second_comm.close()\n@mock.patch.object(grpc, \"server\")\n@mock.patch.object(\n    mlagents_envs.rpc_communicator, \"UnityToExternalServicerImplementation\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "documentation": {}
    },
    {
        "label": "test_rpc_communicator_initialize_OK",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "peekOfCode": "def test_rpc_communicator_initialize_OK(mock_impl, mock_grpc_server):\n    comm = RpcCommunicator(timeout_wait=0.25)\n    comm.unity_to_external.parent_conn.poll.return_value = True\n    input = UnityInputProto()\n    comm.initialize(input)\n    comm.unity_to_external.parent_conn.poll.assert_called()\n@mock.patch.object(grpc, \"server\")\n@mock.patch.object(\n    mlagents_envs.rpc_communicator, \"UnityToExternalServicerImplementation\"\n)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "documentation": {}
    },
    {
        "label": "test_rpc_communicator_initialize_timeout",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "peekOfCode": "def test_rpc_communicator_initialize_timeout(mock_impl, mock_grpc_server):\n    comm = RpcCommunicator(timeout_wait=0.25)\n    comm.unity_to_external.parent_conn.poll.return_value = None\n    input = UnityInputProto()\n    # Expect a timeout\n    with pytest.raises(UnityTimeOutException):\n        comm.initialize(input)\n    comm.unity_to_external.parent_conn.poll.assert_called()\n@mock.patch.object(grpc, \"server\")\n@mock.patch.object(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "documentation": {}
    },
    {
        "label": "test_rpc_communicator_initialize_callback",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "peekOfCode": "def test_rpc_communicator_initialize_callback(mock_impl, mock_grpc_server):\n    def callback():\n        raise UnityEnvironmentException\n    comm = RpcCommunicator(timeout_wait=0.25)\n    comm.unity_to_external.parent_conn.poll.return_value = None\n    input = UnityInputProto()\n    # Expect a timeout\n    with pytest.raises(UnityEnvironmentException):\n        comm.initialize(input, poll_callback=callback)\n    comm.unity_to_external.parent_conn.poll.assert_called()",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_communicator",
        "documentation": {}
    },
    {
        "label": "generate_list_agent_proto",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def generate_list_agent_proto(\n    n_agent: int,\n    shape: List[Tuple[int]],\n    infinite_rewards: bool = False,\n    nan_observations: bool = False,\n) -> List[AgentInfoProto]:\n    result = []\n    for agent_index in range(n_agent):\n        ap = AgentInfoProto()\n        ap.reward = float(\"inf\") if infinite_rewards else agent_index",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "generate_compressed_data",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def generate_compressed_data(in_array: np.ndarray) -> bytes:\n    image_arr = (in_array * 255).astype(np.uint8)\n    bytes_out = bytes()\n    num_channels = in_array.shape[2]\n    num_images = (num_channels + 2) // 3\n    # Split the input image into batches of 3 channels.\n    for i in range(num_images):\n        sub_image = image_arr[..., 3 * i : 3 * i + 3]\n        if (i == num_images - 1) and (num_channels % 3) != 0:\n            # Pad zeros",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "generate_compressed_proto_obs",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def generate_compressed_proto_obs(\n    in_array: np.ndarray, grayscale: bool = False\n) -> ObservationProto:\n    obs_proto = ObservationProto()\n    obs_proto.compressed_data = generate_compressed_data(in_array)\n    obs_proto.compression_type = PNG\n    if grayscale:\n        # grayscale flag is only used for old API without mapping\n        expected_shape = [in_array.shape[0], in_array.shape[1], 1]\n        obs_proto.shape.extend(expected_shape)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "generate_compressed_proto_obs_with_mapping",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def generate_compressed_proto_obs_with_mapping(\n    in_array: np.ndarray, mapping: List[int]\n) -> ObservationProto:\n    obs_proto = ObservationProto()\n    obs_proto.compressed_data = generate_compressed_data(in_array)\n    obs_proto.compression_type = PNG\n    if mapping is not None:\n        obs_proto.compressed_channel_mapping.extend(mapping)\n        expected_shape = [\n            in_array.shape[0],",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "generate_uncompressed_proto_obs",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def generate_uncompressed_proto_obs(in_array: np.ndarray) -> ObservationProto:\n    obs_proto = ObservationProto()\n    obs_proto.float_data.data.extend(in_array.flatten().tolist())\n    obs_proto.compression_type = NONE\n    obs_proto.shape.extend(in_array.shape)\n    return obs_proto\ndef proto_from_steps(\n    decision_steps: DecisionSteps, terminal_steps: TerminalSteps\n) -> List[AgentInfoProto]:\n    agent_info_protos: List[AgentInfoProto] = []",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "proto_from_steps",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def proto_from_steps(\n    decision_steps: DecisionSteps, terminal_steps: TerminalSteps\n) -> List[AgentInfoProto]:\n    agent_info_protos: List[AgentInfoProto] = []\n    # Take care of the DecisionSteps first\n    for agent_id in decision_steps.agent_id:\n        agent_id_index = decision_steps.agent_id_to_index[agent_id]\n        reward = decision_steps.reward[agent_id_index]\n        done = False\n        max_step_reached = False",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "proto_from_steps_and_action",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def proto_from_steps_and_action(\n    decision_steps: DecisionSteps,\n    terminal_steps: TerminalSteps,\n    continuous_actions: np.ndarray,\n    discrete_actions: np.ndarray,\n) -> List[AgentInfoActionPairProto]:\n    agent_info_protos = proto_from_steps(decision_steps, terminal_steps)\n    agent_action_protos = []\n    num_agents = (\n        len(continuous_actions)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_process_pixels",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_process_pixels():\n    in_array = np.random.rand(128, 64, 3)\n    byte_arr = generate_compressed_data(in_array)\n    out_array = process_pixels(byte_arr, 3)\n    assert out_array.shape == (128, 64, 3)\n    assert np.sum(in_array - out_array) / np.prod(in_array.shape) < 0.01\n    assert np.allclose(in_array, out_array, atol=0.01)\ndef test_process_pixels_multi_png():\n    height = 128\n    width = 64",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_process_pixels_multi_png",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_process_pixels_multi_png():\n    height = 128\n    width = 64\n    num_channels = 7\n    in_array = np.random.rand(height, width, num_channels)\n    byte_arr = generate_compressed_data(in_array)\n    out_array = process_pixels(byte_arr, num_channels)\n    assert out_array.shape == (height, width, num_channels)\n    assert np.sum(in_array - out_array) / np.prod(in_array.shape) < 0.01\n    assert np.allclose(in_array, out_array, atol=0.01)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_process_pixels_gray",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_process_pixels_gray():\n    in_array = np.random.rand(128, 64, 3)\n    byte_arr = generate_compressed_data(in_array)\n    out_array = process_pixels(byte_arr, 1)\n    assert out_array.shape == (128, 64, 1)\n    assert np.mean(in_array.mean(axis=2, keepdims=True) - out_array) < 0.01\n    assert np.allclose(in_array.mean(axis=2, keepdims=True), out_array, atol=0.01)\ndef test_vector_observation():\n    n_agents = 10\n    shapes = [(3,), (4,)]",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_vector_observation",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_vector_observation():\n    n_agents = 10\n    shapes = [(3,), (4,)]\n    obs_specs = create_observation_specs_with_shapes(shapes)\n    list_proto = generate_list_agent_proto(n_agents, shapes)\n    for obs_index, shape in enumerate(shapes):\n        arr = _process_rank_one_or_two_observation(\n            obs_index, obs_specs[obs_index], list_proto\n        )\n        assert list(arr.shape) == ([n_agents] + list(shape))",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_process_visual_observation",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_process_visual_observation():\n    shape = (128, 64, 3)\n    in_array_1 = np.random.rand(*shape)\n    proto_obs_1 = generate_compressed_proto_obs(in_array_1)\n    in_array_2 = np.random.rand(*shape)\n    in_array_2_mapping = [0, 1, 2]\n    proto_obs_2 = generate_compressed_proto_obs_with_mapping(\n        in_array_2, in_array_2_mapping\n    )\n    ap1 = AgentInfoProto()",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_process_visual_observation_grayscale",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_process_visual_observation_grayscale():\n    in_array_1 = np.random.rand(128, 64, 3)\n    proto_obs_1 = generate_compressed_proto_obs(in_array_1, grayscale=True)\n    expected_out_array_1 = np.mean(in_array_1, axis=2, keepdims=True)\n    in_array_2 = np.random.rand(128, 64, 3)\n    in_array_2_mapping = [0, 0, 0]\n    proto_obs_2 = generate_compressed_proto_obs_with_mapping(\n        in_array_2, in_array_2_mapping\n    )\n    expected_out_array_2 = np.mean(in_array_2, axis=2, keepdims=True)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_process_visual_observation_padded_channels",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_process_visual_observation_padded_channels():\n    in_array_1 = np.random.rand(128, 64, 12)\n    in_array_1_mapping = [0, 1, 2, 3, -1, -1, 4, 5, 6, 7, -1, -1]\n    proto_obs_1 = generate_compressed_proto_obs_with_mapping(\n        in_array_1, in_array_1_mapping\n    )\n    expected_out_array_1 = np.take(in_array_1, [0, 1, 2, 3, 6, 7, 8, 9], axis=2)\n    ap1 = AgentInfoProto()\n    ap1.observations.extend([proto_obs_1])\n    ap_list = [ap1]",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_process_visual_observation_bad_shape",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_process_visual_observation_bad_shape():\n    in_array_1 = np.random.rand(128, 64, 3)\n    proto_obs_1 = generate_compressed_proto_obs(in_array_1)\n    ap1 = AgentInfoProto()\n    ap1.observations.extend([proto_obs_1])\n    ap_list = [ap1]\n    shape = (128, 42, 3)\n    obs_spec = create_observation_specs_with_shapes([shape])[0]\n    with pytest.raises(UnityObservationException):\n        _process_maybe_compressed_observation(0, obs_spec, ap_list)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_batched_step_result_from_proto",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_batched_step_result_from_proto():\n    n_agents = 10\n    shapes = [(3,), (4,)]\n    spec = BehaviorSpec(\n        create_observation_specs_with_shapes(shapes), ActionSpec.create_continuous(3)\n    )\n    ap_list = generate_list_agent_proto(n_agents, shapes)\n    decision_steps, terminal_steps = steps_from_proto(ap_list, spec)\n    for agent_id in range(n_agents):\n        if agent_id in decision_steps:",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_mismatch_observations_raise_in_step_result_from_proto",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_mismatch_observations_raise_in_step_result_from_proto():\n    n_agents = 10\n    shapes = [(3,), (4,)]\n    spec = BehaviorSpec(\n        create_observation_specs_with_shapes(shapes), ActionSpec.create_continuous(3)\n    )\n    ap_list = generate_list_agent_proto(n_agents, shapes)\n    # Hack an observation to be larger, we should get an exception\n    ap_list[0].observations[0].shape[0] += 1\n    ap_list[0].observations[0].float_data.data.append(0.42)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_action_masking_discrete",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_action_masking_discrete():\n    n_agents = 10\n    shapes = [(3,), (4,)]\n    behavior_spec = BehaviorSpec(\n        create_observation_specs_with_shapes(shapes), ActionSpec.create_discrete((7, 3))\n    )\n    ap_list = generate_list_agent_proto(n_agents, shapes)\n    decision_steps, terminal_steps = steps_from_proto(ap_list, behavior_spec)\n    masks = decision_steps.action_mask\n    assert isinstance(masks, list)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_action_masking_discrete_1",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_action_masking_discrete_1():\n    n_agents = 10\n    shapes = [(3,), (4,)]\n    behavior_spec = BehaviorSpec(\n        create_observation_specs_with_shapes(shapes), ActionSpec.create_discrete((10,))\n    )\n    ap_list = generate_list_agent_proto(n_agents, shapes)\n    decision_steps, terminal_steps = steps_from_proto(ap_list, behavior_spec)\n    masks = decision_steps.action_mask\n    assert isinstance(masks, list)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_action_masking_discrete_2",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_action_masking_discrete_2():\n    n_agents = 10\n    shapes = [(3,), (4,)]\n    behavior_spec = BehaviorSpec(\n        create_observation_specs_with_shapes(shapes),\n        ActionSpec.create_discrete((2, 2, 6)),\n    )\n    ap_list = generate_list_agent_proto(n_agents, shapes)\n    decision_steps, terminal_steps = steps_from_proto(ap_list, behavior_spec)\n    masks = decision_steps.action_mask",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_action_masking_continuous",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_action_masking_continuous():\n    n_agents = 10\n    shapes = [(3,), (4,)]\n    behavior_spec = BehaviorSpec(\n        create_observation_specs_with_shapes(shapes), ActionSpec.create_continuous(10)\n    )\n    ap_list = generate_list_agent_proto(n_agents, shapes)\n    decision_steps, terminal_steps = steps_from_proto(ap_list, behavior_spec)\n    masks = decision_steps.action_mask\n    assert masks is None",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_agent_behavior_spec_from_proto",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_agent_behavior_spec_from_proto():\n    agent_proto = generate_list_agent_proto(1, [(3,), (4,)])[0]\n    bp = BrainParametersProto()\n    bp.vector_action_size_deprecated.extend([5, 4])\n    bp.vector_action_space_type_deprecated = 0\n    behavior_spec = behavior_spec_from_proto(bp, agent_proto)\n    assert behavior_spec.action_spec.is_discrete()\n    assert not behavior_spec.action_spec.is_continuous()\n    assert [spec.shape for spec in behavior_spec.observation_specs] == [(3,), (4,)]\n    assert behavior_spec.action_spec.discrete_branches == (5, 4)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_batched_step_result_from_proto_raises_on_infinite",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_batched_step_result_from_proto_raises_on_infinite():\n    n_agents = 10\n    shapes = [(3,), (4,)]\n    behavior_spec = BehaviorSpec(\n        create_observation_specs_with_shapes(shapes), ActionSpec.create_continuous(3)\n    )\n    ap_list = generate_list_agent_proto(n_agents, shapes, infinite_rewards=True)\n    with pytest.raises(RuntimeError):\n        steps_from_proto(ap_list, behavior_spec)\ndef test_batched_step_result_from_proto_raises_on_nan():",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_batched_step_result_from_proto_raises_on_nan",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "peekOfCode": "def test_batched_step_result_from_proto_raises_on_nan():\n    n_agents = 10\n    shapes = [(3,), (4,)]\n    behavior_spec = BehaviorSpec(\n        create_observation_specs_with_shapes(shapes), ActionSpec.create_continuous(3)\n    )\n    ap_list = generate_list_agent_proto(n_agents, shapes, nan_observations=True)\n    with pytest.raises(RuntimeError):\n        steps_from_proto(ap_list, behavior_spec)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_rpc_utils",
        "documentation": {}
    },
    {
        "label": "test_set_action_single_agent",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_set_action",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_set_action",
        "peekOfCode": "def test_set_action_single_agent():\n    engine_config_channel = EngineConfigurationChannel()\n    env = default_registry[BALL_ID].make(\n        base_port=6000,\n        worker_id=0,\n        no_graphics=True,\n        side_channels=[engine_config_channel],\n    )\n    engine_config_channel.set_configuration_parameters(time_scale=100)\n    for _ in range(3):",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_set_action",
        "documentation": {}
    },
    {
        "label": "test_set_action_multi_agent",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_set_action",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_set_action",
        "peekOfCode": "def test_set_action_multi_agent():\n    engine_config_channel = EngineConfigurationChannel()\n    env = default_registry[BALL_ID].make(\n        base_port=6001,\n        worker_id=0,\n        no_graphics=True,\n        side_channels=[engine_config_channel],\n    )\n    engine_config_channel.set_configuration_parameters(time_scale=100)\n    for _ in range(3):",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_set_action",
        "documentation": {}
    },
    {
        "label": "BALL_ID",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_set_action",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_set_action",
        "peekOfCode": "BALL_ID = \"3DBall\"\ndef test_set_action_single_agent():\n    engine_config_channel = EngineConfigurationChannel()\n    env = default_registry[BALL_ID].make(\n        base_port=6000,\n        worker_id=0,\n        no_graphics=True,\n        side_channels=[engine_config_channel],\n    )\n    engine_config_channel.set_configuration_parameters(time_scale=100)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_set_action",
        "documentation": {}
    },
    {
        "label": "IntChannel",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "peekOfCode": "class IntChannel(SideChannel):\n    def __init__(self):\n        self.list_int = []\n        super().__init__(uuid.UUID(\"a85ba5c0-4f87-11ea-a517-784f4387d1f7\"))\n    def on_message_received(self, msg: IncomingMessage) -> None:\n        val = msg.read_int32()\n        self.list_int += [val]\n    def send_int(self, value):\n        msg = OutgoingMessage()\n        msg.write_int32(value)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "documentation": {}
    },
    {
        "label": "test_int_channel",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "peekOfCode": "def test_int_channel():\n    sender = IntChannel()\n    receiver = IntChannel()\n    sender.send_int(5)\n    sender.send_int(6)\n    data = SideChannelManager([sender]).generate_side_channel_messages()\n    SideChannelManager([receiver]).process_side_channel_message(data)\n    assert receiver.list_int[0] == 5\n    assert receiver.list_int[1] == 6\ndef test_float_properties():",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "documentation": {}
    },
    {
        "label": "test_float_properties",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "peekOfCode": "def test_float_properties():\n    sender = FloatPropertiesChannel()\n    receiver = FloatPropertiesChannel()\n    sender.set_property(\"prop1\", 1.0)\n    data = SideChannelManager([sender]).generate_side_channel_messages()\n    SideChannelManager([receiver]).process_side_channel_message(data)\n    val = receiver.get_property(\"prop1\")\n    assert val == 1.0\n    val = receiver.get_property(\"prop2\")\n    assert val is None",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "documentation": {}
    },
    {
        "label": "test_raw_bytes",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "peekOfCode": "def test_raw_bytes():\n    guid = uuid.uuid4()\n    sender = RawBytesChannel(guid)\n    receiver = RawBytesChannel(guid)\n    sender.send_raw_data(b\"foo\")\n    sender.send_raw_data(b\"bar\")\n    data = SideChannelManager([sender]).generate_side_channel_messages()\n    SideChannelManager([receiver]).process_side_channel_message(data)\n    messages = receiver.get_and_clear_received_messages()\n    assert len(messages) == 2",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "documentation": {}
    },
    {
        "label": "test_message_bool",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "peekOfCode": "def test_message_bool():\n    vals = [True, False]\n    msg_out = OutgoingMessage()\n    for v in vals:\n        msg_out.write_bool(v)\n    msg_in = IncomingMessage(msg_out.buffer)\n    read_vals = []\n    for _ in range(len(vals)):\n        read_vals.append(msg_in.read_bool())\n    assert vals == read_vals",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "documentation": {}
    },
    {
        "label": "test_message_int32",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "peekOfCode": "def test_message_int32():\n    val = 1337\n    msg_out = OutgoingMessage()\n    msg_out.write_int32(val)\n    msg_in = IncomingMessage(msg_out.buffer)\n    read_val = msg_in.read_int32()\n    assert val == read_val\n    # Test reading with defaults\n    assert 0 == msg_in.read_int32()\n    assert val == msg_in.read_int32(default_value=val)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "documentation": {}
    },
    {
        "label": "test_message_float32",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "peekOfCode": "def test_message_float32():\n    val = 42.0\n    msg_out = OutgoingMessage()\n    msg_out.write_float32(val)\n    msg_in = IncomingMessage(msg_out.buffer)\n    read_val = msg_in.read_float32()\n    # These won't be exactly equal in general, since python floats are 64-bit.\n    assert val == read_val\n    # Test reading with defaults\n    assert 0.0 == msg_in.read_float32()",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "documentation": {}
    },
    {
        "label": "test_message_string",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "peekOfCode": "def test_message_string():\n    val = \"mlagents!\"\n    msg_out = OutgoingMessage()\n    msg_out.write_string(val)\n    msg_in = IncomingMessage(msg_out.buffer)\n    read_val = msg_in.read_string()\n    assert val == read_val\n    # Test reading with defaults\n    assert \"\" == msg_in.read_string()\n    assert val == msg_in.read_string(default_value=val)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "documentation": {}
    },
    {
        "label": "test_message_float_list",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "peekOfCode": "def test_message_float_list():\n    val = [1.0, 3.0, 9.0]\n    msg_out = OutgoingMessage()\n    msg_out.write_float32_list(val)\n    msg_in = IncomingMessage(msg_out.buffer)\n    read_val = msg_in.read_float32_list()\n    # These won't be exactly equal in general, since python floats are 64-bit.\n    assert val == read_val\n    # Test reading with defaults\n    assert [] == msg_in.read_float32_list()",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "documentation": {}
    },
    {
        "label": "test_engine_configuration",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "peekOfCode": "def test_engine_configuration():\n    sender = EngineConfigurationChannel()\n    # We use a raw bytes channel to interpred the data\n    receiver = RawBytesChannel(sender.channel_id)\n    config = EngineConfig.default_config()\n    sender.set_configuration(config)\n    data = SideChannelManager([sender]).generate_side_channel_messages()\n    SideChannelManager([receiver]).process_side_channel_message(data)\n    received_data = receiver.get_and_clear_received_messages()\n    assert len(received_data) == 5  # 5 different messages one for each setting",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "documentation": {}
    },
    {
        "label": "test_environment_parameters",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "peekOfCode": "def test_environment_parameters():\n    sender = EnvironmentParametersChannel()\n    # We use a raw bytes channel to interpred the data\n    receiver = RawBytesChannel(sender.channel_id)\n    sender.set_float_parameter(\"param-1\", 0.1)\n    data = SideChannelManager([sender]).generate_side_channel_messages()\n    SideChannelManager([receiver]).process_side_channel_message(data)\n    message = IncomingMessage(receiver.get_and_clear_received_messages()[0])\n    key = message.read_string()\n    dtype = message.read_int32()",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "documentation": {}
    },
    {
        "label": "test_stats_channel",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "peekOfCode": "def test_stats_channel():\n    receiver = StatsSideChannel()\n    message = OutgoingMessage()\n    message.write_string(\"stats-1\")\n    message.write_float32(42.0)\n    message.write_int32(1)  # corresponds to StatsAggregationMethod.MOST_RECENT\n    receiver.on_message_received(IncomingMessage(message.buffer))\n    stats = receiver.get_and_reset_stats()\n    assert len(stats) == 1\n    val, method = stats[\"stats-1\"][0]",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_side_channel",
        "documentation": {}
    },
    {
        "label": "test_decision_steps",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "peekOfCode": "def test_decision_steps():\n    ds = DecisionSteps(\n        obs=[np.array(range(12), dtype=np.float32).reshape(3, 4)],\n        reward=np.array(range(3), dtype=np.float32),\n        agent_id=np.array(range(10, 13), dtype=np.int32),\n        action_mask=[np.zeros((3, 4), dtype=np.bool)],\n        group_id=np.array(range(3), dtype=np.int32),\n        group_reward=np.array(range(3), dtype=np.float32),\n    )\n    assert ds.agent_id_to_index[10] == 0",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "documentation": {}
    },
    {
        "label": "test_empty_decision_steps",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "peekOfCode": "def test_empty_decision_steps():\n    specs = BehaviorSpec(\n        observation_specs=create_observation_specs_with_shapes([(3, 2), (5,)]),\n        action_spec=ActionSpec.create_continuous(3),\n    )\n    ds = DecisionSteps.empty(specs)\n    assert len(ds.obs) == 2\n    assert ds.obs[0].shape == (0, 3, 2)\n    assert ds.obs[1].shape == (0, 5)\ndef test_terminal_steps():",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "documentation": {}
    },
    {
        "label": "test_terminal_steps",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "peekOfCode": "def test_terminal_steps():\n    ts = TerminalSteps(\n        obs=[np.array(range(12), dtype=np.float32).reshape(3, 4)],\n        reward=np.array(range(3), dtype=np.float32),\n        agent_id=np.array(range(10, 13), dtype=np.int32),\n        interrupted=np.array([1, 0, 1], dtype=np.bool),\n        group_id=np.array(range(3), dtype=np.int32),\n        group_reward=np.array(range(3), dtype=np.float32),\n    )\n    assert ts.agent_id_to_index[10] == 0",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "documentation": {}
    },
    {
        "label": "test_empty_terminal_steps",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "peekOfCode": "def test_empty_terminal_steps():\n    specs = BehaviorSpec(\n        observation_specs=create_observation_specs_with_shapes([(3, 2), (5,)]),\n        action_spec=ActionSpec.create_continuous(3),\n    )\n    ts = TerminalSteps.empty(specs)\n    assert len(ts.obs) == 2\n    assert ts.obs[0].shape == (0, 3, 2)\n    assert ts.obs[1].shape == (0, 5)\ndef test_specs():",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "documentation": {}
    },
    {
        "label": "test_specs",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "peekOfCode": "def test_specs():\n    specs = ActionSpec.create_continuous(3)\n    assert specs.discrete_branches == ()\n    assert specs.discrete_size == 0\n    assert specs.continuous_size == 3\n    assert specs.empty_action(5).continuous.shape == (5, 3)\n    assert specs.empty_action(5).continuous.dtype == np.float32\n    specs = ActionSpec.create_discrete((3,))\n    assert specs.discrete_branches == (3,)\n    assert specs.discrete_size == 1",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "documentation": {}
    },
    {
        "label": "test_action_generator",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "peekOfCode": "def test_action_generator():\n    # Continuous\n    action_len = 30\n    specs = ActionSpec.create_continuous(action_len)\n    zero_action = specs.empty_action(4).continuous\n    assert np.array_equal(zero_action, np.zeros((4, action_len), dtype=np.float32))\n    print(specs.random_action(4))\n    random_action = specs.random_action(4).continuous\n    print(random_action)\n    assert random_action.dtype == np.float32",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_steps",
        "documentation": {}
    },
    {
        "label": "decorated_func",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_timers",
        "peekOfCode": "def decorated_func(x: int = 0, y: float = 1.0) -> str:\n    timers.set_gauge(\"my_gauge\", x + y)\n    return f\"{x} + {y} = {x + y}\"\ndef test_timers() -> None:\n    test_timer = timers.TimerStack()\n    with mock.patch(\"mlagents_envs.timers._get_thread_timer\", return_value=test_timer):\n        # First, run some simple code\n        with timers.hierarchical_timer(\"top_level\"):\n            for i in range(3):\n                with timers.hierarchical_timer(\"multiple\"):",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_timers",
        "documentation": {}
    },
    {
        "label": "test_timers",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_timers",
        "peekOfCode": "def test_timers() -> None:\n    test_timer = timers.TimerStack()\n    with mock.patch(\"mlagents_envs.timers._get_thread_timer\", return_value=test_timer):\n        # First, run some simple code\n        with timers.hierarchical_timer(\"top_level\"):\n            for i in range(3):\n                with timers.hierarchical_timer(\"multiple\"):\n                    decorated_func(i, i)\n            raised = False\n            try:",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.tests.test_timers",
        "documentation": {}
    },
    {
        "label": "DecisionStep",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "class DecisionStep(NamedTuple):\n    \"\"\"\n    Contains the data a single Agent collected since the last\n    simulation step.\n     - obs is a list of numpy arrays observations collected by the agent.\n     - reward is a float. Corresponds to the rewards collected by the agent\n     since the last simulation step.\n     - agent_id is an int and an unique identifier for the corresponding Agent.\n     - action_mask is an optional list of one dimensional array of booleans.\n     Only available when using multi-discrete actions.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DecisionSteps",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "class DecisionSteps(Mapping):\n    \"\"\"\n    Contains the data a batch of similar Agents collected since the last\n    simulation step. Note that all Agents do not necessarily have new\n    information to send at each simulation step. Therefore, the ordering of\n    agents and the batch size of the DecisionSteps are not fixed across\n    simulation steps.\n     - obs is a list of numpy arrays observations collected by the batch of\n     agent. Each obs has one extra dimension compared to DecisionStep: the\n     first dimension of the array corresponds to the batch size of the batch.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "TerminalStep",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "class TerminalStep(NamedTuple):\n    \"\"\"\n    Contains the data a single Agent collected when its episode ended.\n     - obs is a list of numpy arrays observations collected by the agent.\n     - reward is a float. Corresponds to the rewards collected by the agent\n     since the last simulation step.\n     - interrupted is a bool. Is true if the Agent was interrupted since the last\n     decision step. For example, if the Agent reached the maximum number of steps for\n     the episode.\n     - agent_id is an int and an unique identifier for the corresponding Agent.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "TerminalSteps",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "class TerminalSteps(Mapping):\n    \"\"\"\n    Contains the data a batch of Agents collected when their episode\n    terminated. All Agents present in the TerminalSteps have ended their\n    episode.\n     - obs is a list of numpy arrays observations collected by the batch of\n     agent. Each obs has one extra dimension compared to DecisionStep: the\n     first dimension of the array corresponds to the batch size of the batch.\n     - reward is a float vector of length batch size. Corresponds to the\n     rewards collected by each agent since the last simulation step.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "_ActionTupleBase",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "class _ActionTupleBase(ABC):\n    \"\"\"\n    An object whose fields correspond to action data of continuous and discrete\n    spaces. Dimensions are of (n_agents, continuous_size) and (n_agents, discrete_size),\n    respectively. Note, this also holds when continuous or discrete size is\n    zero.\n    \"\"\"\n    def __init__(\n        self,\n        continuous: Optional[np.ndarray] = None,",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionTuple",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "class ActionTuple(_ActionTupleBase):\n    \"\"\"\n    An object whose fields correspond to actions of different types.\n    Continuous and discrete actions are numpy arrays of type float32 and\n    int32, respectively and are type checked on construction.\n    Dimensions are of (n_agents, continuous_size) and (n_agents, discrete_size),\n    respectively. Note, this also holds when continuous or discrete size is\n    zero.\n    \"\"\"\n    @property",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ActionSpec",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "class ActionSpec(NamedTuple):\n    \"\"\"\n    A NamedTuple containing utility functions and information about the action spaces\n    for a group of Agents under the same behavior.\n    - num_continuous_actions is an int corresponding to the number of floats which\n    constitute the action.\n    - discrete_branch_sizes is a Tuple of int where each int corresponds to\n    the number of discrete actions available to the agent on an independent action branch.\n    \"\"\"\n    continuous_size: int",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "DimensionProperty",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "class DimensionProperty(IntFlag):\n    \"\"\"\n    The dimension property of a dimension of an observation.\n    \"\"\"\n    UNSPECIFIED = 0\n    \"\"\"\n    No properties specified.\n    \"\"\"\n    NONE = 1\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationType",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "class ObservationType(Enum):\n    \"\"\"\n    An Enum which defines the type of information carried in the observation\n    of the agent.\n    \"\"\"\n    DEFAULT = 0\n    \"\"\"\n    Observation information is generic.\n    \"\"\"\n    GOAL_SIGNAL = 1",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "ObservationSpec",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "class ObservationSpec(NamedTuple):\n    \"\"\"\n    A NamedTuple containing information about the observation of Agents.\n    - shape is a Tuple of int : It corresponds to the shape of\n    an observation's dimensions.\n    - dimension_property is a Tuple of DimensionProperties flag, one flag for each\n    dimension.\n    - observation_type is an enum of ObservationType.\n    \"\"\"\n    shape: Tuple[int, ...]",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorSpec",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "class BehaviorSpec(NamedTuple):\n    \"\"\"\n    A NamedTuple containing information about the observation and action\n    spaces for a group of Agents under the same behavior.\n    - observation_specs is a List of ObservationSpec NamedTuple containing\n    information about the information of the Agent's observations such as their shapes.\n    The order of the ObservationSpec is the same as the order of the observations of an\n    agent.\n    - action_spec is an ActionSpec NamedTuple.\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorMapping",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "class BehaviorMapping(Mapping):\n    def __init__(self, specs: Dict[BehaviorName, BehaviorSpec]):\n        self._dict = specs\n    def __len__(self) -> int:\n        return len(self._dict)\n    def __getitem__(self, behavior: BehaviorName) -> BehaviorSpec:\n        return self._dict[behavior]\n    def __iter__(self) -> Iterator[Any]:\n        yield from self._dict\nclass BaseEnv(ABC):",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BaseEnv",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "class BaseEnv(ABC):\n    @abstractmethod\n    def step(self) -> None:\n        \"\"\"\n        Signals the environment that it must move the simulation forward\n        by one step.\n        \"\"\"\n    @abstractmethod\n    def reset(self) -> None:\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "AgentId",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "AgentId = int\nGroupId = int\nBehaviorName = str\nclass DecisionStep(NamedTuple):\n    \"\"\"\n    Contains the data a single Agent collected since the last\n    simulation step.\n     - obs is a list of numpy arrays observations collected by the agent.\n     - reward is a float. Corresponds to the rewards collected by the agent\n     since the last simulation step.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "GroupId",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "GroupId = int\nBehaviorName = str\nclass DecisionStep(NamedTuple):\n    \"\"\"\n    Contains the data a single Agent collected since the last\n    simulation step.\n     - obs is a list of numpy arrays observations collected by the agent.\n     - reward is a float. Corresponds to the rewards collected by the agent\n     since the last simulation step.\n     - agent_id is an int and an unique identifier for the corresponding Agent.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "BehaviorName",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "peekOfCode": "BehaviorName = str\nclass DecisionStep(NamedTuple):\n    \"\"\"\n    Contains the data a single Agent collected since the last\n    simulation step.\n     - obs is a list of numpy arrays observations collected by the agent.\n     - reward is a float. Corresponds to the rewards collected by the agent\n     since the last simulation step.\n     - agent_id is an int and an unique identifier for the corresponding Agent.\n     - action_mask is an optional list of one dimensional array of booleans.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.base_env",
        "documentation": {}
    },
    {
        "label": "Communicator",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator",
        "peekOfCode": "class Communicator:\n    def __init__(self, worker_id=0, base_port=5005):\n        \"\"\"\n        Python side of the communication. Must be used in pair with the right Unity Communicator equivalent.\n        :int worker_id: Offset from base_port. Used for training multiple environments simultaneously.\n        :int base_port: Baseline port number to connect to Unity environment over. worker_id increments over this.\n        \"\"\"\n    def initialize(\n        self, inputs: UnityInputProto, poll_callback: Optional[PollCallback] = None\n    ) -> UnityOutputProto:",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator",
        "documentation": {}
    },
    {
        "label": "PollCallback",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator",
        "peekOfCode": "PollCallback = Callable[[], None]\nclass Communicator:\n    def __init__(self, worker_id=0, base_port=5005):\n        \"\"\"\n        Python side of the communication. Must be used in pair with the right Unity Communicator equivalent.\n        :int worker_id: Offset from base_port. Used for training multiple environments simultaneously.\n        :int base_port: Baseline port number to connect to Unity environment over. worker_id increments over this.\n        \"\"\"\n    def initialize(\n        self, inputs: UnityInputProto, poll_callback: Optional[PollCallback] = None",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.communicator",
        "documentation": {}
    },
    {
        "label": "get_platform",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.env_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.env_utils",
        "peekOfCode": "def get_platform():\n    \"\"\"\n    returns the platform of the operating system : linux, darwin or win32\n    \"\"\"\n    return platform\ndef validate_environment_path(env_path: str) -> Optional[str]:\n    \"\"\"\n    Strip out executable extensions of the env_path\n    :param env_path: The path to the executable\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.env_utils",
        "documentation": {}
    },
    {
        "label": "validate_environment_path",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.env_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.env_utils",
        "peekOfCode": "def validate_environment_path(env_path: str) -> Optional[str]:\n    \"\"\"\n    Strip out executable extensions of the env_path\n    :param env_path: The path to the executable\n    \"\"\"\n    env_path = (\n        env_path.strip()\n        .replace(\".app\", \"\")\n        .replace(\".exe\", \"\")\n        .replace(\".x86_64\", \"\")",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.env_utils",
        "documentation": {}
    },
    {
        "label": "launch_executable",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.env_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.env_utils",
        "peekOfCode": "def launch_executable(file_name: str, args: List[str]) -> subprocess.Popen:\n    \"\"\"\n    Launches a Unity executable and returns the process handle for it.\n    :param file_name: the name of the executable\n    :param args: List of string that will be passed as command line arguments\n    when launching the executable.\n    \"\"\"\n    launch_string = validate_environment_path(file_name)\n    if launch_string is None:\n        raise UnityEnvironmentException(",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.env_utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.env_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.env_utils",
        "peekOfCode": "logger = get_logger(__name__)\ndef get_platform():\n    \"\"\"\n    returns the platform of the operating system : linux, darwin or win32\n    \"\"\"\n    return platform\ndef validate_environment_path(env_path: str) -> Optional[str]:\n    \"\"\"\n    Strip out executable extensions of the env_path\n    :param env_path: The path to the executable",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.env_utils",
        "documentation": {}
    },
    {
        "label": "UnityEnvironment",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.environment",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.environment",
        "peekOfCode": "class UnityEnvironment(BaseEnv):\n    # Communication protocol version.\n    # When connecting to C#, this must be compatible with Academy.k_ApiVersion.\n    # We follow semantic versioning on the communication version, so existing\n    # functionality will work as long the major versions match.\n    # This should be changed whenever a change is made to the communication protocol.\n    # Revision history:\n    #  * 1.0.0 - initial version\n    #  * 1.1.0 - support concatenated PNGs for compressed observations.\n    #  * 1.2.0 - support compression mapping for stacked compressed observations.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.environment",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.environment",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.environment",
        "peekOfCode": "logger = get_logger(__name__)\nclass UnityEnvironment(BaseEnv):\n    # Communication protocol version.\n    # When connecting to C#, this must be compatible with Academy.k_ApiVersion.\n    # We follow semantic versioning on the communication version, so existing\n    # functionality will work as long the major versions match.\n    # This should be changed whenever a change is made to the communication protocol.\n    # Revision history:\n    #  * 1.0.0 - initial version\n    #  * 1.1.0 - support concatenated PNGs for compressed observations.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.environment",
        "documentation": {}
    },
    {
        "label": "UnityException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "peekOfCode": "class UnityException(Exception):\n    \"\"\"\n    Any error related to ml-agents environment.\n    \"\"\"\n    pass\nclass UnityEnvironmentException(UnityException):\n    \"\"\"\n    Related to errors starting and closing environment.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityEnvironmentException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "peekOfCode": "class UnityEnvironmentException(UnityException):\n    \"\"\"\n    Related to errors starting and closing environment.\n    \"\"\"\n    pass\nclass UnityCommunicationException(UnityException):\n    \"\"\"\n    Related to errors with the communicator.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityCommunicationException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "peekOfCode": "class UnityCommunicationException(UnityException):\n    \"\"\"\n    Related to errors with the communicator.\n    \"\"\"\n    pass\nclass UnityCommunicatorStoppedException(UnityException):\n    \"\"\"\n    Raised when communicator has stopped gracefully.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityCommunicatorStoppedException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "peekOfCode": "class UnityCommunicatorStoppedException(UnityException):\n    \"\"\"\n    Raised when communicator has stopped gracefully.\n    \"\"\"\n    pass\nclass UnityObservationException(UnityException):\n    \"\"\"\n    Related to errors with receiving observations.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityObservationException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "peekOfCode": "class UnityObservationException(UnityException):\n    \"\"\"\n    Related to errors with receiving observations.\n    \"\"\"\n    pass\nclass UnityActionException(UnityException):\n    \"\"\"\n    Related to errors with sending actions.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityActionException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "peekOfCode": "class UnityActionException(UnityException):\n    \"\"\"\n    Related to errors with sending actions.\n    \"\"\"\n    pass\nclass UnityTimeOutException(UnityException):\n    \"\"\"\n    Related to errors with communication timeouts.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityTimeOutException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "peekOfCode": "class UnityTimeOutException(UnityException):\n    \"\"\"\n    Related to errors with communication timeouts.\n    \"\"\"\n    pass\nclass UnitySideChannelException(UnityException):\n    \"\"\"\n    Related to errors with side channels.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnitySideChannelException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "peekOfCode": "class UnitySideChannelException(UnityException):\n    \"\"\"\n    Related to errors with side channels.\n    \"\"\"\n    pass\nclass UnityWorkerInUseException(UnityException):\n    \"\"\"\n    This error occurs when the port for a certain worker ID is already reserved.\n    \"\"\"\n    MESSAGE_TEMPLATE = (",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityWorkerInUseException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "peekOfCode": "class UnityWorkerInUseException(UnityException):\n    \"\"\"\n    This error occurs when the port for a certain worker ID is already reserved.\n    \"\"\"\n    MESSAGE_TEMPLATE = (\n        \"Couldn't start socket communication because worker number {} is still in use. \"\n        \"You may need to manually close a previously opened environment \"\n        \"or use a different worker number.\"\n    )\n    def __init__(self, worker_id):",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "UnityPolicyException",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "peekOfCode": "class UnityPolicyException(UnityException):\n    \"\"\"\n    Related to errors with the Trainer.\n    \"\"\"\n    pass",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.exception",
        "documentation": {}
    },
    {
        "label": "get_logger",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "def get_logger(name: str) -> logging.Logger:\n    \"\"\"\n    Create a logger with the specified name. The logger will use the log level\n    specified by set_log_level()\n    \"\"\"\n    logger = logging.getLogger(name=name)\n    if _log_level == DEBUG:\n        formatter = logging.Formatter(fmt=DEBUG_LOG_FORMAT, datefmt=DATE_FORMAT)\n    else:\n        formatter = logging.Formatter(fmt=LOG_FORMAT)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "set_log_level",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "def set_log_level(log_level: int) -> None:\n    \"\"\"\n    Set the ML-Agents logging level. This will also configure the logging format (if it hasn't already been set).\n    \"\"\"\n    global _log_level\n    _log_level = log_level\n    for logger in _loggers:\n        logger.setLevel(log_level)\n    if log_level == DEBUG:\n        formatter = logging.Formatter(fmt=DEBUG_LOG_FORMAT, datefmt=DATE_FORMAT)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "CRITICAL",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "CRITICAL = logging.CRITICAL\nFATAL = logging.FATAL\nERROR = logging.ERROR\nWARNING = logging.WARNING\nINFO = logging.INFO\nDEBUG = logging.DEBUG\nNOTSET = logging.NOTSET\n_loggers = set()\n_log_level = NOTSET\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "FATAL",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "FATAL = logging.FATAL\nERROR = logging.ERROR\nWARNING = logging.WARNING\nINFO = logging.INFO\nDEBUG = logging.DEBUG\nNOTSET = logging.NOTSET\n_loggers = set()\n_log_level = NOTSET\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEBUG_LOG_FORMAT = \"%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "ERROR = logging.ERROR\nWARNING = logging.WARNING\nINFO = logging.INFO\nDEBUG = logging.DEBUG\nNOTSET = logging.NOTSET\n_loggers = set()\n_log_level = NOTSET\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEBUG_LOG_FORMAT = \"%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s\"\nLOG_FORMAT = \"[%(levelname)s] %(message)s\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "WARNING",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "WARNING = logging.WARNING\nINFO = logging.INFO\nDEBUG = logging.DEBUG\nNOTSET = logging.NOTSET\n_loggers = set()\n_log_level = NOTSET\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEBUG_LOG_FORMAT = \"%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s\"\nLOG_FORMAT = \"[%(levelname)s] %(message)s\"\ndef get_logger(name: str) -> logging.Logger:",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "INFO",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "INFO = logging.INFO\nDEBUG = logging.DEBUG\nNOTSET = logging.NOTSET\n_loggers = set()\n_log_level = NOTSET\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEBUG_LOG_FORMAT = \"%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s\"\nLOG_FORMAT = \"[%(levelname)s] %(message)s\"\ndef get_logger(name: str) -> logging.Logger:\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "DEBUG = logging.DEBUG\nNOTSET = logging.NOTSET\n_loggers = set()\n_log_level = NOTSET\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEBUG_LOG_FORMAT = \"%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s\"\nLOG_FORMAT = \"[%(levelname)s] %(message)s\"\ndef get_logger(name: str) -> logging.Logger:\n    \"\"\"\n    Create a logger with the specified name. The logger will use the log level",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "NOTSET",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "NOTSET = logging.NOTSET\n_loggers = set()\n_log_level = NOTSET\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEBUG_LOG_FORMAT = \"%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s\"\nLOG_FORMAT = \"[%(levelname)s] %(message)s\"\ndef get_logger(name: str) -> logging.Logger:\n    \"\"\"\n    Create a logger with the specified name. The logger will use the log level\n    specified by set_log_level()",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "_loggers",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "_loggers = set()\n_log_level = NOTSET\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEBUG_LOG_FORMAT = \"%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s\"\nLOG_FORMAT = \"[%(levelname)s] %(message)s\"\ndef get_logger(name: str) -> logging.Logger:\n    \"\"\"\n    Create a logger with the specified name. The logger will use the log level\n    specified by set_log_level()\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "_log_level",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "_log_level = NOTSET\nDATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEBUG_LOG_FORMAT = \"%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s\"\nLOG_FORMAT = \"[%(levelname)s] %(message)s\"\ndef get_logger(name: str) -> logging.Logger:\n    \"\"\"\n    Create a logger with the specified name. The logger will use the log level\n    specified by set_log_level()\n    \"\"\"\n    logger = logging.getLogger(name=name)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "DATE_FORMAT",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEBUG_LOG_FORMAT = \"%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s\"\nLOG_FORMAT = \"[%(levelname)s] %(message)s\"\ndef get_logger(name: str) -> logging.Logger:\n    \"\"\"\n    Create a logger with the specified name. The logger will use the log level\n    specified by set_log_level()\n    \"\"\"\n    logger = logging.getLogger(name=name)\n    if _log_level == DEBUG:",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "DEBUG_LOG_FORMAT",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "DEBUG_LOG_FORMAT = \"%(asctime)s %(levelname)s [%(filename)s:%(lineno)d] %(message)s\"\nLOG_FORMAT = \"[%(levelname)s] %(message)s\"\ndef get_logger(name: str) -> logging.Logger:\n    \"\"\"\n    Create a logger with the specified name. The logger will use the log level\n    specified by set_log_level()\n    \"\"\"\n    logger = logging.getLogger(name=name)\n    if _log_level == DEBUG:\n        formatter = logging.Formatter(fmt=DEBUG_LOG_FORMAT, datefmt=DATE_FORMAT)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "LOG_FORMAT",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "peekOfCode": "LOG_FORMAT = \"[%(levelname)s] %(message)s\"\ndef get_logger(name: str) -> logging.Logger:\n    \"\"\"\n    Create a logger with the specified name. The logger will use the log level\n    specified by set_log_level()\n    \"\"\"\n    logger = logging.getLogger(name=name)\n    if _log_level == DEBUG:\n        formatter = logging.Formatter(fmt=DEBUG_LOG_FORMAT, datefmt=DATE_FORMAT)\n    else:",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.logging_util",
        "documentation": {}
    },
    {
        "label": "MockCommunicator",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.mock_communicator",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.mock_communicator",
        "peekOfCode": "class MockCommunicator(Communicator):\n    def __init__(\n        self,\n        discrete_action=False,\n        visual_inputs=0,\n        num_agents=3,\n        brain_name=\"RealFakeBrain\",\n        vec_obs_size=3,\n    ):\n        \"\"\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.mock_communicator",
        "documentation": {}
    },
    {
        "label": "UnityToExternalServicerImplementation",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_communicator",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_communicator",
        "peekOfCode": "class UnityToExternalServicerImplementation(UnityToExternalProtoServicer):\n    def __init__(self):\n        self.parent_conn, self.child_conn = Pipe()\n    def Initialize(self, request, context):\n        self.child_conn.send(request)\n        return self.child_conn.recv()\n    def Exchange(self, request, context):\n        self.child_conn.send(request)\n        return self.child_conn.recv()\nclass RpcCommunicator(Communicator):",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_communicator",
        "documentation": {}
    },
    {
        "label": "RpcCommunicator",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_communicator",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_communicator",
        "peekOfCode": "class RpcCommunicator(Communicator):\n    def __init__(self, worker_id=0, base_port=5005, timeout_wait=30):\n        \"\"\"\n        Python side of the grpc communication. Python is the server and Unity the client\n        :int base_port: Baseline port number to connect to Unity environment over. worker_id increments over this.\n        :int worker_id: Offset from base_port. Used for training multiple environments simultaneously.\n        :int timeout_wait: Timeout (in seconds) to wait for a response before exiting.\n        \"\"\"\n        super().__init__(worker_id, base_port)\n        self.port = base_port + worker_id",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_communicator",
        "documentation": {}
    },
    {
        "label": "OffsetBytesIO",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "peekOfCode": "class OffsetBytesIO:\n    \"\"\"\n    Simple file-like class that wraps a bytes, and allows moving its \"start\"\n    position in the bytes. This is only used for reading concatenated PNGs,\n    because Pillow always calls seek(0) at the start of reading.\n    \"\"\"\n    __slots__ = [\"fp\", \"offset\"]\n    def __init__(self, data: bytes):\n        self.fp = io.BytesIO(data)\n        self.offset = 0",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "behavior_spec_from_proto",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "peekOfCode": "def behavior_spec_from_proto(\n    brain_param_proto: BrainParametersProto, agent_info: AgentInfoProto\n) -> BehaviorSpec:\n    \"\"\"\n    Converts brain parameter and agent info proto to BehaviorSpec object.\n    :param brain_param_proto: protobuf object.\n    :param agent_info: protobuf object.\n    :return: BehaviorSpec object.\n    \"\"\"\n    observation_specs = []",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "process_pixels",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "peekOfCode": "def process_pixels(\n    image_bytes: bytes, expected_channels: int, mappings: Optional[List[int]] = None\n) -> np.ndarray:\n    \"\"\"\n    Converts byte array observation image into numpy array, re-sizes it,\n    and optionally converts it to grey scale\n    :param image_bytes: input byte array corresponding to image\n    :param expected_channels: Expected output channels\n    :return: processed numpy array of observation from environment\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "steps_from_proto",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "peekOfCode": "def steps_from_proto(\n    agent_info_list: Collection[AgentInfoProto], behavior_spec: BehaviorSpec\n) -> Tuple[DecisionSteps, TerminalSteps]:\n    decision_agent_info_list = [\n        agent_info for agent_info in agent_info_list if not agent_info.done\n    ]\n    terminal_agent_info_list = [\n        agent_info for agent_info in agent_info_list if agent_info.done\n    ]\n    decision_obs_list: List[np.ndarray] = []",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "PNG_HEADER",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "peekOfCode": "PNG_HEADER = b\"\\x89PNG\\r\\n\\x1a\\n\"\ndef behavior_spec_from_proto(\n    brain_param_proto: BrainParametersProto, agent_info: AgentInfoProto\n) -> BehaviorSpec:\n    \"\"\"\n    Converts brain parameter and agent info proto to BehaviorSpec object.\n    :param brain_param_proto: protobuf object.\n    :param agent_info: protobuf object.\n    :return: BehaviorSpec object.\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.rpc_utils",
        "documentation": {}
    },
    {
        "label": "TimerNode",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "class TimerNode:\n    \"\"\"\n    Represents the time spent in a block of code.\n    \"\"\"\n    __slots__ = [\"children\", \"total\", \"count\", \"is_parallel\"]\n    def __init__(self):\n        # Note that since dictionary keys are the node names, we don't explicitly store the name on the TimerNode.\n        self.children: Dict[str, TimerNode] = {}\n        self.total: float = 0.0\n        self.count: int = 0",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "GaugeNode",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "class GaugeNode:\n    \"\"\"\n    Tracks the most recent value of a metric. This is analogous to gauges in statsd.\n    \"\"\"\n    __slots__ = [\"value\", \"min_value\", \"max_value\", \"count\", \"_timestamp\"]\n    def __init__(self, value: float):\n        self.value = value\n        self.min_value = value\n        self.max_value = value\n        self.count = 1",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "TimerStack",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "class TimerStack:\n    \"\"\"\n    Tracks all the time spent. Users shouldn't use this directly, they should use the contextmanager below to make\n    sure that pushes and pops are already matched.\n    \"\"\"\n    __slots__ = [\"root\", \"stack\", \"start_time\", \"gauges\", \"metadata\"]\n    def __init__(self):\n        self.root = TimerNode()\n        self.stack = [self.root]\n        self.start_time = time.perf_counter()",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "def foo(t):\n    time.sleep(t)\ndef main():\n    for i in range(3):\n        foo(i + 1)\n    with hierarchical_timer(\"context\"):\n        foo(1)\n    print(get_timer_tree())\nThis would produce a timer tree like\n    (root)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "def main():\n    for i in range(3):\n        foo(i + 1)\n    with hierarchical_timer(\"context\"):\n        foo(1)\n    print(get_timer_tree())\nThis would produce a timer tree like\n    (root)\n        \"foo\"\n        \"context\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "get_timer_stack_for_thread",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "def get_timer_stack_for_thread(t: threading.Thread) -> Optional[TimerStack]:\n    if t.ident is None:\n        # Thread hasn't started, shouldn't ever happen\n        return None\n    return _thread_timer_stacks.get(t.ident)\n@contextmanager\ndef hierarchical_timer(name: str, timer_stack: TimerStack = None) -> Generator:\n    \"\"\"\n    Creates a scoped timer around a block of code. This time spent will automatically be incremented when\n    the context manager exits.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "hierarchical_timer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "def hierarchical_timer(name: str, timer_stack: TimerStack = None) -> Generator:\n    \"\"\"\n    Creates a scoped timer around a block of code. This time spent will automatically be incremented when\n    the context manager exits.\n    \"\"\"\n    timer_stack = timer_stack or _get_thread_timer()\n    timer_node = timer_stack.push(name)\n    start_time = time.perf_counter()\n    try:\n        # The wrapped code block will run here.",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "timed",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "def timed(func: FuncT) -> FuncT:\n    \"\"\"\n    Decorator for timing a function or method. The name of the timer will be the qualified name of the function.\n    Usage:\n        @timed\n        def my_func(x, y):\n            return x + y\n    Note that because this doesn't take arguments, the global timer stack is always used.\n    \"\"\"\n    def wrapped(*args, **kwargs):",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "set_gauge",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "def set_gauge(name: str, value: float, timer_stack: TimerStack = None) -> None:\n    \"\"\"\n    Updates the value of the gauge (or creates it if it hasn't been set before).\n    \"\"\"\n    timer_stack = timer_stack or _get_thread_timer()\n    timer_stack.set_gauge(name, value)\ndef merge_gauges(gauges: Dict[str, GaugeNode], timer_stack: TimerStack = None) -> None:\n    \"\"\"\n    Merge the gauges from another TimerStack with the provided one (or the\n    current thread's stack if none is provided).",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "merge_gauges",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "def merge_gauges(gauges: Dict[str, GaugeNode], timer_stack: TimerStack = None) -> None:\n    \"\"\"\n    Merge the gauges from another TimerStack with the provided one (or the\n    current thread's stack if none is provided).\n    :param gauges:\n    :param timer_stack:\n    :return:\n    \"\"\"\n    timer_stack = timer_stack or _get_thread_timer()\n    for n, g in gauges.items():",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "add_metadata",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "def add_metadata(key: str, value: str, timer_stack: TimerStack = None) -> None:\n    timer_stack = timer_stack or _get_thread_timer()\n    timer_stack.add_metadata(key, value)\ndef get_timer_tree(timer_stack: TimerStack = None) -> Dict[str, Any]:\n    \"\"\"\n    Return the tree of timings from the TimerStack as a dictionary (or the\n     current thread's  stack if none is provided)\n    \"\"\"\n    timer_stack = timer_stack or _get_thread_timer()\n    return timer_stack.get_timing_tree()",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "get_timer_tree",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "def get_timer_tree(timer_stack: TimerStack = None) -> Dict[str, Any]:\n    \"\"\"\n    Return the tree of timings from the TimerStack as a dictionary (or the\n     current thread's  stack if none is provided)\n    \"\"\"\n    timer_stack = timer_stack or _get_thread_timer()\n    return timer_stack.get_timing_tree()\ndef get_timer_root(timer_stack: TimerStack = None) -> TimerNode:\n    \"\"\"\n    Get the root TimerNode of the timer_stack (or the current thread's",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "get_timer_root",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "def get_timer_root(timer_stack: TimerStack = None) -> TimerNode:\n    \"\"\"\n    Get the root TimerNode of the timer_stack (or the current thread's\n    TimerStack if not specified)\n    \"\"\"\n    timer_stack = timer_stack or _get_thread_timer()\n    return timer_stack.get_root()\ndef reset_timers(timer_stack: TimerStack = None) -> None:\n    \"\"\"\n    Reset the timer_stack (or the current thread's TimerStack if not specified)",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "reset_timers",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "def reset_timers(timer_stack: TimerStack = None) -> None:\n    \"\"\"\n    Reset the timer_stack (or the current thread's TimerStack if not specified)\n    \"\"\"\n    timer_stack = timer_stack or _get_thread_timer()\n    timer_stack.reset()",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "TIMER_FORMAT_VERSION",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "TIMER_FORMAT_VERSION = \"0.1.0\"\nclass TimerNode:\n    \"\"\"\n    Represents the time spent in a block of code.\n    \"\"\"\n    __slots__ = [\"children\", \"total\", \"count\", \"is_parallel\"]\n    def __init__(self):\n        # Note that since dictionary keys are the node names, we don't explicitly store the name on the TimerNode.\n        self.children: Dict[str, TimerNode] = {}\n        self.total: float = 0.0",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "FuncT",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "description": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "peekOfCode": "FuncT = TypeVar(\"FuncT\", bound=Callable[..., Any])\ndef timed(func: FuncT) -> FuncT:\n    \"\"\"\n    Decorator for timing a function or method. The name of the timer will be the qualified name of the function.\n    Usage:\n        @timed\n        def my_func(x, y):\n            return x + y\n    Note that because this doesn't take arguments, the global timer stack is always used.\n    \"\"\"",
        "detail": "ml-agents-unity.ml-agents-envs.mlagents_envs.timers",
        "documentation": {}
    },
    {
        "label": "VerifyVersionCommand",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-envs.setup",
        "description": "ml-agents-unity.ml-agents-envs.setup",
        "peekOfCode": "class VerifyVersionCommand(install):\n    \"\"\"\n    Custom command to verify that the git tag is the expected one for the release.\n    Originally based on https://circleci.com/blog/continuously-deploying-python-packages-to-pypi-with-circleci/\n    This differs slightly because our tags and versions are different.\n    \"\"\"\n    description = \"verify that the git tag matches our version\"\n    def run(self):\n        tag = os.getenv(\"GITHUB_REF\", \"NO GITHUB TAG!\").replace(\"refs/tags/\", \"\")\n        if tag != EXPECTED_TAG:",
        "detail": "ml-agents-unity.ml-agents-envs.setup",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.setup",
        "description": "ml-agents-unity.ml-agents-envs.setup",
        "peekOfCode": "VERSION = mlagents_envs.__version__\nEXPECTED_TAG = mlagents_envs.__release_tag__\nhere = os.path.abspath(os.path.dirname(__file__))\nclass VerifyVersionCommand(install):\n    \"\"\"\n    Custom command to verify that the git tag is the expected one for the release.\n    Originally based on https://circleci.com/blog/continuously-deploying-python-packages-to-pypi-with-circleci/\n    This differs slightly because our tags and versions are different.\n    \"\"\"\n    description = \"verify that the git tag matches our version\"",
        "detail": "ml-agents-unity.ml-agents-envs.setup",
        "documentation": {}
    },
    {
        "label": "EXPECTED_TAG",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.setup",
        "description": "ml-agents-unity.ml-agents-envs.setup",
        "peekOfCode": "EXPECTED_TAG = mlagents_envs.__release_tag__\nhere = os.path.abspath(os.path.dirname(__file__))\nclass VerifyVersionCommand(install):\n    \"\"\"\n    Custom command to verify that the git tag is the expected one for the release.\n    Originally based on https://circleci.com/blog/continuously-deploying-python-packages-to-pypi-with-circleci/\n    This differs slightly because our tags and versions are different.\n    \"\"\"\n    description = \"verify that the git tag matches our version\"\n    def run(self):",
        "detail": "ml-agents-unity.ml-agents-envs.setup",
        "documentation": {}
    },
    {
        "label": "here",
        "kind": 5,
        "importPath": "ml-agents-unity.ml-agents-envs.setup",
        "description": "ml-agents-unity.ml-agents-envs.setup",
        "peekOfCode": "here = os.path.abspath(os.path.dirname(__file__))\nclass VerifyVersionCommand(install):\n    \"\"\"\n    Custom command to verify that the git tag is the expected one for the release.\n    Originally based on https://circleci.com/blog/continuously-deploying-python-packages-to-pypi-with-circleci/\n    This differs slightly because our tags and versions are different.\n    \"\"\"\n    description = \"verify that the git tag matches our version\"\n    def run(self):\n        tag = os.getenv(\"GITHUB_REF\", \"NO GITHUB TAG!\").replace(\"refs/tags/\", \"\")",
        "detail": "ml-agents-unity.ml-agents-envs.setup",
        "documentation": {}
    },
    {
        "label": "test_register_stats_writers",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-plugin-examples.mlagents_plugin_examples.tests.test_stats_writer_plugin",
        "description": "ml-agents-unity.ml-agents-plugin-examples.mlagents_plugin_examples.tests.test_stats_writer_plugin",
        "peekOfCode": "def test_register_stats_writers():\n    # Make sure that the ExampleStatsWriter gets returned from the list of all StatsWriters\n    stats_writers = register_stats_writer_plugins(RunOptions())\n    assert any(isinstance(sw, ExampleStatsWriter) for sw in stats_writers)",
        "detail": "ml-agents-unity.ml-agents-plugin-examples.mlagents_plugin_examples.tests.test_stats_writer_plugin",
        "documentation": {}
    },
    {
        "label": "ExampleStatsWriter",
        "kind": 6,
        "importPath": "ml-agents-unity.ml-agents-plugin-examples.mlagents_plugin_examples.example_stats_writer",
        "description": "ml-agents-unity.ml-agents-plugin-examples.mlagents_plugin_examples.example_stats_writer",
        "peekOfCode": "class ExampleStatsWriter(StatsWriter):\n    \"\"\"\n    Example implementation of the StatsWriter abstract class.\n    This doesn't do anything interesting, just prints the stats that it gets.\n    \"\"\"\n    def write_stats(\n        self, category: str, values: Dict[str, StatsSummary], step: int\n    ) -> None:\n        print(f\"ExampleStatsWriter category: {category} values: {values}\")\ndef get_example_stats_writer(run_options: RunOptions) -> List[StatsWriter]:",
        "detail": "ml-agents-unity.ml-agents-plugin-examples.mlagents_plugin_examples.example_stats_writer",
        "documentation": {}
    },
    {
        "label": "get_example_stats_writer",
        "kind": 2,
        "importPath": "ml-agents-unity.ml-agents-plugin-examples.mlagents_plugin_examples.example_stats_writer",
        "description": "ml-agents-unity.ml-agents-plugin-examples.mlagents_plugin_examples.example_stats_writer",
        "peekOfCode": "def get_example_stats_writer(run_options: RunOptions) -> List[StatsWriter]:\n    \"\"\"\n    Registration function. This is referenced in setup.py and will\n    be called by mlagents-learn when it starts to determine the\n    list of StatsWriters to use.\n    It must return a list of StatsWriters.\n    \"\"\"\n    print(\"Creating a new stats writer! This is so exciting!\")\n    return [ExampleStatsWriter()]",
        "detail": "ml-agents-unity.ml-agents-plugin-examples.mlagents_plugin_examples.example_stats_writer",
        "documentation": {}
    },
    {
        "label": "hash_file",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.generate_markdown_docs",
        "description": "ml-agents-unity.utils.generate_markdown_docs",
        "peekOfCode": "def hash_file(filename):\n    \"\"\"\n    Calculate the md5 hash of a file. Used to check for stale files.\n    :param filename: The name of the file to check\n    :type str:\n    :return: A string containing the md5 hash of the file\n    :rtype: str\n    \"\"\"\n    if os.path.exists(filename):\n        hasher = hashlib.md5()",
        "detail": "ml-agents-unity.utils.generate_markdown_docs",
        "documentation": {}
    },
    {
        "label": "remove_trailing_whitespace",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.generate_markdown_docs",
        "description": "ml-agents-unity.utils.generate_markdown_docs",
        "peekOfCode": "def remove_trailing_whitespace(filename):\n    \"\"\"\n    Removes trailing whitespace from a file.\n    :param filename: The name of the file to process\n    :type str:\n    \"\"\"\n    num_changed = 0\n    # open the source file\n    with open(filename, \"rb\") as f:\n        source_file = f.read().decode()",
        "detail": "ml-agents-unity.utils.generate_markdown_docs",
        "documentation": {}
    },
    {
        "label": "ReleaseInfo",
        "kind": 6,
        "importPath": "ml-agents-unity.utils.make_readme_table",
        "description": "ml-agents-unity.utils.make_readme_table",
        "peekOfCode": "class ReleaseInfo(NamedTuple):\n    release_tag: str\n    csharp_version: str\n    python_verion: str\n    release_date: str\n    is_verified: bool = False\n    @property\n    def loose_version(self) -> LooseVersion:\n        return LooseVersion(self.python_verion)\n    @property",
        "detail": "ml-agents-unity.utils.make_readme_table",
        "documentation": {}
    },
    {
        "label": "table_line",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.make_readme_table",
        "description": "ml-agents-unity.utils.make_readme_table",
        "peekOfCode": "def table_line(version_info, bold=False):\n    bold_str = \"**\" if bold else \"\"\n    cells = [\n        f\"**{version_info.display_name}**\",\n        f\"{bold_str}{version_info.release_date}{bold_str}\",\n        f\"{bold_str}[source]({version_info.source_link}){bold_str}\",\n        f\"{bold_str}[docs]({version_info.doc_link}){bold_str}\",\n        f\"{bold_str}[download]({version_info.download_link}){bold_str}\",\n    ]\n    if version_info.is_main:",
        "detail": "ml-agents-unity.utils.make_readme_table",
        "documentation": {}
    },
    {
        "label": "MAX_DAYS",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.make_readme_table",
        "description": "ml-agents-unity.utils.make_readme_table",
        "peekOfCode": "MAX_DAYS = 150  # do not print releases older than this many days\ndef table_line(version_info, bold=False):\n    bold_str = \"**\" if bold else \"\"\n    cells = [\n        f\"**{version_info.display_name}**\",\n        f\"{bold_str}{version_info.release_date}{bold_str}\",\n        f\"{bold_str}[source]({version_info.source_link}){bold_str}\",\n        f\"{bold_str}[docs]({version_info.doc_link}){bold_str}\",\n        f\"{bold_str}[download]({version_info.download_link}){bold_str}\",\n    ]",
        "detail": "ml-agents-unity.utils.make_readme_table",
        "documentation": {}
    },
    {
        "label": "versions",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.make_readme_table",
        "description": "ml-agents-unity.utils.make_readme_table",
        "peekOfCode": "versions = [\n    ReleaseInfo(\"main\", \"main\", \"main\", \"--\"),\n    ReleaseInfo(\"release_1\", \"1.0.0\", \"0.16.0\", \"April 30, 2020\"),\n    ReleaseInfo(\"release_2\", \"1.0.2\", \"0.16.1\", \"May 20, 2020\"),\n    ReleaseInfo(\"release_3\", \"1.1.0\", \"0.17.0\", \"June 10, 2020\"),\n    ReleaseInfo(\"release_4\", \"1.2.0\", \"0.18.0\", \"July 15, 2020\"),\n    ReleaseInfo(\"release_5\", \"1.2.1\", \"0.18.1\", \"July 31, 2020\"),\n    ReleaseInfo(\"release_6\", \"1.3.0\", \"0.19.0\", \"August 12, 2020\"),\n    ReleaseInfo(\"release_7\", \"1.4.0\", \"0.20.0\", \"September 16, 2020\"),\n    ReleaseInfo(\"release_8\", \"1.5.0\", \"0.21.0\", \"October 14, 2020\"),",
        "detail": "ml-agents-unity.utils.make_readme_table",
        "documentation": {}
    },
    {
        "label": "sorted_versions",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.make_readme_table",
        "description": "ml-agents-unity.utils.make_readme_table",
        "peekOfCode": "sorted_versions = sorted(versions, key=lambda x: x.release_datetime, reverse=True)\nhighlight_versions = set()\n# Highlight the most recent verified version\nhighlight_versions.add([v for v in sorted_versions if v.is_verified][0])\n# Highlight the most recent regular version\nhighlight_versions.add(\n    [v for v in sorted_versions if (not v.is_verified and not v.is_main)][0]\n)\ncount_by_verified = Counter()\nfor version_info in sorted_versions:",
        "detail": "ml-agents-unity.utils.make_readme_table",
        "documentation": {}
    },
    {
        "label": "highlight_versions",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.make_readme_table",
        "description": "ml-agents-unity.utils.make_readme_table",
        "peekOfCode": "highlight_versions = set()\n# Highlight the most recent verified version\nhighlight_versions.add([v for v in sorted_versions if v.is_verified][0])\n# Highlight the most recent regular version\nhighlight_versions.add(\n    [v for v in sorted_versions if (not v.is_verified and not v.is_main)][0]\n)\ncount_by_verified = Counter()\nfor version_info in sorted_versions:\n    highlight = version_info in highlight_versions",
        "detail": "ml-agents-unity.utils.make_readme_table",
        "documentation": {}
    },
    {
        "label": "count_by_verified",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.make_readme_table",
        "description": "ml-agents-unity.utils.make_readme_table",
        "peekOfCode": "count_by_verified = Counter()\nfor version_info in sorted_versions:\n    highlight = version_info in highlight_versions\n    if version_info.elapsed_days > MAX_DAYS:\n        # Make sure we always have at least regular and one verified entry\n        if count_by_verified[version_info.is_verified] > 0:\n            continue\n    print(table_line(version_info, highlight))\n    count_by_verified[version_info.is_verified] += 1\nprint(\"\\n\\n\")",
        "detail": "ml-agents-unity.utils.make_readme_table",
        "documentation": {}
    },
    {
        "label": "NonTrivialPEP420PackageFinder",
        "kind": 6,
        "importPath": "ml-agents-unity.utils.validate_inits",
        "description": "ml-agents-unity.utils.validate_inits",
        "peekOfCode": "class NonTrivialPEP420PackageFinder(PEP420PackageFinder):\n    \"\"\"\n    The PEP420PackageFinder (used by find_namespace_packages) thinks everything\n    looks like a package, even if there are no python files in it. This is a\n    little stricter and only considers directories with python files in it.\n    \"\"\"\n    @staticmethod\n    def _looks_like_package(path):\n        glob_path = os.path.join(path, \"*.py\")\n        return any(glob.iglob(glob_path))",
        "detail": "ml-agents-unity.utils.validate_inits",
        "documentation": {}
    },
    {
        "label": "validate_packages",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_inits",
        "description": "ml-agents-unity.utils.validate_inits",
        "peekOfCode": "def validate_packages(root_dir):\n    \"\"\"\n    Makes sure that all python files are discoverable by find_packages(), which\n    is what we use in setup.py. We could potentially use\n    find_namespace_packages instead, but depending on PEP420 has been flaky\n    in the past (particularly with regards to mypy).\n    \"\"\"\n    exclude = [\"*.tests\", \"*.tests.*\", \"tests.*\", \"tests\"]\n    found_packages = find_packages(root_dir, exclude=exclude)\n    found_ns_packages = NonTrivialPEP420PackageFinder.find(root_dir, exclude=exclude)",
        "detail": "ml-agents-unity.utils.validate_inits",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_inits",
        "description": "ml-agents-unity.utils.validate_inits",
        "peekOfCode": "def main():\n    for root_dir in [\"ml-agents\", \"ml-agents-envs\", \"gym-unity\"]:\n        validate_packages(root_dir)\nif __name__ == \"__main__\":\n    main()",
        "detail": "ml-agents-unity.utils.validate_inits",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_meta_files",
        "description": "ml-agents-unity.utils.validate_meta_files",
        "peekOfCode": "def main():\n    asset_paths = [\n        \"Project/Assets\",\n        \"DevProject/Assets\",\n        \"com.unity.ml-agents\",\n        \"com.unity.ml-agents.extensions\",\n    ]\n    meta_suffix = \".meta\"\n    python_suffix = \".py\"\n    allow_list = frozenset(",
        "detail": "ml-agents-unity.utils.validate_meta_files",
        "documentation": {}
    },
    {
        "label": "test_release_pattern",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "def test_release_pattern():\n    # Just some sanity check that the regex works as expected.\n    for s, expected in [\n        (\n            \"https://github.com/Unity-Technologies/ml-agents/blob/release_4_docs/Food.md\",\n            True,\n        ),\n        (\"https://github.com/Unity-Technologies/ml-agents/blob/release_4/Foo.md\", True),\n        (\n            \"git clone --branch release_4 https://github.com/Unity-Technologies/ml-agents.git\",",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "test_pip_pattern",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "def test_pip_pattern():\n    # Just some sanity check that the regex works as expected.\n    for s, expected in [\n        (\"pip install mlagents\", True),\n        (\"pip3 install -q mlagents\", True),\n        (\"python -m pip install mlagents\", True),\n        (\"python -m pip install mlagents==1.2.3\", True),\n        (\"python -m pip install mlagents_envs==1.2.3\", True),\n        (\"python -m pip install mlagents==11.222.3333\", True),\n        (\"python -m pip install mlagents_envs==11.222.3333\", True),",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "update_pip_install_line",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "def update_pip_install_line(line, package_verion):\n    match = PIP_INSTALL_PATTERN.search(line)\n    if match is not None:  # if there is a pip install line\n        package_name = match.group(\"package\")\n        quiet_option = match.group(\"quiet\") or \"\"\n        replacement_version = (\n            f\"python -m pip install {quiet_option}{package_name}=={package_verion}\"\n        )\n        updated = PIP_INSTALL_PATTERN.sub(replacement_version, line)\n        return updated",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "git_ls_files",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "def git_ls_files() -> List[str]:\n    \"\"\"\n    Run \"git ls-files\" and return a list with one entry per line.\n    This returns the list of all files tracked by git.\n    \"\"\"\n    return subprocess.check_output([\"git\", \"ls-files\"], universal_newlines=True).split(\n        \"\\n\"\n    )\ndef get_release_tag() -> Optional[str]:\n    \"\"\"",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "get_release_tag",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "def get_release_tag() -> Optional[str]:\n    \"\"\"\n    Returns the release tag for the mlagents python package.\n    This will be None on the main branch.\n    :return:\n    \"\"\"\n    with open(TRAINER_INIT_FILE) as f:\n        for line in f:\n            if \"__release_tag__\" in line:\n                lhs, equals_string, rhs = line.strip().partition(\" = \")",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "get_python_package_version",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "def get_python_package_version() -> str:\n    \"\"\"\n    Returns the mlagents python package.\n    :return:\n    \"\"\"\n    with open(TRAINER_INIT_FILE) as f:\n        for line in f:\n            if \"__version__\" in line:\n                lhs, equals_string, rhs = line.strip().partition(\" = \")\n                # Evaluate the right hand side of the expression",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "check_file",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "def check_file(\n    filename: str,\n    release_tag_pattern: Pattern,\n    release_tag: str,\n    pip_allow_pattern: Pattern,\n    package_version: str,\n) -> List[str]:\n    \"\"\"\n    Validate a single file and return any offending lines.\n    \"\"\"",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "check_all_files",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "def check_all_files(\n    release_allow_pattern: Pattern,\n    release_tag: str,\n    pip_allow_pattern: Pattern,\n    package_version: str,\n) -> List[str]:\n    \"\"\"\n    Validate all files tracked by git.\n    :param release_allow_pattern:\n    \"\"\"",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "def main():\n    release_tag = get_release_tag()\n    if not release_tag:\n        print(\"Release tag is None, exiting\")\n        sys.exit(0)\n    package_version = get_python_package_version()\n    print(f\"Release tag: {release_tag}\")\n    print(f\"Python package version: {package_version}\")\n    release_allow_pattern = re.compile(f\"{release_tag}(_docs)?\")\n    pip_allow_pattern = re.compile(",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "RELEASE_PATTERN",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "RELEASE_PATTERN = re.compile(r\"release_[0-9]+(_docs)*\")\n# This matches the various ways to invoke pip: \"pip\", \"pip3\", \"python -m pip\"\n# It matches \"mlagents\" and \"mlagents_envs\", accessible as group \"package\"\n# and optionally matches the version, e.g. \"==1.2.3\"\nPIP_INSTALL_PATTERN = re.compile(\n    r\"(python -m )?pip3* install (?P<quiet>-q )?(?P<package>mlagents(_envs)?)(==[0-9]+\\.[0-9]+\\.[0-9]+(\\.dev[0-9]+)?)?\"\n)\nTRAINER_INIT_FILE = \"ml-agents/mlagents/trainers/__init__.py\"\nMATCH_ANY = re.compile(r\"(?s).*\")\n# Filename -> regex list to allow specific lines.",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "PIP_INSTALL_PATTERN",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "PIP_INSTALL_PATTERN = re.compile(\n    r\"(python -m )?pip3* install (?P<quiet>-q )?(?P<package>mlagents(_envs)?)(==[0-9]+\\.[0-9]+\\.[0-9]+(\\.dev[0-9]+)?)?\"\n)\nTRAINER_INIT_FILE = \"ml-agents/mlagents/trainers/__init__.py\"\nMATCH_ANY = re.compile(r\"(?s).*\")\n# Filename -> regex list to allow specific lines.\n# To allow everything in the file (effectively skipping it), use MATCH_ANY for the value\nALLOW_LIST = {\n    # Previous release table\n    \"README.md\": re.compile(r\"\\*\\*(Verified Package ([0-9]\\.?)*|Release [0-9]+)\\*\\*\"),",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "TRAINER_INIT_FILE",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "TRAINER_INIT_FILE = \"ml-agents/mlagents/trainers/__init__.py\"\nMATCH_ANY = re.compile(r\"(?s).*\")\n# Filename -> regex list to allow specific lines.\n# To allow everything in the file (effectively skipping it), use MATCH_ANY for the value\nALLOW_LIST = {\n    # Previous release table\n    \"README.md\": re.compile(r\"\\*\\*(Verified Package ([0-9]\\.?)*|Release [0-9]+)\\*\\*\"),\n    \"docs/Versioning.md\": MATCH_ANY,\n    \"com.unity.ml-agents/CHANGELOG.md\": MATCH_ANY,\n    \"utils/make_readme_table.py\": MATCH_ANY,",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "MATCH_ANY",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "MATCH_ANY = re.compile(r\"(?s).*\")\n# Filename -> regex list to allow specific lines.\n# To allow everything in the file (effectively skipping it), use MATCH_ANY for the value\nALLOW_LIST = {\n    # Previous release table\n    \"README.md\": re.compile(r\"\\*\\*(Verified Package ([0-9]\\.?)*|Release [0-9]+)\\*\\*\"),\n    \"docs/Versioning.md\": MATCH_ANY,\n    \"com.unity.ml-agents/CHANGELOG.md\": MATCH_ANY,\n    \"utils/make_readme_table.py\": MATCH_ANY,\n    \"utils/validate_release_links.py\": MATCH_ANY,",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "ALLOW_LIST",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.validate_release_links",
        "description": "ml-agents-unity.utils.validate_release_links",
        "peekOfCode": "ALLOW_LIST = {\n    # Previous release table\n    \"README.md\": re.compile(r\"\\*\\*(Verified Package ([0-9]\\.?)*|Release [0-9]+)\\*\\*\"),\n    \"docs/Versioning.md\": MATCH_ANY,\n    \"com.unity.ml-agents/CHANGELOG.md\": MATCH_ANY,\n    \"utils/make_readme_table.py\": MATCH_ANY,\n    \"utils/validate_release_links.py\": MATCH_ANY,\n}\ndef test_release_pattern():\n    # Just some sanity check that the regex works as expected.",
        "detail": "ml-agents-unity.utils.validate_release_links",
        "documentation": {}
    },
    {
        "label": "extract_version_string",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "def extract_version_string(filename):\n    with open(filename) as f:\n        for line in f.readlines():\n            if line.startswith(VERSION_LINE_START):\n                return line.replace(VERSION_LINE_START, \"\").strip()\n    return None\ndef check_versions() -> bool:\n    version_by_dir: Dict[str, str] = {}\n    for directory in DIRECTORIES:\n        path = os.path.join(directory, \"__init__.py\")",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "check_versions",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "def check_versions() -> bool:\n    version_by_dir: Dict[str, str] = {}\n    for directory in DIRECTORIES:\n        path = os.path.join(directory, \"__init__.py\")\n        version = extract_version_string(path)\n        print(f\"Found version {version} for {directory}\")\n        version_by_dir[directory] = version\n    # Make sure we have exactly one version, and it's not none\n    versions = set(version_by_dir.values())\n    if len(versions) != 1 or None in versions:",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "set_version",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "def set_version(\n    python_version: str,\n    csharp_version: str,\n    csharp_extensions_version: str,\n    release_tag: Optional[str],\n) -> None:\n    # Sanity check - make sure test tags have a test or dev version\n    if release_tag and \"test\" in release_tag:\n        if not (\"dev\" in python_version or \"test\" in python_version):\n            raise RuntimeError('Test tags must use a \"test\" or \"dev\" version.')",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "set_package_version",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "def set_package_version(new_version: str) -> None:\n    with open(MLAGENTS_PACKAGE_JSON_PATH) as f:\n        package_json = json.load(f)\n    if \"version\" in package_json:\n        package_json[\"version\"] = new_version\n    with open(MLAGENTS_PACKAGE_JSON_PATH, \"w\") as f:\n        json.dump(package_json, f, indent=2)\n        f.write(\"\\n\")\ndef set_extension_package_version(\n    new_dependency_version: str, new_extension_version",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "set_extension_package_version",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "def set_extension_package_version(\n    new_dependency_version: str, new_extension_version\n) -> None:\n    with open(MLAGENTS_EXTENSIONS_PACKAGE_JSON_PATH) as f:\n        package_json = json.load(f)\n    package_json[\"dependencies\"][\"com.unity.ml-agents\"] = new_dependency_version\n    if new_extension_version is not None:\n        package_json[\"version\"] = new_extension_version\n    with open(MLAGENTS_EXTENSIONS_PACKAGE_JSON_PATH, \"w\") as f:\n        json.dump(package_json, f, indent=2)",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "set_academy_version_string",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "def set_academy_version_string(new_version):\n    needle = \"internal const string k_PackageVersion\"\n    found = 0\n    with open(ACADEMY_PATH) as f:\n        lines = f.readlines()\n    for i, l in enumerate(lines):\n        if needle in l:\n            left, right = l.split(\" = \")\n            right = f' = \"{new_version}\";\\n'\n            lines[i] = left + right",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "print_release_tag_commands",
        "kind": 2,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "def print_release_tag_commands(\n    python_version: str, csharp_version: str, release_tag: str\n):\n    python_tag = f\"python-packages_{python_version}\"\n    csharp_tag = f\"com.unity.ml-agents_{csharp_version}\"\n    docs_tag = f\"{release_tag}_docs\"\n    print(\n        f\"\"\"\n###\nUse these commands to create the tags after the release:",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "VERSION_LINE_START",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "VERSION_LINE_START = \"__version__ = \"\nDIRECTORIES = [\n    \"ml-agents/mlagents/trainers\",\n    \"ml-agents-envs/mlagents_envs\",\n    \"gym-unity/gym_unity\",\n]\nMLAGENTS_PACKAGE_JSON_PATH = \"com.unity.ml-agents/package.json\"\nMLAGENTS_EXTENSIONS_PACKAGE_JSON_PATH = \"com.unity.ml-agents.extensions/package.json\"\nACADEMY_PATH = \"com.unity.ml-agents/Runtime/Academy.cs\"\nPYTHON_VERSION_FILE_TEMPLATE = \"\"\"# Version of the library that will be used to upload to pypi",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "DIRECTORIES",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "DIRECTORIES = [\n    \"ml-agents/mlagents/trainers\",\n    \"ml-agents-envs/mlagents_envs\",\n    \"gym-unity/gym_unity\",\n]\nMLAGENTS_PACKAGE_JSON_PATH = \"com.unity.ml-agents/package.json\"\nMLAGENTS_EXTENSIONS_PACKAGE_JSON_PATH = \"com.unity.ml-agents.extensions/package.json\"\nACADEMY_PATH = \"com.unity.ml-agents/Runtime/Academy.cs\"\nPYTHON_VERSION_FILE_TEMPLATE = \"\"\"# Version of the library that will be used to upload to pypi\n__version__ = {version}",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "MLAGENTS_PACKAGE_JSON_PATH",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "MLAGENTS_PACKAGE_JSON_PATH = \"com.unity.ml-agents/package.json\"\nMLAGENTS_EXTENSIONS_PACKAGE_JSON_PATH = \"com.unity.ml-agents.extensions/package.json\"\nACADEMY_PATH = \"com.unity.ml-agents/Runtime/Academy.cs\"\nPYTHON_VERSION_FILE_TEMPLATE = \"\"\"# Version of the library that will be used to upload to pypi\n__version__ = {version}\n# Git tag that will be checked to determine whether to trigger upload to pypi\n__release_tag__ = {release_tag}\n\"\"\"\ndef _escape_non_none(s: Optional[str]) -> str:\n    \"\"\"",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "MLAGENTS_EXTENSIONS_PACKAGE_JSON_PATH",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "MLAGENTS_EXTENSIONS_PACKAGE_JSON_PATH = \"com.unity.ml-agents.extensions/package.json\"\nACADEMY_PATH = \"com.unity.ml-agents/Runtime/Academy.cs\"\nPYTHON_VERSION_FILE_TEMPLATE = \"\"\"# Version of the library that will be used to upload to pypi\n__version__ = {version}\n# Git tag that will be checked to determine whether to trigger upload to pypi\n__release_tag__ = {release_tag}\n\"\"\"\ndef _escape_non_none(s: Optional[str]) -> str:\n    \"\"\"\n    Returns s escaped in quotes if it is non-None, else \"None\"",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "ACADEMY_PATH",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "ACADEMY_PATH = \"com.unity.ml-agents/Runtime/Academy.cs\"\nPYTHON_VERSION_FILE_TEMPLATE = \"\"\"# Version of the library that will be used to upload to pypi\n__version__ = {version}\n# Git tag that will be checked to determine whether to trigger upload to pypi\n__release_tag__ = {release_tag}\n\"\"\"\ndef _escape_non_none(s: Optional[str]) -> str:\n    \"\"\"\n    Returns s escaped in quotes if it is non-None, else \"None\"\n    :param s:",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "PYTHON_VERSION_FILE_TEMPLATE",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "PYTHON_VERSION_FILE_TEMPLATE = \"\"\"# Version of the library that will be used to upload to pypi\n__version__ = {version}\n# Git tag that will be checked to determine whether to trigger upload to pypi\n__release_tag__ = {release_tag}\n\"\"\"\ndef _escape_non_none(s: Optional[str]) -> str:\n    \"\"\"\n    Returns s escaped in quotes if it is non-None, else \"None\"\n    :param s:\n    :return:",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "__version__ = {version}\n# Git tag that will be checked to determine whether to trigger upload to pypi\n__release_tag__ = {release_tag}\n\"\"\"\ndef _escape_non_none(s: Optional[str]) -> str:\n    \"\"\"\n    Returns s escaped in quotes if it is non-None, else \"None\"\n    :param s:\n    :return:\n    \"\"\"",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "__release_tag__",
        "kind": 5,
        "importPath": "ml-agents-unity.utils.validate_versions",
        "description": "ml-agents-unity.utils.validate_versions",
        "peekOfCode": "__release_tag__ = {release_tag}\n\"\"\"\ndef _escape_non_none(s: Optional[str]) -> str:\n    \"\"\"\n    Returns s escaped in quotes if it is non-None, else \"None\"\n    :param s:\n    :return:\n    \"\"\"\n    if s is not None:\n        return f'\"{s}\"'",
        "detail": "ml-agents-unity.utils.validate_versions",
        "documentation": {}
    },
    {
        "label": "CorePlugin",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "peekOfCode": "class CorePlugin(BasePlugin):\n    name = \"coreplugin\"\n    version = \"0.3\"\n    def __init__(self):\n        BasePlugin.__init__(self)\n    def setup(self):\n        self.listener = CoreListener(self)\n        self.system.registerEvent(\"toolused\", self.listener)\nclass CoreListener(Listener):\n    def __init__(self, plugin):",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "documentation": {}
    },
    {
        "label": "CoreListener",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "peekOfCode": "class CoreListener(Listener):\n    def __init__(self, plugin):\n        Listener.__init__(self, plugin)\n    def handler_pluginload(self, pluginname):\n        pass\n    def handler_toolused(self, position, gamemanager):\n        #print (\"Tool %s used on %s\" % (toolname, str(position)))\n        player = gamemanager.getplayer()\n        farm = gamemanager.getfarm()\n        toolname = player.selectedtool",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "documentation": {}
    },
    {
        "label": "REMOVEWILTEDCOST",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "peekOfCode": "REMOVEWILTEDCOST = rules[\"REMOVEWILTEDCOST\"]\nREMOVEANTHILLCOST = rules[\"REMOVEANTHILLCOST\"]\nREMOVESTONECOST = rules[\"REMOVESTONECOST\"]\nclass CorePlugin(BasePlugin):\n    name = \"coreplugin\"\n    version = \"0.3\"\n    def __init__(self):\n        BasePlugin.__init__(self)\n    def setup(self):\n        self.listener = CoreListener(self)",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "documentation": {}
    },
    {
        "label": "REMOVEANTHILLCOST",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "peekOfCode": "REMOVEANTHILLCOST = rules[\"REMOVEANTHILLCOST\"]\nREMOVESTONECOST = rules[\"REMOVESTONECOST\"]\nclass CorePlugin(BasePlugin):\n    name = \"coreplugin\"\n    version = \"0.3\"\n    def __init__(self):\n        BasePlugin.__init__(self)\n    def setup(self):\n        self.listener = CoreListener(self)\n        self.system.registerEvent(\"toolused\", self.listener)",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "documentation": {}
    },
    {
        "label": "REMOVESTONECOST",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "peekOfCode": "REMOVESTONECOST = rules[\"REMOVESTONECOST\"]\nclass CorePlugin(BasePlugin):\n    name = \"coreplugin\"\n    version = \"0.3\"\n    def __init__(self):\n        BasePlugin.__init__(self)\n    def setup(self):\n        self.listener = CoreListener(self)\n        self.system.registerEvent(\"toolused\", self.listener)\nclass CoreListener(Listener):",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.coreplugin",
        "documentation": {}
    },
    {
        "label": "DictMapper",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.dictmapper",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.dictmapper",
        "peekOfCode": "class DictMapper():\n    def __init__(self, dicttomap={}):\n        self._dict = dicttomap\n    def __str__(self):\n        return repr(self._dict)\n    def __iter__(self):\n        return iter(self._dict.values())\n    def __setitem__(self, name, value):\n        self._dict[name] = value\n    def keys(self):",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.dictmapper",
        "documentation": {}
    },
    {
        "label": "ExpBar",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.expbar",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.expbar",
        "peekOfCode": "class ExpBar(Label):\n    def __init__(self, player):\n        self.player = player\n        self.oldexp = -1.0\n        Label.__init__(self, \"\", (9, 58))\n    def update_text(self):\n        # get data\n        exp = self.player.exp\n        nextlvlexp = self.player.nextlvlexp\n        level = self.player.level",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.expbar",
        "documentation": {}
    },
    {
        "label": "FarmTile",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "peekOfCode": "class FarmTile:\n    \"\"\"Farm tile represent one tile on each farm\"\"\"\n    def __init__(self, obj=None):\n        self.water = 0.0\n        self.farmobject = obj\n        self.posx = -1\n        self.posy = -1\n    def __getitem__(self, name):\n        if name == \"water\":\n            return self.get_water()",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "documentation": {}
    },
    {
        "label": "FarmField",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "peekOfCode": "class FarmField:\n    \"\"\"Represent Farm 12x12 in size each\"\"\"\n    def __init__(self, gm):\n        \"\"\" Init FarmField\"\"\"\n        self.gamemanager = gm\n        self.farmtiles = {}\n        self.raining = False\n        self.raintime = time.time()\n        self.last_checksum = \"\"\n        self.seconds_to_update = 0",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "documentation": {}
    },
    {
        "label": "FarmObject",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "peekOfCode": "class FarmObject:\n    \"\"\"Represent Each object possible to place on Farm\"\"\"\n    def __init__(self):\n        self.name = \"\"\n        self.description = \"\"\n        self.id = 0\n        self.price = 0\n        self.type = \"\"\n    def apply_dict(self, dictionary):\n        \"\"\"apply dictionary to object\"\"\"",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "documentation": {}
    },
    {
        "label": "Seed",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "peekOfCode": "class Seed(FarmObject):\n    \"\"\"Represent seed farmobject\"\"\"\n    def __init__(self):\n        \"\"\"Init new seed\"\"\"\n        FarmObject.__init__(self)\n        self.type = \"seed\"\n        self.growtime = 60  # grow time in seconds\n        self.growstarttime = 0  # when grow was been started\n        self.growquantity = 2  # how many new seeds you got when seed fully grow\n        self.growendtime = 0",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "documentation": {}
    },
    {
        "label": "objects",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "peekOfCode": "objects = DictMapper()\nobjects.load(os.path.join(\"data\", \"objects.json\"))",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.farm",
        "documentation": {}
    },
    {
        "label": "GameManager",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamemanager",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamemanager",
        "peekOfCode": "class GameManager:\n    def __init__(self):\n        self.farms = []\n        self.gameseed = int(time.time())\n        self.gametime = int(time.time())\n        self.current_farm = 0\n        self.player = Player()\n    def getfarm(self, farmid=None):\n        if farmid is None:\n            farmid = self.current_farm",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamemanager",
        "documentation": {}
    },
    {
        "label": "GameWindow",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "peekOfCode": "class GameWindow(Window):\n    def __init__(self):\n        Window.__init__(self, (800, 600), (0, 0))\n        self.lazyscreen = None\n        # Create gamemanager\n        self.gamemanager = GameManager()\n        # timers\n        self.eventstimer = Timer()\n        self.updatetimer = Timer()\n        self.images = ImageLoader(imagesdata)",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "documentation": {}
    },
    {
        "label": "REMOVEWILTEDCOST",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "peekOfCode": "REMOVEWILTEDCOST = farmlib.rules[\"REMOVEWILTEDCOST\"]\nREMOVEANTHILLCOST = farmlib.rules[\"REMOVEANTHILLCOST\"]\nREMOVESTONECOST = farmlib.rules[\"REMOVESTONECOST\"]\nTOOLS = [\"harvest\", \"plant\", \"watering\", \"shovel\", \"pickaxe\", \"axe\"]\n# Images data\nimagesdata = farmlib.images[\"imagesdata\"]\n# merge objects images data (objects image have objects/objects+id.png)\nfor gobject in objects:\n    name = \"object\" + str(gobject['id']) + \".png\"\n    objectsimagepath = os.path.join(\"images\", os.path.join(\"objects\", name))",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "documentation": {}
    },
    {
        "label": "REMOVEANTHILLCOST",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "peekOfCode": "REMOVEANTHILLCOST = farmlib.rules[\"REMOVEANTHILLCOST\"]\nREMOVESTONECOST = farmlib.rules[\"REMOVESTONECOST\"]\nTOOLS = [\"harvest\", \"plant\", \"watering\", \"shovel\", \"pickaxe\", \"axe\"]\n# Images data\nimagesdata = farmlib.images[\"imagesdata\"]\n# merge objects images data (objects image have objects/objects+id.png)\nfor gobject in objects:\n    name = \"object\" + str(gobject['id']) + \".png\"\n    objectsimagepath = os.path.join(\"images\", os.path.join(\"objects\", name))\n    imagesdata[\"object\" + str(gobject['id'])] = objectsimagepath",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "documentation": {}
    },
    {
        "label": "REMOVESTONECOST",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "peekOfCode": "REMOVESTONECOST = farmlib.rules[\"REMOVESTONECOST\"]\nTOOLS = [\"harvest\", \"plant\", \"watering\", \"shovel\", \"pickaxe\", \"axe\"]\n# Images data\nimagesdata = farmlib.images[\"imagesdata\"]\n# merge objects images data (objects image have objects/objects+id.png)\nfor gobject in objects:\n    name = \"object\" + str(gobject['id']) + \".png\"\n    objectsimagepath = os.path.join(\"images\", os.path.join(\"objects\", name))\n    imagesdata[\"object\" + str(gobject['id'])] = objectsimagepath\nclass GameWindow(Window):",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "documentation": {}
    },
    {
        "label": "TOOLS",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "peekOfCode": "TOOLS = [\"harvest\", \"plant\", \"watering\", \"shovel\", \"pickaxe\", \"axe\"]\n# Images data\nimagesdata = farmlib.images[\"imagesdata\"]\n# merge objects images data (objects image have objects/objects+id.png)\nfor gobject in objects:\n    name = \"object\" + str(gobject['id']) + \".png\"\n    objectsimagepath = os.path.join(\"images\", os.path.join(\"objects\", name))\n    imagesdata[\"object\" + str(gobject['id'])] = objectsimagepath\nclass GameWindow(Window):\n    def __init__(self):",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "documentation": {}
    },
    {
        "label": "imagesdata",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "peekOfCode": "imagesdata = farmlib.images[\"imagesdata\"]\n# merge objects images data (objects image have objects/objects+id.png)\nfor gobject in objects:\n    name = \"object\" + str(gobject['id']) + \".png\"\n    objectsimagepath = os.path.join(\"images\", os.path.join(\"objects\", name))\n    imagesdata[\"object\" + str(gobject['id'])] = objectsimagepath\nclass GameWindow(Window):\n    def __init__(self):\n        Window.__init__(self, (800, 600), (0, 0))\n        self.lazyscreen = None",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.gamewindow",
        "documentation": {}
    },
    {
        "label": "HelpWindow",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.helpwindow",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.helpwindow",
        "peekOfCode": "class HelpWindow(Window):\n    def __init__(self, size):\n        Window.__init__(self, size, (150, 40))\n        # set window alpha\n        self.alphavalue = 250 * 0.95\n        # Create gui\n        self.create_gui()\n        # hide market at load\n        self.hide()\n    def create_gui(self):",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.helpwindow",
        "documentation": {}
    },
    {
        "label": "ImageLoader",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.imageloader",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.imageloader",
        "peekOfCode": "class ImageLoader:\n    def __init__(self, imagesdict):\n        self.config = imagesdict\n        self.loaded = {}\n        self.empty = pygame.Surface((64, 32))\n    def __getitem__(self, name):\n        return self.loadimage(name)\n    def loadimages(self):\n        \"\"\"Load all images\"\"\"\n        for item in self.config.keys():",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.imageloader",
        "documentation": {}
    },
    {
        "label": "InventoryWindow",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.inventorywindow",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.inventorywindow",
        "peekOfCode": "class InventoryWindow(Container):\n    def __init__(self, imgloader, player):\n        Container.__init__(self, (400, 500), (200, 50))\n        self.inventoryoffset = (0, 10)\n        self.inventorysize = (4, 5)\n        self.images = imgloader\n        self.player = player\n        self.notifyfont = pygame.font.Font(\"dejavusansmono.ttf\", 12)\n        # tooltip\n        self.tooltip = [None, None]",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.inventorywindow",
        "documentation": {}
    },
    {
        "label": "MarketWindow",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.marketwindow",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.marketwindow",
        "peekOfCode": "class MarketWindow(Container):\n    def __init__(self, size, imgloader, player, gamemanager):\n        self.gamemanager = gamemanager\n        self.player = player\n        self.imgloader = imgloader\n        Container.__init__(self, size, (200, 50))\n        # set window alpha\n        self.alphavalue = 250 * 0.95\n        # items offset for gui buttons\n        self.itemsoffset = [32, 20]",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.marketwindow",
        "documentation": {}
    },
    {
        "label": "WATERREFILLCOST",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.marketwindow",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.marketwindow",
        "peekOfCode": "WATERREFILLCOST = farmlib.rules[\"WATERREFILLCOST\"]\nOBJECTSNOTINMARKET = farmlib.rules[\"OBJECTSNOTINMARKET\"]\nclass MarketWindow(Container):\n    def __init__(self, size, imgloader, player, gamemanager):\n        self.gamemanager = gamemanager\n        self.player = player\n        self.imgloader = imgloader\n        Container.__init__(self, size, (200, 50))\n        # set window alpha\n        self.alphavalue = 250 * 0.95",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.marketwindow",
        "documentation": {}
    },
    {
        "label": "OBJECTSNOTINMARKET",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.marketwindow",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.marketwindow",
        "peekOfCode": "OBJECTSNOTINMARKET = farmlib.rules[\"OBJECTSNOTINMARKET\"]\nclass MarketWindow(Container):\n    def __init__(self, size, imgloader, player, gamemanager):\n        self.gamemanager = gamemanager\n        self.player = player\n        self.imgloader = imgloader\n        Container.__init__(self, size, (200, 50))\n        # set window alpha\n        self.alphavalue = 250 * 0.95\n        # items offset for gui buttons",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.marketwindow",
        "documentation": {}
    },
    {
        "label": "MenuWindow",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.menuwindow",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.menuwindow",
        "peekOfCode": "class MenuWindow(Container):\n    def __init__(self):\n        self.parent = None\n        Container.__init__(self, (800, 600), (0, 0))\n        self.running = True\n        self.menupos = 0\n        self.maxmenupos = 1\n        # background\n        imgpath = os.path.join(\"images\", \"gui\", \"mainmenubg.png\")\n        bgimage = pygame.image.load(imgpath).convert_alpha()",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.menuwindow",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.player",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.player",
        "peekOfCode": "class Player:\n    def __init__(self):\n        self.inventory = [3]\n        self.itemscounter = {'3': 2}\n        self.money = 0\n        self.watercanuses = 100\n        # Skill\n        self.exp = 0.0\n        self.nextlvlexp = 100.0\n        self.level = 1",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.player",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "peekOfCode": "class Event:\n    \"\"\"\n    Base event\n    Event name will be lowercase\n    \"\"\"\n    def __init__(self, name, **args):\n        self.name = name.lower()\n        self.args = args\n        self.priority = PRIORITY_NORMAL\n    def __str__(self):",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "documentation": {}
    },
    {
        "label": "Listener",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "peekOfCode": "class Listener:\n    \"\"\"\n    Base listener\n    \"\"\"\n    def __init__(self, plugin):\n        self.plugin = plugin\n        self.eventdef = {}  # dict for supported events for listener\n    def isEventSupported(self, eventname):\n        \"\"\"\n        Return True when eventname is supported by this listener",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "documentation": {}
    },
    {
        "label": "BasePlugin",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "peekOfCode": "class BasePlugin:\n    \"\"\"\n    Base Plugin\n    \"\"\"\n    name = \"nonameplugin\"\n    version = \"0.0\"\n    def __init__(self):\n        \"\"\"Init base plugin\"\"\"\n        self.system = None  # Plugin system object when installed\n    def registerGlobalHook(self, hookname, function):",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "documentation": {}
    },
    {
        "label": "PluginSystem",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "peekOfCode": "class PluginSystem:\n    \"\"\"\n    Plugin system. Only one instance for application.\n    \"\"\"\n    def __init__(self):\n        self.eventqueue = []  # Event queue\n        self._plugins = []  # Plugins list\n        self._listeners = []  # Listeners tuple\n        self.globalhooks = {}  # Dict for global hooks\n        self.debug = True",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "documentation": {}
    },
    {
        "label": "PRIORITY_LOW",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "peekOfCode": "PRIORITY_LOW = -10\nPRIORITY_NORMAL = 0\nPRIORITY_HIGH = 10\n#################\n# EVENT\n#################\nclass Event:\n    \"\"\"\n    Base event\n    Event name will be lowercase",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "documentation": {}
    },
    {
        "label": "PRIORITY_NORMAL",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "peekOfCode": "PRIORITY_NORMAL = 0\nPRIORITY_HIGH = 10\n#################\n# EVENT\n#################\nclass Event:\n    \"\"\"\n    Base event\n    Event name will be lowercase\n    \"\"\"",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "documentation": {}
    },
    {
        "label": "PRIORITY_HIGH",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "peekOfCode": "PRIORITY_HIGH = 10\n#################\n# EVENT\n#################\nclass Event:\n    \"\"\"\n    Base event\n    Event name will be lowercase\n    \"\"\"\n    def __init__(self, name, **args):",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "documentation": {}
    },
    {
        "label": "basePluginSystem",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "peekOfCode": "basePluginSystem = PluginSystem()",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.pluginsystem",
        "documentation": {}
    },
    {
        "label": "lerp",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "peekOfCode": "def lerp(t, a, b):\n    return a + t * (b - a)\ndef fade(t):\n    return t * t * t * (t * (t * 6 - 15) + 10)\ndef grad(hash, x, y, z):\n    h = hash & 15\n    if h < 8:\n        u = x\n    else:\n        u = y",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "documentation": {}
    },
    {
        "label": "fade",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "peekOfCode": "def fade(t):\n    return t * t * t * (t * (t * 6 - 15) + 10)\ndef grad(hash, x, y, z):\n    h = hash & 15\n    if h < 8:\n        u = x\n    else:\n        u = y\n    if h < 4:\n        v = y",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "documentation": {}
    },
    {
        "label": "grad",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "peekOfCode": "def grad(hash, x, y, z):\n    h = hash & 15\n    if h < 8:\n        u = x\n    else:\n        u = y\n    if h < 4:\n        v = y\n    elif h == 12 or h == 14:\n        v = x",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "documentation": {}
    },
    {
        "label": "pnoise",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "peekOfCode": "def pnoise(x, y, z):\n    global p\n    X = int(math.floor(x)) & 255\n    Y = int(math.floor(y)) & 255\n    Z = int(math.floor(z)) & 255\n    x -= math.floor(x)\n    y -= math.floor(y)\n    z -= math.floor(z)\n    u = fade(x)\n    v = fade(y)",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "peekOfCode": "p = (\n    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103,\n    30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197,\n    62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20,\n    125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231,\n    83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102,\n    143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200,\n    196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226,\n    250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16,\n    58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70,",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.pnoise",
        "documentation": {}
    },
    {
        "label": "draw_tools",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "peekOfCode": "def draw_tools(surface, currenttool, currentseed, imgloader,\n               drawnearcursor=True):\n    # Draw selection on selected tool\n    if currenttool == 'harvest':\n        pygame.draw.rect(surface, (255, 255, 255), (10, 10, 48, 48), 1)\n    if currenttool == 'plant':\n        pygame.draw.rect(surface, (255, 255, 255), (60, 10, 48, 48), 1)\n    if currenttool == 'watering':\n        pygame.draw.rect(surface, (255, 255, 255), (110, 10, 48, 48), 1)\n    if currenttool == 'shovel':",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "documentation": {}
    },
    {
        "label": "draw_seed",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "peekOfCode": "def draw_seed(surface, seedid, position, imgloader):\n    img = imgloader.loadimage('object' + str(seedid))\n    surface.blit(img, position)\ndef draw_selected_seed(surface, selectedseed, imgloader):\n    if selectedseed == None:\n        return\n    # draw selected seed\n    img = imgloader.loadimage('dryground')\n    surface.blit(img, (65, 90))\n    draw_seed(surface, selectedseed, (65, 90), imgloader)",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "documentation": {}
    },
    {
        "label": "draw_selected_seed",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "peekOfCode": "def draw_selected_seed(surface, selectedseed, imgloader):\n    if selectedseed == None:\n        return\n    # draw selected seed\n    img = imgloader.loadimage('dryground')\n    surface.blit(img, (65, 90))\n    draw_seed(surface, selectedseed, (65, 90), imgloader)\ndef render_seed_notify(surface, font, posx, posy, farmobject, farmtile,\n                       imgloader):\n    \"\"\"Render notification about farm object\"\"\"",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "documentation": {}
    },
    {
        "label": "render_seed_notify",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "peekOfCode": "def render_seed_notify(surface, font, posx, posy, farmobject, farmtile,\n                       imgloader):\n    \"\"\"Render notification about farm object\"\"\"\n    if farmobject is None:\n        return\n    sizex = 250\n    sizey = 150\n    posy += 5\n    img = pygame.Surface((sizex, sizey))\n    img.fill((48, 80, 80))",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "documentation": {}
    },
    {
        "label": "render_rain",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "peekOfCode": "def render_rain(surface):\n    for x in range(30):\n        xx = random.randint(0, surface.get_size()[0])\n        yy = random.randint(0, 200)\n        offset = random.randint(-15, -8)\n        pygame.draw.line(surface, (0, 0, 200), (xx, yy),\n                         (xx + offset, yy + 15))\ndef render_one_field(position, screen, imgloader, farmfield, farmoffset):\n    \"\"\"Render one field from farm\"\"\"\n    mainimg = screen",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "documentation": {}
    },
    {
        "label": "render_one_field",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "peekOfCode": "def render_one_field(position, screen, imgloader, farmfield, farmoffset):\n    \"\"\"Render one field from farm\"\"\"\n    mainimg = screen\n    x, y = position\n    farmtile = farmfield.get_farmtile(x, y)\n    posx = (x - y) * 32 + farmoffset[0] + 150\n    posy = (x + y) * 16 + farmoffset[1]\n    rect = (posx, posy, 64, 32)\n    # draw ground\n    if farmtile['water'] >= 30:",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "documentation": {}
    },
    {
        "label": "render_field",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "peekOfCode": "def render_field(screen, imgloader, farmfield, farmoffset):\n    img = pygame.surface.Surface((800, 600))\n    img.set_colorkey((0, 0, 0))\n    for y in range(12):\n        for x in range(12):\n            render_one_field((x, y), img,\n                             imgloader, farmfield, farmoffset)\n    return img",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.renderfunctions",
        "documentation": {}
    },
    {
        "label": "Timer",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.timer",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.timer",
        "peekOfCode": "class Timer:\n    def __init__(self):\n        self.lasttick = 0.0\n        self.tickcount = -1\n        self.lastticktime = 0.0\n    def tick(self, destfps=0):\n        \"\"\"Tick a timer. If the destfps was given then application will not run\n        faster then destfps frames per second\"\"\"\n        self.lastticktime = time.time() - self.lasttick\n        self.lasttick = time.time()",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.timer",
        "documentation": {}
    },
    {
        "label": "Tooltip",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.farmlib.tooltip",
        "description": "repos_that_could_be_useful.PythonFarmGame.farmlib.tooltip",
        "peekOfCode": "class Tooltip(Window):\n    def __init__(self, position, data):\n        \"\"\"\n            create tooltip window. data must be list of pairs [\"label\", \"value\"]\n        \"\"\"\n        Window.__init__(self, (0, 0), position)\n        self.data = data\n        self.alphavalue = 200\n        #\n        self.crete_widgets()",
        "detail": "repos_that_could_be_useful.PythonFarmGame.farmlib.tooltip",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.pygameui.button",
        "description": "repos_that_could_be_useful.PythonFarmGame.pygameui.button",
        "peekOfCode": "class Button(Widget):\n    def __init__(self, label, position, bgimage = None, labelsize = 12,\n                 color = (255, 255, 0)):\n        self.bgimage = bgimage\n        self.label = label\n        self.color = color\n        self.position = position\n        self.labelsize = labelsize\n        self.labelfont = pygame.font.Font(\"dejavusansmono.ttf\", self.labelsize)\n        self.buttonbgorg = pygame.image.load(buttonbgpath).convert_alpha()",
        "detail": "repos_that_could_be_useful.PythonFarmGame.pygameui.button",
        "documentation": {}
    },
    {
        "label": "buttonbgpath",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.pygameui.button",
        "description": "repos_that_could_be_useful.PythonFarmGame.pygameui.button",
        "peekOfCode": "buttonbgpath = os.path.join(\"images\", \"gui\", \"buttonbg.png\")\nclass Button(Widget):\n    def __init__(self, label, position, bgimage = None, labelsize = 12,\n                 color = (255, 255, 0)):\n        self.bgimage = bgimage\n        self.label = label\n        self.color = color\n        self.position = position\n        self.labelsize = labelsize\n        self.labelfont = pygame.font.Font(\"dejavusansmono.ttf\", self.labelsize)",
        "detail": "repos_that_could_be_useful.PythonFarmGame.pygameui.button",
        "documentation": {}
    },
    {
        "label": "Container",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.pygameui.container",
        "description": "repos_that_could_be_useful.PythonFarmGame.pygameui.container",
        "peekOfCode": "class Container(Widget):\n    '''\n    Container for gui\n    '''\n    def __init__(self, (width, height), position):\n        Widget.__init__(self, position, (width, height))\n        self.widgets = []\n        self.visible = True\n        #last active widget\n        self._lastactivewidget = None",
        "detail": "repos_that_could_be_useful.PythonFarmGame.pygameui.container",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.pygameui.image",
        "description": "repos_that_could_be_useful.PythonFarmGame.pygameui.image",
        "peekOfCode": "class Image(Widget):\n    def __init__(self, image, position):\n        self.image = image\n        self.position = position\n        #set width and height\n        if self.image:\n            self.width = self.image.get_size()[0]\n            self.height = self.image.get_size()[1]\n        else:\n            self._setsize((0, 0))",
        "detail": "repos_that_could_be_useful.PythonFarmGame.pygameui.image",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.pygameui.label",
        "description": "repos_that_could_be_useful.PythonFarmGame.pygameui.label",
        "peekOfCode": "class Label(Widget):\n    def __init__(self, text, position, size = 12,\n            color = (255, 255, 255), align = \"left\"):\n        self.text = text\n        self.labelfont = pygame.font.Font(\"dejavusansmono.ttf\", size)\n        self.image = None\n        self.color = color\n        self.position = position\n        self.orginal_position = position\n        self.align = align",
        "detail": "repos_that_could_be_useful.PythonFarmGame.pygameui.label",
        "documentation": {}
    },
    {
        "label": "Widget",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.pygameui.widget",
        "description": "repos_that_could_be_useful.PythonFarmGame.pygameui.widget",
        "peekOfCode": "class Widget:\n    '''\n    Widget for gui\n    '''\n    def __init__(self, position, (width, height)):\n        #parent widget should inherit from Container\n        self.parent = None\n        self.position = position\n        self.width = width\n        self.height = height",
        "detail": "repos_that_could_be_useful.PythonFarmGame.pygameui.widget",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.pygameui.window",
        "description": "repos_that_could_be_useful.PythonFarmGame.pygameui.window",
        "peekOfCode": "class Window(Container):\n    '''\n    Window for gui\n    '''\n    def __init__(self, (width, height), position):\n        Container.__init__(self, (width, height), position)\n        self.alphavalue = 196\n        #border\n        self.showborder = True\n        self.bordercolor = (128, 128, 0)",
        "detail": "repos_that_could_be_useful.PythonFarmGame.pygameui.window",
        "documentation": {}
    },
    {
        "label": "FarmGamePygame",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.PythonFarmGame.pyFarmGame",
        "description": "repos_that_could_be_useful.PythonFarmGame.pyFarmGame",
        "peekOfCode": "class FarmGamePygame:\n    def __init__(self):\n        \"\"\"Init game\"\"\"\n        self.screen = pygame.display.set_mode((800, 600), pygame.DOUBLEBUF)\n        pygame.display.set_caption(\"PyFarmGame \" + \"v. \" + __VERSION__)\n        #timer\n        self.timer = pygame.time.Clock()\n        self.activescr = None\n        self.ingame = False\n        self.inmenu = True",
        "detail": "repos_that_could_be_useful.PythonFarmGame.pyFarmGame",
        "documentation": {}
    },
    {
        "label": "ContactDetector",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "class ContactDetector(contactListener):\n    def __init__(self, env):\n        contactListener.__init__(self)\n        self.env = env\n    def BeginContact(self, contact):\n        if (\n            self.env.hull == contact.fixtureA.body\n            or self.env.hull == contact.fixtureB.body\n        ):\n            self.env.game_over = True",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "BipedalWalker",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "class BipedalWalker(gym.Env, EzPickle):\n    \"\"\"\n    ### Description\n    This is a simple 4-joint walker robot environment.\n    There are two versions:\n    - Normal, with slightly uneven terrain.\n    - Hardcore, with ladders, stumps, pitfalls.\n    To solve the normal version, you need to get 300 points in 1600 time steps.\n    To solve the hardcore version, you need 300 points in 2000 time steps.\n    A heuristic is provided for testing. It's also useful to get demonstrations",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "BipedalWalkerHardcore",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "class BipedalWalkerHardcore:\n    def __init__(self):\n        raise error.Error(\n            \"Error initializing BipedalWalkerHardcore Environment.\\n\"\n            \"Currently, we do not support initializing this mode of environment by calling the class directly.\\n\"\n            \"To use this environment, instead create it by specifying the hardcore keyword in gym.make, i.e.\\n\"\n            'gym.make(\"BipedalWalker-v3\", hardcore=True)'\n        )\nif __name__ == \"__main__\":\n    # Heurisic: suboptimal, have no notion of balance.",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "__credits__ = [\"Andrea PIERRÉ\"]\nimport math\nfrom typing import Optional\nimport numpy as np\nimport gym\nfrom gym import error, spaces\nfrom gym.error import DependencyNotInstalled\nfrom gym.utils import EzPickle\ntry:\n    import Box2D",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "FPS",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "FPS = 50\nSCALE = 30.0  # affects how fast-paced the game is, forces should be adjusted as well\nMOTORS_TORQUE = 80\nSPEED_HIP = 4\nSPEED_KNEE = 6\nLIDAR_RANGE = 160 / SCALE\nINITIAL_RANDOM = 5\nHULL_POLY = [(-30, +9), (+6, +9), (+34, +1), (+34, -8), (-30, -8)]\nLEG_DOWN = -8 / SCALE\nLEG_W, LEG_H = 8 / SCALE, 34 / SCALE",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "SCALE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "SCALE = 30.0  # affects how fast-paced the game is, forces should be adjusted as well\nMOTORS_TORQUE = 80\nSPEED_HIP = 4\nSPEED_KNEE = 6\nLIDAR_RANGE = 160 / SCALE\nINITIAL_RANDOM = 5\nHULL_POLY = [(-30, +9), (+6, +9), (+34, +1), (+34, -8), (-30, -8)]\nLEG_DOWN = -8 / SCALE\nLEG_W, LEG_H = 8 / SCALE, 34 / SCALE\nVIEWPORT_W = 600",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "MOTORS_TORQUE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "MOTORS_TORQUE = 80\nSPEED_HIP = 4\nSPEED_KNEE = 6\nLIDAR_RANGE = 160 / SCALE\nINITIAL_RANDOM = 5\nHULL_POLY = [(-30, +9), (+6, +9), (+34, +1), (+34, -8), (-30, -8)]\nLEG_DOWN = -8 / SCALE\nLEG_W, LEG_H = 8 / SCALE, 34 / SCALE\nVIEWPORT_W = 600\nVIEWPORT_H = 400",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "SPEED_HIP",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "SPEED_HIP = 4\nSPEED_KNEE = 6\nLIDAR_RANGE = 160 / SCALE\nINITIAL_RANDOM = 5\nHULL_POLY = [(-30, +9), (+6, +9), (+34, +1), (+34, -8), (-30, -8)]\nLEG_DOWN = -8 / SCALE\nLEG_W, LEG_H = 8 / SCALE, 34 / SCALE\nVIEWPORT_W = 600\nVIEWPORT_H = 400\nTERRAIN_STEP = 14 / SCALE",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "SPEED_KNEE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "SPEED_KNEE = 6\nLIDAR_RANGE = 160 / SCALE\nINITIAL_RANDOM = 5\nHULL_POLY = [(-30, +9), (+6, +9), (+34, +1), (+34, -8), (-30, -8)]\nLEG_DOWN = -8 / SCALE\nLEG_W, LEG_H = 8 / SCALE, 34 / SCALE\nVIEWPORT_W = 600\nVIEWPORT_H = 400\nTERRAIN_STEP = 14 / SCALE\nTERRAIN_LENGTH = 200  # in steps",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "LIDAR_RANGE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "LIDAR_RANGE = 160 / SCALE\nINITIAL_RANDOM = 5\nHULL_POLY = [(-30, +9), (+6, +9), (+34, +1), (+34, -8), (-30, -8)]\nLEG_DOWN = -8 / SCALE\nLEG_W, LEG_H = 8 / SCALE, 34 / SCALE\nVIEWPORT_W = 600\nVIEWPORT_H = 400\nTERRAIN_STEP = 14 / SCALE\nTERRAIN_LENGTH = 200  # in steps\nTERRAIN_HEIGHT = VIEWPORT_H / SCALE / 4",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "INITIAL_RANDOM",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "INITIAL_RANDOM = 5\nHULL_POLY = [(-30, +9), (+6, +9), (+34, +1), (+34, -8), (-30, -8)]\nLEG_DOWN = -8 / SCALE\nLEG_W, LEG_H = 8 / SCALE, 34 / SCALE\nVIEWPORT_W = 600\nVIEWPORT_H = 400\nTERRAIN_STEP = 14 / SCALE\nTERRAIN_LENGTH = 200  # in steps\nTERRAIN_HEIGHT = VIEWPORT_H / SCALE / 4\nTERRAIN_GRASS = 10  # low long are grass spots, in steps",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "HULL_POLY",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "HULL_POLY = [(-30, +9), (+6, +9), (+34, +1), (+34, -8), (-30, -8)]\nLEG_DOWN = -8 / SCALE\nLEG_W, LEG_H = 8 / SCALE, 34 / SCALE\nVIEWPORT_W = 600\nVIEWPORT_H = 400\nTERRAIN_STEP = 14 / SCALE\nTERRAIN_LENGTH = 200  # in steps\nTERRAIN_HEIGHT = VIEWPORT_H / SCALE / 4\nTERRAIN_GRASS = 10  # low long are grass spots, in steps\nTERRAIN_STARTPAD = 20  # in steps",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "LEG_DOWN",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "LEG_DOWN = -8 / SCALE\nLEG_W, LEG_H = 8 / SCALE, 34 / SCALE\nVIEWPORT_W = 600\nVIEWPORT_H = 400\nTERRAIN_STEP = 14 / SCALE\nTERRAIN_LENGTH = 200  # in steps\nTERRAIN_HEIGHT = VIEWPORT_H / SCALE / 4\nTERRAIN_GRASS = 10  # low long are grass spots, in steps\nTERRAIN_STARTPAD = 20  # in steps\nFRICTION = 2.5",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "VIEWPORT_W",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "VIEWPORT_W = 600\nVIEWPORT_H = 400\nTERRAIN_STEP = 14 / SCALE\nTERRAIN_LENGTH = 200  # in steps\nTERRAIN_HEIGHT = VIEWPORT_H / SCALE / 4\nTERRAIN_GRASS = 10  # low long are grass spots, in steps\nTERRAIN_STARTPAD = 20  # in steps\nFRICTION = 2.5\nHULL_FD = fixtureDef(\n    shape=polygonShape(vertices=[(x / SCALE, y / SCALE) for x, y in HULL_POLY]),",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "VIEWPORT_H",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "VIEWPORT_H = 400\nTERRAIN_STEP = 14 / SCALE\nTERRAIN_LENGTH = 200  # in steps\nTERRAIN_HEIGHT = VIEWPORT_H / SCALE / 4\nTERRAIN_GRASS = 10  # low long are grass spots, in steps\nTERRAIN_STARTPAD = 20  # in steps\nFRICTION = 2.5\nHULL_FD = fixtureDef(\n    shape=polygonShape(vertices=[(x / SCALE, y / SCALE) for x, y in HULL_POLY]),\n    density=5.0,",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "TERRAIN_STEP",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "TERRAIN_STEP = 14 / SCALE\nTERRAIN_LENGTH = 200  # in steps\nTERRAIN_HEIGHT = VIEWPORT_H / SCALE / 4\nTERRAIN_GRASS = 10  # low long are grass spots, in steps\nTERRAIN_STARTPAD = 20  # in steps\nFRICTION = 2.5\nHULL_FD = fixtureDef(\n    shape=polygonShape(vertices=[(x / SCALE, y / SCALE) for x, y in HULL_POLY]),\n    density=5.0,\n    friction=0.1,",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "TERRAIN_LENGTH",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "TERRAIN_LENGTH = 200  # in steps\nTERRAIN_HEIGHT = VIEWPORT_H / SCALE / 4\nTERRAIN_GRASS = 10  # low long are grass spots, in steps\nTERRAIN_STARTPAD = 20  # in steps\nFRICTION = 2.5\nHULL_FD = fixtureDef(\n    shape=polygonShape(vertices=[(x / SCALE, y / SCALE) for x, y in HULL_POLY]),\n    density=5.0,\n    friction=0.1,\n    categoryBits=0x0020,",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "TERRAIN_HEIGHT",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "TERRAIN_HEIGHT = VIEWPORT_H / SCALE / 4\nTERRAIN_GRASS = 10  # low long are grass spots, in steps\nTERRAIN_STARTPAD = 20  # in steps\nFRICTION = 2.5\nHULL_FD = fixtureDef(\n    shape=polygonShape(vertices=[(x / SCALE, y / SCALE) for x, y in HULL_POLY]),\n    density=5.0,\n    friction=0.1,\n    categoryBits=0x0020,\n    maskBits=0x001,  # collide only with ground",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "TERRAIN_GRASS",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "TERRAIN_GRASS = 10  # low long are grass spots, in steps\nTERRAIN_STARTPAD = 20  # in steps\nFRICTION = 2.5\nHULL_FD = fixtureDef(\n    shape=polygonShape(vertices=[(x / SCALE, y / SCALE) for x, y in HULL_POLY]),\n    density=5.0,\n    friction=0.1,\n    categoryBits=0x0020,\n    maskBits=0x001,  # collide only with ground\n    restitution=0.0,",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "TERRAIN_STARTPAD",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "TERRAIN_STARTPAD = 20  # in steps\nFRICTION = 2.5\nHULL_FD = fixtureDef(\n    shape=polygonShape(vertices=[(x / SCALE, y / SCALE) for x, y in HULL_POLY]),\n    density=5.0,\n    friction=0.1,\n    categoryBits=0x0020,\n    maskBits=0x001,  # collide only with ground\n    restitution=0.0,\n)  # 0.99 bouncy",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "FRICTION",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "FRICTION = 2.5\nHULL_FD = fixtureDef(\n    shape=polygonShape(vertices=[(x / SCALE, y / SCALE) for x, y in HULL_POLY]),\n    density=5.0,\n    friction=0.1,\n    categoryBits=0x0020,\n    maskBits=0x001,  # collide only with ground\n    restitution=0.0,\n)  # 0.99 bouncy\nLEG_FD = fixtureDef(",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "HULL_FD",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "HULL_FD = fixtureDef(\n    shape=polygonShape(vertices=[(x / SCALE, y / SCALE) for x, y in HULL_POLY]),\n    density=5.0,\n    friction=0.1,\n    categoryBits=0x0020,\n    maskBits=0x001,  # collide only with ground\n    restitution=0.0,\n)  # 0.99 bouncy\nLEG_FD = fixtureDef(\n    shape=polygonShape(box=(LEG_W / 2, LEG_H / 2)),",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "LEG_FD",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "LEG_FD = fixtureDef(\n    shape=polygonShape(box=(LEG_W / 2, LEG_H / 2)),\n    density=1.0,\n    restitution=0.0,\n    categoryBits=0x0020,\n    maskBits=0x001,\n)\nLOWER_FD = fixtureDef(\n    shape=polygonShape(box=(0.8 * LEG_W / 2, LEG_H / 2)),\n    density=1.0,",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "LOWER_FD",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "peekOfCode": "LOWER_FD = fixtureDef(\n    shape=polygonShape(box=(0.8 * LEG_W / 2, LEG_H / 2)),\n    density=1.0,\n    restitution=0.0,\n    categoryBits=0x0020,\n    maskBits=0x001,\n)\nclass ContactDetector(contactListener):\n    def __init__(self, env):\n        contactListener.__init__(self)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.bipedal_walker",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "class Car:\n    def __init__(self, world, init_angle, init_x, init_y):\n        self.world = world\n        self.hull = self.world.CreateDynamicBody(\n            position=(init_x, init_y),\n            angle=init_angle,\n            fixtures=[\n                fixtureDef(\n                    shape=polygonShape(\n                        vertices=[(x * SIZE, y * SIZE) for x, y in HULL_POLY1]",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "SIZE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "SIZE = 0.02\nENGINE_POWER = 100000000 * SIZE * SIZE\nWHEEL_MOMENT_OF_INERTIA = 4000 * SIZE * SIZE\nFRICTION_LIMIT = (\n    1000000 * SIZE * SIZE\n)  # friction ~= mass ~= size^2 (calculated implicitly using density)\nWHEEL_R = 27\nWHEEL_W = 14\nWHEELPOS = [(-55, +80), (+55, +80), (-55, -82), (+55, -82)]\nHULL_POLY1 = [(-60, +130), (+60, +130), (+60, +110), (-60, +110)]",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "ENGINE_POWER",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "ENGINE_POWER = 100000000 * SIZE * SIZE\nWHEEL_MOMENT_OF_INERTIA = 4000 * SIZE * SIZE\nFRICTION_LIMIT = (\n    1000000 * SIZE * SIZE\n)  # friction ~= mass ~= size^2 (calculated implicitly using density)\nWHEEL_R = 27\nWHEEL_W = 14\nWHEELPOS = [(-55, +80), (+55, +80), (-55, -82), (+55, -82)]\nHULL_POLY1 = [(-60, +130), (+60, +130), (+60, +110), (-60, +110)]\nHULL_POLY2 = [(-15, +120), (+15, +120), (+20, +20), (-20, 20)]",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "WHEEL_MOMENT_OF_INERTIA",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "WHEEL_MOMENT_OF_INERTIA = 4000 * SIZE * SIZE\nFRICTION_LIMIT = (\n    1000000 * SIZE * SIZE\n)  # friction ~= mass ~= size^2 (calculated implicitly using density)\nWHEEL_R = 27\nWHEEL_W = 14\nWHEELPOS = [(-55, +80), (+55, +80), (-55, -82), (+55, -82)]\nHULL_POLY1 = [(-60, +130), (+60, +130), (+60, +110), (-60, +110)]\nHULL_POLY2 = [(-15, +120), (+15, +120), (+20, +20), (-20, 20)]\nHULL_POLY3 = [",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "FRICTION_LIMIT",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "FRICTION_LIMIT = (\n    1000000 * SIZE * SIZE\n)  # friction ~= mass ~= size^2 (calculated implicitly using density)\nWHEEL_R = 27\nWHEEL_W = 14\nWHEELPOS = [(-55, +80), (+55, +80), (-55, -82), (+55, -82)]\nHULL_POLY1 = [(-60, +130), (+60, +130), (+60, +110), (-60, +110)]\nHULL_POLY2 = [(-15, +120), (+15, +120), (+20, +20), (-20, 20)]\nHULL_POLY3 = [\n    (+25, +20),",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "WHEEL_R",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "WHEEL_R = 27\nWHEEL_W = 14\nWHEELPOS = [(-55, +80), (+55, +80), (-55, -82), (+55, -82)]\nHULL_POLY1 = [(-60, +130), (+60, +130), (+60, +110), (-60, +110)]\nHULL_POLY2 = [(-15, +120), (+15, +120), (+20, +20), (-20, 20)]\nHULL_POLY3 = [\n    (+25, +20),\n    (+50, -10),\n    (+50, -40),\n    (+20, -90),",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "WHEEL_W",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "WHEEL_W = 14\nWHEELPOS = [(-55, +80), (+55, +80), (-55, -82), (+55, -82)]\nHULL_POLY1 = [(-60, +130), (+60, +130), (+60, +110), (-60, +110)]\nHULL_POLY2 = [(-15, +120), (+15, +120), (+20, +20), (-20, 20)]\nHULL_POLY3 = [\n    (+25, +20),\n    (+50, -10),\n    (+50, -40),\n    (+20, -90),\n    (-20, -90),",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "WHEELPOS",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "WHEELPOS = [(-55, +80), (+55, +80), (-55, -82), (+55, -82)]\nHULL_POLY1 = [(-60, +130), (+60, +130), (+60, +110), (-60, +110)]\nHULL_POLY2 = [(-15, +120), (+15, +120), (+20, +20), (-20, 20)]\nHULL_POLY3 = [\n    (+25, +20),\n    (+50, -10),\n    (+50, -40),\n    (+20, -90),\n    (-20, -90),\n    (-50, -40),",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "HULL_POLY1",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "HULL_POLY1 = [(-60, +130), (+60, +130), (+60, +110), (-60, +110)]\nHULL_POLY2 = [(-15, +120), (+15, +120), (+20, +20), (-20, 20)]\nHULL_POLY3 = [\n    (+25, +20),\n    (+50, -10),\n    (+50, -40),\n    (+20, -90),\n    (-20, -90),\n    (-50, -40),\n    (-50, -10),",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "HULL_POLY2",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "HULL_POLY2 = [(-15, +120), (+15, +120), (+20, +20), (-20, 20)]\nHULL_POLY3 = [\n    (+25, +20),\n    (+50, -10),\n    (+50, -40),\n    (+20, -90),\n    (-20, -90),\n    (-50, -40),\n    (-50, -10),\n    (-25, +20),",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "HULL_POLY3",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "HULL_POLY3 = [\n    (+25, +20),\n    (+50, -10),\n    (+50, -40),\n    (+20, -90),\n    (-20, -90),\n    (-50, -40),\n    (-50, -10),\n    (-25, +20),\n]",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "HULL_POLY4",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "HULL_POLY4 = [(-50, -120), (+50, -120), (+50, -90), (-50, -90)]\nWHEEL_COLOR = (0, 0, 0)\nWHEEL_WHITE = (77, 77, 77)\nMUD_COLOR = (102, 102, 0)\nSCALE = 6.0  # Track scale\nPLAYFIELD = 2000 / SCALE  # Game over boundary\nclass Car:\n    def __init__(self, world, init_angle, init_x, init_y):\n        self.world = world\n        self.hull = self.world.CreateDynamicBody(",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "WHEEL_COLOR",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "WHEEL_COLOR = (0, 0, 0)\nWHEEL_WHITE = (77, 77, 77)\nMUD_COLOR = (102, 102, 0)\nSCALE = 6.0  # Track scale\nPLAYFIELD = 2000 / SCALE  # Game over boundary\nclass Car:\n    def __init__(self, world, init_angle, init_x, init_y):\n        self.world = world\n        self.hull = self.world.CreateDynamicBody(\n            position=(init_x, init_y),",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "WHEEL_WHITE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "WHEEL_WHITE = (77, 77, 77)\nMUD_COLOR = (102, 102, 0)\nSCALE = 6.0  # Track scale\nPLAYFIELD = 2000 / SCALE  # Game over boundary\nclass Car:\n    def __init__(self, world, init_angle, init_x, init_y):\n        self.world = world\n        self.hull = self.world.CreateDynamicBody(\n            position=(init_x, init_y),\n            angle=init_angle,",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "MUD_COLOR",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "MUD_COLOR = (102, 102, 0)\nSCALE = 6.0  # Track scale\nPLAYFIELD = 2000 / SCALE  # Game over boundary\nclass Car:\n    def __init__(self, world, init_angle, init_x, init_y):\n        self.world = world\n        self.hull = self.world.CreateDynamicBody(\n            position=(init_x, init_y),\n            angle=init_angle,\n            fixtures=[",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "SCALE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "SCALE = 6.0  # Track scale\nPLAYFIELD = 2000 / SCALE  # Game over boundary\nclass Car:\n    def __init__(self, world, init_angle, init_x, init_y):\n        self.world = world\n        self.hull = self.world.CreateDynamicBody(\n            position=(init_x, init_y),\n            angle=init_angle,\n            fixtures=[\n                fixtureDef(",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "PLAYFIELD",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "peekOfCode": "PLAYFIELD = 2000 / SCALE  # Game over boundary\nclass Car:\n    def __init__(self, world, init_angle, init_x, init_y):\n        self.world = world\n        self.hull = self.world.CreateDynamicBody(\n            position=(init_x, init_y),\n            angle=init_angle,\n            fixtures=[\n                fixtureDef(\n                    shape=polygonShape(",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_dynamics",
        "documentation": {}
    },
    {
        "label": "FrictionDetector",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "class FrictionDetector(contactListener):\n    def __init__(self, env, lap_complete_percent):\n        contactListener.__init__(self)\n        self.env = env\n        self.lap_complete_percent = lap_complete_percent\n    def BeginContact(self, contact):\n        self._contact(contact, True)\n    def EndContact(self, contact):\n        self._contact(contact, False)\n    def _contact(self, contact, begin):",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "CarRacing",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "class CarRacing(gym.Env, EzPickle):\n    \"\"\"\n    ### Description\n    The easiest control task to learn from pixels - a top-down\n    racing environment. The generated track is random every episode.\n    Some indicators are shown at the bottom of the window along with the\n    state RGB buffer. From left to right: true speed, four ABS sensors,\n    steering wheel position, and gyroscope.\n    To play yourself (it's rather fast for humans), type:\n    ```",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "__credits__ = [\"Andrea PIERRÉ\"]\nimport math\nfrom typing import Optional, Union\nimport numpy as np\nimport gym\nfrom gym import spaces\nfrom gym.envs.box2d.car_dynamics import Car\nfrom gym.error import DependencyNotInstalled\nfrom gym.utils import EzPickle\ntry:",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "STATE_W",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "STATE_W = 96  # less than Atari 160x192\nSTATE_H = 96\nVIDEO_W = 600\nVIDEO_H = 400\nWINDOW_W = 1000\nWINDOW_H = 800\nSCALE = 6.0  # Track scale\nTRACK_RAD = 900 / SCALE  # Track is heavily morphed circle with this radius\nPLAYFIELD = 2000 / SCALE  # Game over boundary\nFPS = 50  # Frames per second",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "STATE_H",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "STATE_H = 96\nVIDEO_W = 600\nVIDEO_H = 400\nWINDOW_W = 1000\nWINDOW_H = 800\nSCALE = 6.0  # Track scale\nTRACK_RAD = 900 / SCALE  # Track is heavily morphed circle with this radius\nPLAYFIELD = 2000 / SCALE  # Game over boundary\nFPS = 50  # Frames per second\nZOOM = 2.7  # Camera zoom",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "VIDEO_W",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "VIDEO_W = 600\nVIDEO_H = 400\nWINDOW_W = 1000\nWINDOW_H = 800\nSCALE = 6.0  # Track scale\nTRACK_RAD = 900 / SCALE  # Track is heavily morphed circle with this radius\nPLAYFIELD = 2000 / SCALE  # Game over boundary\nFPS = 50  # Frames per second\nZOOM = 2.7  # Camera zoom\nZOOM_FOLLOW = True  # Set to False for fixed view (don't use zoom)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "VIDEO_H",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "VIDEO_H = 400\nWINDOW_W = 1000\nWINDOW_H = 800\nSCALE = 6.0  # Track scale\nTRACK_RAD = 900 / SCALE  # Track is heavily morphed circle with this radius\nPLAYFIELD = 2000 / SCALE  # Game over boundary\nFPS = 50  # Frames per second\nZOOM = 2.7  # Camera zoom\nZOOM_FOLLOW = True  # Set to False for fixed view (don't use zoom)\nTRACK_DETAIL_STEP = 21 / SCALE",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "WINDOW_W",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "WINDOW_W = 1000\nWINDOW_H = 800\nSCALE = 6.0  # Track scale\nTRACK_RAD = 900 / SCALE  # Track is heavily morphed circle with this radius\nPLAYFIELD = 2000 / SCALE  # Game over boundary\nFPS = 50  # Frames per second\nZOOM = 2.7  # Camera zoom\nZOOM_FOLLOW = True  # Set to False for fixed view (don't use zoom)\nTRACK_DETAIL_STEP = 21 / SCALE\nTRACK_TURN_RATE = 0.31",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "WINDOW_H",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "WINDOW_H = 800\nSCALE = 6.0  # Track scale\nTRACK_RAD = 900 / SCALE  # Track is heavily morphed circle with this radius\nPLAYFIELD = 2000 / SCALE  # Game over boundary\nFPS = 50  # Frames per second\nZOOM = 2.7  # Camera zoom\nZOOM_FOLLOW = True  # Set to False for fixed view (don't use zoom)\nTRACK_DETAIL_STEP = 21 / SCALE\nTRACK_TURN_RATE = 0.31\nTRACK_WIDTH = 40 / SCALE",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "SCALE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "SCALE = 6.0  # Track scale\nTRACK_RAD = 900 / SCALE  # Track is heavily morphed circle with this radius\nPLAYFIELD = 2000 / SCALE  # Game over boundary\nFPS = 50  # Frames per second\nZOOM = 2.7  # Camera zoom\nZOOM_FOLLOW = True  # Set to False for fixed view (don't use zoom)\nTRACK_DETAIL_STEP = 21 / SCALE\nTRACK_TURN_RATE = 0.31\nTRACK_WIDTH = 40 / SCALE\nBORDER = 8 / SCALE",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "TRACK_RAD",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "TRACK_RAD = 900 / SCALE  # Track is heavily morphed circle with this radius\nPLAYFIELD = 2000 / SCALE  # Game over boundary\nFPS = 50  # Frames per second\nZOOM = 2.7  # Camera zoom\nZOOM_FOLLOW = True  # Set to False for fixed view (don't use zoom)\nTRACK_DETAIL_STEP = 21 / SCALE\nTRACK_TURN_RATE = 0.31\nTRACK_WIDTH = 40 / SCALE\nBORDER = 8 / SCALE\nBORDER_MIN_COUNT = 4",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "PLAYFIELD",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "PLAYFIELD = 2000 / SCALE  # Game over boundary\nFPS = 50  # Frames per second\nZOOM = 2.7  # Camera zoom\nZOOM_FOLLOW = True  # Set to False for fixed view (don't use zoom)\nTRACK_DETAIL_STEP = 21 / SCALE\nTRACK_TURN_RATE = 0.31\nTRACK_WIDTH = 40 / SCALE\nBORDER = 8 / SCALE\nBORDER_MIN_COUNT = 4\nclass FrictionDetector(contactListener):",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "FPS",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "FPS = 50  # Frames per second\nZOOM = 2.7  # Camera zoom\nZOOM_FOLLOW = True  # Set to False for fixed view (don't use zoom)\nTRACK_DETAIL_STEP = 21 / SCALE\nTRACK_TURN_RATE = 0.31\nTRACK_WIDTH = 40 / SCALE\nBORDER = 8 / SCALE\nBORDER_MIN_COUNT = 4\nclass FrictionDetector(contactListener):\n    def __init__(self, env, lap_complete_percent):",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "ZOOM",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "ZOOM = 2.7  # Camera zoom\nZOOM_FOLLOW = True  # Set to False for fixed view (don't use zoom)\nTRACK_DETAIL_STEP = 21 / SCALE\nTRACK_TURN_RATE = 0.31\nTRACK_WIDTH = 40 / SCALE\nBORDER = 8 / SCALE\nBORDER_MIN_COUNT = 4\nclass FrictionDetector(contactListener):\n    def __init__(self, env, lap_complete_percent):\n        contactListener.__init__(self)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "ZOOM_FOLLOW",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "ZOOM_FOLLOW = True  # Set to False for fixed view (don't use zoom)\nTRACK_DETAIL_STEP = 21 / SCALE\nTRACK_TURN_RATE = 0.31\nTRACK_WIDTH = 40 / SCALE\nBORDER = 8 / SCALE\nBORDER_MIN_COUNT = 4\nclass FrictionDetector(contactListener):\n    def __init__(self, env, lap_complete_percent):\n        contactListener.__init__(self)\n        self.env = env",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "TRACK_DETAIL_STEP",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "TRACK_DETAIL_STEP = 21 / SCALE\nTRACK_TURN_RATE = 0.31\nTRACK_WIDTH = 40 / SCALE\nBORDER = 8 / SCALE\nBORDER_MIN_COUNT = 4\nclass FrictionDetector(contactListener):\n    def __init__(self, env, lap_complete_percent):\n        contactListener.__init__(self)\n        self.env = env\n        self.lap_complete_percent = lap_complete_percent",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "TRACK_TURN_RATE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "TRACK_TURN_RATE = 0.31\nTRACK_WIDTH = 40 / SCALE\nBORDER = 8 / SCALE\nBORDER_MIN_COUNT = 4\nclass FrictionDetector(contactListener):\n    def __init__(self, env, lap_complete_percent):\n        contactListener.__init__(self)\n        self.env = env\n        self.lap_complete_percent = lap_complete_percent\n    def BeginContact(self, contact):",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "TRACK_WIDTH",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "TRACK_WIDTH = 40 / SCALE\nBORDER = 8 / SCALE\nBORDER_MIN_COUNT = 4\nclass FrictionDetector(contactListener):\n    def __init__(self, env, lap_complete_percent):\n        contactListener.__init__(self)\n        self.env = env\n        self.lap_complete_percent = lap_complete_percent\n    def BeginContact(self, contact):\n        self._contact(contact, True)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "BORDER",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "BORDER = 8 / SCALE\nBORDER_MIN_COUNT = 4\nclass FrictionDetector(contactListener):\n    def __init__(self, env, lap_complete_percent):\n        contactListener.__init__(self)\n        self.env = env\n        self.lap_complete_percent = lap_complete_percent\n    def BeginContact(self, contact):\n        self._contact(contact, True)\n    def EndContact(self, contact):",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "BORDER_MIN_COUNT",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "peekOfCode": "BORDER_MIN_COUNT = 4\nclass FrictionDetector(contactListener):\n    def __init__(self, env, lap_complete_percent):\n        contactListener.__init__(self)\n        self.env = env\n        self.lap_complete_percent = lap_complete_percent\n    def BeginContact(self, contact):\n        self._contact(contact, True)\n    def EndContact(self, contact):\n        self._contact(contact, False)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.car_racing",
        "documentation": {}
    },
    {
        "label": "ContactDetector",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "class ContactDetector(contactListener):\n    def __init__(self, env):\n        contactListener.__init__(self)\n        self.env = env\n    def BeginContact(self, contact):\n        if (\n            self.env.lander == contact.fixtureA.body\n            or self.env.lander == contact.fixtureB.body\n        ):\n            self.env.game_over = True",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "LunarLander",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "class LunarLander(gym.Env, EzPickle):\n    \"\"\"\n    ### Description\n    This environment is a classic rocket trajectory optimization problem.\n    According to Pontryagin's maximum principle, it is optimal to fire the\n    engine at full throttle or turn it off. This is the reason why this\n    environment has discrete actions: engine on or off.\n    There are two environment versions: discrete or continuous.\n    The landing pad is always at coordinates (0,0). The coordinates are the\n    first two numbers in the state vector.",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "LunarLanderContinuous",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "class LunarLanderContinuous:\n    def __init__(self):\n        raise error.Error(\n            \"Error initializing LunarLanderContinuous Environment.\\n\"\n            \"Currently, we do not support initializing this mode of environment by calling the class directly.\\n\"\n            \"To use this environment, instead create it by specifying the continuous keyword in gym.make, i.e.\\n\"\n            'gym.make(\"LunarLander-v2\", continuous=True)'\n        )\nif __name__ == \"__main__\":\n    demo_heuristic_lander(LunarLander(), render=True)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "heuristic",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "def heuristic(env, s):\n    \"\"\"\n    The heuristic for\n    1. Testing\n    2. Demonstration rollout.\n    Args:\n        env: The environment\n        s (list): The state. Attributes:\n                  s[0] is the horizontal coordinate\n                  s[1] is the vertical coordinate",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "demo_heuristic_lander",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "def demo_heuristic_lander(env, seed=None, render=False):\n    total_reward = 0\n    steps = 0\n    s = env.reset(seed=seed)\n    while True:\n        a = heuristic(env, s)\n        s, r, done, info = env.step(a)\n        total_reward += r\n        if render:\n            still_open = env.render()",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "__credits__ = [\"Andrea PIERRÉ\"]\nimport math\nfrom typing import Optional\nimport numpy as np\nimport gym\nfrom gym import error, spaces\nfrom gym.error import DependencyNotInstalled\nfrom gym.utils import EzPickle\ntry:\n    import Box2D",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "FPS",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "FPS = 50\nSCALE = 30.0  # affects how fast-paced the game is, forces should be adjusted as well\nMAIN_ENGINE_POWER = 13.0\nSIDE_ENGINE_POWER = 0.6\nINITIAL_RANDOM = 1000.0  # Set 1500 to make game harder\nLANDER_POLY = [(-14, +17), (-17, 0), (-17, -10), (+17, -10), (+17, 0), (+14, +17)]\nLEG_AWAY = 20\nLEG_DOWN = 18\nLEG_W, LEG_H = 2, 8\nLEG_SPRING_TORQUE = 40",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "SCALE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "SCALE = 30.0  # affects how fast-paced the game is, forces should be adjusted as well\nMAIN_ENGINE_POWER = 13.0\nSIDE_ENGINE_POWER = 0.6\nINITIAL_RANDOM = 1000.0  # Set 1500 to make game harder\nLANDER_POLY = [(-14, +17), (-17, 0), (-17, -10), (+17, -10), (+17, 0), (+14, +17)]\nLEG_AWAY = 20\nLEG_DOWN = 18\nLEG_W, LEG_H = 2, 8\nLEG_SPRING_TORQUE = 40\nSIDE_ENGINE_HEIGHT = 14.0",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "MAIN_ENGINE_POWER",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "MAIN_ENGINE_POWER = 13.0\nSIDE_ENGINE_POWER = 0.6\nINITIAL_RANDOM = 1000.0  # Set 1500 to make game harder\nLANDER_POLY = [(-14, +17), (-17, 0), (-17, -10), (+17, -10), (+17, 0), (+14, +17)]\nLEG_AWAY = 20\nLEG_DOWN = 18\nLEG_W, LEG_H = 2, 8\nLEG_SPRING_TORQUE = 40\nSIDE_ENGINE_HEIGHT = 14.0\nSIDE_ENGINE_AWAY = 12.0",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "SIDE_ENGINE_POWER",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "SIDE_ENGINE_POWER = 0.6\nINITIAL_RANDOM = 1000.0  # Set 1500 to make game harder\nLANDER_POLY = [(-14, +17), (-17, 0), (-17, -10), (+17, -10), (+17, 0), (+14, +17)]\nLEG_AWAY = 20\nLEG_DOWN = 18\nLEG_W, LEG_H = 2, 8\nLEG_SPRING_TORQUE = 40\nSIDE_ENGINE_HEIGHT = 14.0\nSIDE_ENGINE_AWAY = 12.0\nVIEWPORT_W = 600",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "INITIAL_RANDOM",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "INITIAL_RANDOM = 1000.0  # Set 1500 to make game harder\nLANDER_POLY = [(-14, +17), (-17, 0), (-17, -10), (+17, -10), (+17, 0), (+14, +17)]\nLEG_AWAY = 20\nLEG_DOWN = 18\nLEG_W, LEG_H = 2, 8\nLEG_SPRING_TORQUE = 40\nSIDE_ENGINE_HEIGHT = 14.0\nSIDE_ENGINE_AWAY = 12.0\nVIEWPORT_W = 600\nVIEWPORT_H = 400",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "LANDER_POLY",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "LANDER_POLY = [(-14, +17), (-17, 0), (-17, -10), (+17, -10), (+17, 0), (+14, +17)]\nLEG_AWAY = 20\nLEG_DOWN = 18\nLEG_W, LEG_H = 2, 8\nLEG_SPRING_TORQUE = 40\nSIDE_ENGINE_HEIGHT = 14.0\nSIDE_ENGINE_AWAY = 12.0\nVIEWPORT_W = 600\nVIEWPORT_H = 400\nclass ContactDetector(contactListener):",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "LEG_AWAY",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "LEG_AWAY = 20\nLEG_DOWN = 18\nLEG_W, LEG_H = 2, 8\nLEG_SPRING_TORQUE = 40\nSIDE_ENGINE_HEIGHT = 14.0\nSIDE_ENGINE_AWAY = 12.0\nVIEWPORT_W = 600\nVIEWPORT_H = 400\nclass ContactDetector(contactListener):\n    def __init__(self, env):",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "LEG_DOWN",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "LEG_DOWN = 18\nLEG_W, LEG_H = 2, 8\nLEG_SPRING_TORQUE = 40\nSIDE_ENGINE_HEIGHT = 14.0\nSIDE_ENGINE_AWAY = 12.0\nVIEWPORT_W = 600\nVIEWPORT_H = 400\nclass ContactDetector(contactListener):\n    def __init__(self, env):\n        contactListener.__init__(self)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "LEG_SPRING_TORQUE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "LEG_SPRING_TORQUE = 40\nSIDE_ENGINE_HEIGHT = 14.0\nSIDE_ENGINE_AWAY = 12.0\nVIEWPORT_W = 600\nVIEWPORT_H = 400\nclass ContactDetector(contactListener):\n    def __init__(self, env):\n        contactListener.__init__(self)\n        self.env = env\n    def BeginContact(self, contact):",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "SIDE_ENGINE_HEIGHT",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "SIDE_ENGINE_HEIGHT = 14.0\nSIDE_ENGINE_AWAY = 12.0\nVIEWPORT_W = 600\nVIEWPORT_H = 400\nclass ContactDetector(contactListener):\n    def __init__(self, env):\n        contactListener.__init__(self)\n        self.env = env\n    def BeginContact(self, contact):\n        if (",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "SIDE_ENGINE_AWAY",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "SIDE_ENGINE_AWAY = 12.0\nVIEWPORT_W = 600\nVIEWPORT_H = 400\nclass ContactDetector(contactListener):\n    def __init__(self, env):\n        contactListener.__init__(self)\n        self.env = env\n    def BeginContact(self, contact):\n        if (\n            self.env.lander == contact.fixtureA.body",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "VIEWPORT_W",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "VIEWPORT_W = 600\nVIEWPORT_H = 400\nclass ContactDetector(contactListener):\n    def __init__(self, env):\n        contactListener.__init__(self)\n        self.env = env\n    def BeginContact(self, contact):\n        if (\n            self.env.lander == contact.fixtureA.body\n            or self.env.lander == contact.fixtureB.body",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "VIEWPORT_H",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "description": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "peekOfCode": "VIEWPORT_H = 400\nclass ContactDetector(contactListener):\n    def __init__(self, env):\n        contactListener.__init__(self)\n        self.env = env\n    def BeginContact(self, contact):\n        if (\n            self.env.lander == contact.fixtureA.body\n            or self.env.lander == contact.fixtureB.body\n        ):",
        "detail": "repos_that_could_be_useful.gym.gym.envs.box2d.lunar_lander",
        "documentation": {}
    },
    {
        "label": "AcrobotEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "peekOfCode": "class AcrobotEnv(core.Env):\n    \"\"\"\n    ### Description\n    The Acrobot environment is based on Sutton's work in\n    [\"Generalization in Reinforcement Learning: Successful Examples Using Sparse Coarse Coding\"](https://papers.nips.cc/paper/1995/hash/8f1d43620bc6bb580df6e80b0dc05c48-Abstract.html)\n    and [Sutton and Barto's book](http://www.incompleteideas.net/book/the-book-2nd.html).\n    The system consists of two links connected linearly to form a chain, with one end of\n    the chain fixed. The joint between the two links is actuated. The goal is to apply\n    torques on the actuated joint to swing the free end of the linear chain above a\n    given height while starting from the initial state of hanging downwards.",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "documentation": {}
    },
    {
        "label": "wrap",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "peekOfCode": "def wrap(x, m, M):\n    \"\"\"Wraps ``x`` so m <= x <= M; but unlike ``bound()`` which\n    truncates, ``wrap()`` wraps x around the coordinate system defined by m,M.\\n\n    For example, m = -180, M = 180 (degrees), x = 360 --> returns 0.\n    Args:\n        x: a scalar\n        m: minimum possible value in range\n        M: maximum possible value in range\n    Returns:\n        x: a scalar, wrapped",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "documentation": {}
    },
    {
        "label": "bound",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "peekOfCode": "def bound(x, m, M=None):\n    \"\"\"Either have m as scalar, so bound(x,m,M) which returns m <= x <= M *OR*\n    have m as length 2 vector, bound(x,m, <IGNORED>) returns m[0] <= x <= m[1].\n    Args:\n        x: scalar\n    Returns:\n        x: scalar, bound between min (m) and Max (M)\n    \"\"\"\n    if M is None:\n        M = m[1]",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "documentation": {}
    },
    {
        "label": "rk4",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "peekOfCode": "def rk4(derivs, y0, t):\n    \"\"\"\n    Integrate 1-D or N-D system of ODEs using 4-th order Runge-Kutta.\n    This is a toy implementation which may be useful if you find\n    yourself stranded on a system w/o scipy.  Otherwise use\n    :func:`scipy.integrate`.\n    Args:\n        derivs: the derivative of the system and has the signature ``dy = derivs(yi)``\n        y0: initial state vector\n        t: sample times",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "documentation": {}
    },
    {
        "label": "__copyright__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "peekOfCode": "__copyright__ = \"Copyright 2013, RLPy http://acl.mit.edu/RLPy\"\n__credits__ = [\n    \"Alborz Geramifard\",\n    \"Robert H. Klein\",\n    \"Christoph Dann\",\n    \"William Dabney\",\n    \"Jonathan P. How\",\n]\n__license__ = \"BSD 3-Clause\"\n__author__ = \"Christoph Dann <cdann@cdann.de>\"",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "peekOfCode": "__credits__ = [\n    \"Alborz Geramifard\",\n    \"Robert H. Klein\",\n    \"Christoph Dann\",\n    \"William Dabney\",\n    \"Jonathan P. How\",\n]\n__license__ = \"BSD 3-Clause\"\n__author__ = \"Christoph Dann <cdann@cdann.de>\"\n# SOURCE:",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "documentation": {}
    },
    {
        "label": "__license__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "peekOfCode": "__license__ = \"BSD 3-Clause\"\n__author__ = \"Christoph Dann <cdann@cdann.de>\"\n# SOURCE:\n# https://github.com/rlpy/rlpy/blob/master/rlpy/Domains/Acrobot.py\nclass AcrobotEnv(core.Env):\n    \"\"\"\n    ### Description\n    The Acrobot environment is based on Sutton's work in\n    [\"Generalization in Reinforcement Learning: Successful Examples Using Sparse Coarse Coding\"](https://papers.nips.cc/paper/1995/hash/8f1d43620bc6bb580df6e80b0dc05c48-Abstract.html)\n    and [Sutton and Barto's book](http://www.incompleteideas.net/book/the-book-2nd.html).",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "peekOfCode": "__author__ = \"Christoph Dann <cdann@cdann.de>\"\n# SOURCE:\n# https://github.com/rlpy/rlpy/blob/master/rlpy/Domains/Acrobot.py\nclass AcrobotEnv(core.Env):\n    \"\"\"\n    ### Description\n    The Acrobot environment is based on Sutton's work in\n    [\"Generalization in Reinforcement Learning: Successful Examples Using Sparse Coarse Coding\"](https://papers.nips.cc/paper/1995/hash/8f1d43620bc6bb580df6e80b0dc05c48-Abstract.html)\n    and [Sutton and Barto's book](http://www.incompleteideas.net/book/the-book-2nd.html).\n    The system consists of two links connected linearly to form a chain, with one end of",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.acrobot",
        "documentation": {}
    },
    {
        "label": "CartPoleEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.cartpole",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.cartpole",
        "peekOfCode": "class CartPoleEnv(gym.Env[np.ndarray, Union[int, np.ndarray]]):\n    \"\"\"\n    ### Description\n    This environment corresponds to the version of the cart-pole problem\n    described by Barto, Sutton, and Anderson in [\"Neuronlike Adaptive Elements That Can Solve Difficult Learning Control Problem\"](https://ieeexplore.ieee.org/document/6313077).\n    A pole is attached by an un-actuated joint to a cart, which moves along a\n    frictionless track. The pendulum is placed upright on the cart and the goal is to balance the pole by applying forces in the left and right direction on the cart.\n    ### Action Space\n    The action is a `ndarray` with shape `(1,)` which can take values `{0, 1}` indicating the direction of the fixed force the cart is pushed with.\n    | Num | Action                 |",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.cartpole",
        "documentation": {}
    },
    {
        "label": "Continuous_MountainCarEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.continuous_mountain_car",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.continuous_mountain_car",
        "peekOfCode": "class Continuous_MountainCarEnv(gym.Env):\n    \"\"\"\n    ### Description\n    The Mountain Car MDP is a deterministic MDP that consists of a car placed stochastically\n    at the bottom of a sinusoidal valley, with the only possible actions being the accelerations\n    that can be applied to the car in either direction. The goal of the MDP is to strategically\n    accelerate the car to reach the goal state on top of the right hill. There are two versions\n    of the mountain car domain in gym: one with discrete actions and one with continuous.\n    This version is the one with continuous actions.\n    This MDP first appeared in [Andrew Moore's PhD Thesis (1990)](https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-209.pdf)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.continuous_mountain_car",
        "documentation": {}
    },
    {
        "label": "MountainCarEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.mountain_car",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.mountain_car",
        "peekOfCode": "class MountainCarEnv(gym.Env):\n    \"\"\"\n    ### Description\n    The Mountain Car MDP is a deterministic MDP that consists of a car placed stochastically\n    at the bottom of a sinusoidal valley, with the only possible actions being the accelerations\n    that can be applied to the car in either direction. The goal of the MDP is to strategically\n    accelerate the car to reach the goal state on top of the right hill. There are two versions\n    of the mountain car domain in gym: one with discrete actions and one with continuous.\n    This version is the one with discrete actions.\n    This MDP first appeared in [Andrew Moore's PhD Thesis (1990)](https://www.cl.cam.ac.uk/techreports/UCAM-CL-TR-209.pdf)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.mountain_car",
        "documentation": {}
    },
    {
        "label": "PendulumEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.pendulum",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.pendulum",
        "peekOfCode": "class PendulumEnv(gym.Env):\n    \"\"\"\n       ### Description\n    The inverted pendulum swingup problem is based on the classic problem in control theory. The system consists of a pendulum attached at one end to a fixed point, and the other end being free. The pendulum starts in a random position and the goal is to apply torque on the free end to swing it into an upright position, with its center of gravity right above the fixed point.\n    The diagram below specifies the coordinate system used for the implementation of the pendulum's\n    dynamic equations.\n    ![Pendulum Coordinate System](./diagrams/pendulum.png)\n    -  `x-y`: cartesian coordinates of the pendulum's end in meters.\n    - `theta` : angle in radians.\n    - `tau`: torque in `N m`. Defined as positive _counter-clockwise_.",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.pendulum",
        "documentation": {}
    },
    {
        "label": "angle_normalize",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.pendulum",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.pendulum",
        "peekOfCode": "def angle_normalize(x):\n    return ((x + np.pi) % (2 * np.pi)) - np.pi",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.pendulum",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.classic_control.pendulum",
        "description": "repos_that_could_be_useful.gym.gym.envs.classic_control.pendulum",
        "peekOfCode": "__credits__ = [\"Carlos Luis\"]\nfrom os import path\nfrom typing import Optional\nimport numpy as np\nimport gym\nfrom gym import spaces\nfrom gym.error import DependencyNotInstalled\nclass PendulumEnv(gym.Env):\n    \"\"\"\n       ### Description",
        "detail": "repos_that_could_be_useful.gym.gym.envs.classic_control.pendulum",
        "documentation": {}
    },
    {
        "label": "AntEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.ant",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.ant",
        "peekOfCode": "class AntEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, \"ant.xml\", 5)\n        utils.EzPickle.__init__(self)\n    def step(self, a):\n        xposbefore = self.get_body_com(\"torso\")[0]\n        self.do_simulation(a, self.frame_skip)\n        xposafter = self.get_body_com(\"torso\")[0]\n        forward_reward = (xposafter - xposbefore) / self.dt\n        ctrl_cost = 0.5 * np.square(a).sum()",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.ant",
        "documentation": {}
    },
    {
        "label": "AntEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.ant_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.ant_v3",
        "peekOfCode": "class AntEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment is based on the environment introduced by Schulman,\n    Moritz, Levine, Jordan and Abbeel in [\"High-Dimensional Continuous Control\n    Using Generalized Advantage Estimation\"](https://arxiv.org/abs/1506.02438).\n    The ant is a 3D robot consisting of one torso (free rotational body) with\n    four legs attached to it with each leg having two links. The goal is to\n    coordinate the four legs to move in the forward (right) direction by applying\n    torques on the eight hinges connecting the two links of each leg and the torso",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.ant_v3",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CAMERA_CONFIG",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.ant_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.ant_v3",
        "peekOfCode": "DEFAULT_CAMERA_CONFIG = {\n    \"distance\": 4.0,\n}\nclass AntEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment is based on the environment introduced by Schulman,\n    Moritz, Levine, Jordan and Abbeel in [\"High-Dimensional Continuous Control\n    Using Generalized Advantage Estimation\"](https://arxiv.org/abs/1506.02438).\n    The ant is a 3D robot consisting of one torso (free rotational body) with",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.ant_v3",
        "documentation": {}
    },
    {
        "label": "HalfCheetahEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.half_cheetah",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.half_cheetah",
        "peekOfCode": "class HalfCheetahEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, \"half_cheetah.xml\", 5)\n        utils.EzPickle.__init__(self)\n    def step(self, action):\n        xposbefore = self.sim.data.qpos[0]\n        self.do_simulation(action, self.frame_skip)\n        xposafter = self.sim.data.qpos[0]\n        ob = self._get_obs()\n        reward_ctrl = -0.1 * np.square(action).sum()",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.half_cheetah",
        "documentation": {}
    },
    {
        "label": "HalfCheetahEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.half_cheetah_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.half_cheetah_v3",
        "peekOfCode": "class HalfCheetahEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment is based on the work by P. Wawrzy´nski in\n    [\"A Cat-Like Robot Real-Time Learning to Run\"](http://staff.elka.pw.edu.pl/~pwawrzyn/pub-s/0812_LSCLRR.pdf).\n    The HalfCheetah is a 2-dimensional robot consisting of 9 links and 8\n    joints connecting them (including two paws). The goal is to apply a torque\n    on the joints to make the cheetah run forward (right) as fast as possible,\n    with a positive reward allocated based on the distance moved forward and a\n    negative reward allocated for moving backward. The torso and head of the",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.half_cheetah_v3",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.half_cheetah_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.half_cheetah_v3",
        "peekOfCode": "__credits__ = [\"Rushiv Arora\"]\nimport numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\nDEFAULT_CAMERA_CONFIG = {\n    \"distance\": 4.0,\n}\nclass HalfCheetahEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.half_cheetah_v3",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CAMERA_CONFIG",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.half_cheetah_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.half_cheetah_v3",
        "peekOfCode": "DEFAULT_CAMERA_CONFIG = {\n    \"distance\": 4.0,\n}\nclass HalfCheetahEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment is based on the work by P. Wawrzy´nski in\n    [\"A Cat-Like Robot Real-Time Learning to Run\"](http://staff.elka.pw.edu.pl/~pwawrzyn/pub-s/0812_LSCLRR.pdf).\n    The HalfCheetah is a 2-dimensional robot consisting of 9 links and 8\n    joints connecting them (including two paws). The goal is to apply a torque",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.half_cheetah_v3",
        "documentation": {}
    },
    {
        "label": "HopperEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.hopper",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.hopper",
        "peekOfCode": "class HopperEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, \"hopper.xml\", 4)\n        utils.EzPickle.__init__(self)\n    def step(self, a):\n        posbefore = self.sim.data.qpos[0]\n        self.do_simulation(a, self.frame_skip)\n        posafter, height, ang = self.sim.data.qpos[0:3]\n        alive_bonus = 1.0\n        reward = (posafter - posbefore) / self.dt",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.hopper",
        "documentation": {}
    },
    {
        "label": "HopperEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.hopper_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.hopper_v3",
        "peekOfCode": "class HopperEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment is based on the work done by Erez, Tassa, and Todorov in\n    [\"Infinite Horizon Model Predictive Control for Nonlinear Periodic Tasks\"](http://www.roboticsproceedings.org/rss07/p10.pdf). The environment aims to\n    increase the number of independent state and control variables as compared to\n    the classic control environments. The hopper is a two-dimensional\n    one-legged figure that consist of four main body parts - the torso at the\n    top, the thigh in the middle, the leg in the bottom, and a single foot on\n    which the entire body rests. The goal is to make hops that move in the",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.hopper_v3",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.hopper_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.hopper_v3",
        "peekOfCode": "__credits__ = [\"Rushiv Arora\"]\nimport numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\nDEFAULT_CAMERA_CONFIG = {\n    \"trackbodyid\": 2,\n    \"distance\": 3.0,\n    \"lookat\": np.array((0.0, 0.0, 1.15)),\n    \"elevation\": -20.0,\n}",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.hopper_v3",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CAMERA_CONFIG",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.hopper_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.hopper_v3",
        "peekOfCode": "DEFAULT_CAMERA_CONFIG = {\n    \"trackbodyid\": 2,\n    \"distance\": 3.0,\n    \"lookat\": np.array((0.0, 0.0, 1.15)),\n    \"elevation\": -20.0,\n}\nclass HopperEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment is based on the work done by Erez, Tassa, and Todorov in",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.hopper_v3",
        "documentation": {}
    },
    {
        "label": "HumanoidEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid",
        "peekOfCode": "class HumanoidEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, \"humanoid.xml\", 5)\n        utils.EzPickle.__init__(self)\n    def _get_obs(self):\n        data = self.sim.data\n        return np.concatenate(\n            [\n                data.qpos.flat[2:],\n                data.qvel.flat,",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid",
        "documentation": {}
    },
    {
        "label": "mass_center",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid",
        "peekOfCode": "def mass_center(model, sim):\n    mass = np.expand_dims(model.body_mass, 1)\n    xpos = sim.data.xipos\n    return (np.sum(mass * xpos, 0) / np.sum(mass))[0]\nclass HumanoidEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, \"humanoid.xml\", 5)\n        utils.EzPickle.__init__(self)\n    def _get_obs(self):\n        data = self.sim.data",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid",
        "documentation": {}
    },
    {
        "label": "HumanoidEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid_v3",
        "peekOfCode": "class HumanoidEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment is based on the environment introduced by Tassa, Erez and Todorov\n    in [\"Synthesis and stabilization of complex behaviors through online trajectory optimization\"](https://ieeexplore.ieee.org/document/6386025).\n    The 3D bipedal robot is designed to simulate a human. It has a torso (abdomen) with a pair of\n    legs and arms. The legs each consist of two links, and so the arms (representing the knees and\n    elbows respectively). The goal of the environment is to walk forward as fast as possible without falling over.\n    ### Action Space\n    The action space is a `Box(-1, 1, (17,), float32)`. An action represents the torques applied at the hinge joints.",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid_v3",
        "documentation": {}
    },
    {
        "label": "mass_center",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid_v3",
        "peekOfCode": "def mass_center(model, sim):\n    mass = np.expand_dims(model.body_mass, axis=1)\n    xpos = sim.data.xipos\n    return (np.sum(mass * xpos, axis=0) / np.sum(mass))[0:2].copy()\nclass HumanoidEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment is based on the environment introduced by Tassa, Erez and Todorov\n    in [\"Synthesis and stabilization of complex behaviors through online trajectory optimization\"](https://ieeexplore.ieee.org/document/6386025).\n    The 3D bipedal robot is designed to simulate a human. It has a torso (abdomen) with a pair of",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid_v3",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CAMERA_CONFIG",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid_v3",
        "peekOfCode": "DEFAULT_CAMERA_CONFIG = {\n    \"trackbodyid\": 1,\n    \"distance\": 4.0,\n    \"lookat\": np.array((0.0, 0.0, 2.0)),\n    \"elevation\": -20.0,\n}\ndef mass_center(model, sim):\n    mass = np.expand_dims(model.body_mass, axis=1)\n    xpos = sim.data.xipos\n    return (np.sum(mass * xpos, axis=0) / np.sum(mass))[0:2].copy()",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoid_v3",
        "documentation": {}
    },
    {
        "label": "HumanoidStandupEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoidstandup",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoidstandup",
        "peekOfCode": "class HumanoidStandupEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment is based on the environment introduced by Tassa, Erez and Todorov\n    in [\"Synthesis and stabilization of complex behaviors through online trajectory optimization\"](https://ieeexplore.ieee.org/document/6386025).\n    The 3D bipedal robot is designed to simulate a human. It has a torso (abdomen) with a\n    pair of legs and arms. The legs each consist of two links, and so the arms (representing the\n    knees and elbows respectively). The environment starts with the humanoid layiing on the ground,\n    and then the goal of the environment is to make the humanoid standup and then keep it standing\n    by applying torques on the various hinges.",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.humanoidstandup",
        "documentation": {}
    },
    {
        "label": "InvertedDoublePendulumEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.inverted_double_pendulum",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.inverted_double_pendulum",
        "peekOfCode": "class InvertedDoublePendulumEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment originates from control theory and builds on the cartpole\n    environment based on the work done by Barto, Sutton, and Anderson in\n    [\"Neuronlike adaptive elements that can solve difficult learning control problems\"](https://ieeexplore.ieee.org/document/6313077),\n    powered by the Mujoco physics simulator - allowing for more complex experiments\n    (such as varying the effects of gravity or constraints). This environment involves a cart that can\n    moved linearly, with a pole fixed on it and a second pole fixed on the other end of the first one\n    (leaving the second pole as the only one with one free end). The cart can be pushed left or right,",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.inverted_double_pendulum",
        "documentation": {}
    },
    {
        "label": "InvertedPendulumEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.inverted_pendulum",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.inverted_pendulum",
        "peekOfCode": "class InvertedPendulumEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment is the cartpole environment based on the work done by\n    Barto, Sutton, and Anderson in [\"Neuronlike adaptive elements that can\n    solve difficult learning control problems\"](https://ieeexplore.ieee.org/document/6313077),\n    just like in the classic environments but now powered by the Mujoco physics simulator -\n    allowing for more complex experiments (such as varying the effects of gravity).\n    This environment involves a cart that can moved linearly, with a pole fixed on it\n    at one end and having another end free. The cart can be pushed left or right, and the",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.inverted_pendulum",
        "documentation": {}
    },
    {
        "label": "MujocoEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.mujoco_env",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.mujoco_env",
        "peekOfCode": "class MujocoEnv(gym.Env):\n    \"\"\"Superclass for all MuJoCo environments.\"\"\"\n    def __init__(self, model_path, frame_skip):\n        if model_path.startswith(\"/\"):\n            fullpath = model_path\n        else:\n            fullpath = os.path.join(os.path.dirname(__file__), \"assets\", model_path)\n        if not path.exists(fullpath):\n            raise OSError(f\"File {fullpath} does not exist\")\n        self.frame_skip = frame_skip",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.mujoco_env",
        "documentation": {}
    },
    {
        "label": "convert_observation_to_space",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.mujoco_env",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.mujoco_env",
        "peekOfCode": "def convert_observation_to_space(observation):\n    if isinstance(observation, dict):\n        space = spaces.Dict(\n            OrderedDict(\n                [\n                    (key, convert_observation_to_space(value))\n                    for key, value in observation.items()\n                ]\n            )\n        )",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.mujoco_env",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SIZE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.mujoco_env",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.mujoco_env",
        "peekOfCode": "DEFAULT_SIZE = 500\ndef convert_observation_to_space(observation):\n    if isinstance(observation, dict):\n        space = spaces.Dict(\n            OrderedDict(\n                [\n                    (key, convert_observation_to_space(value))\n                    for key, value in observation.items()\n                ]\n            )",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.mujoco_env",
        "documentation": {}
    },
    {
        "label": "PusherEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.pusher",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.pusher",
        "peekOfCode": "class PusherEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    \"Pusher\" is a multi-jointed robot arm which is very similar to that of a human.\n     The goal is to move a target cylinder (called *object*) to a goal position using the robot's end effector (called *fingertip*).\n      The robot consists of shoulder, elbow, forearm, and wrist joints.\n    ### Action Space\n    The action space is a `Box(-2, 2, (7,), float32)`. An action `(a, b)` represents the torques applied at the hinge joints.\n    | Num | Action                                                             | Control Min | Control Max | Name (in corresponding XML file) | Joint | Unit         |\n    |-----|--------------------------------------------------------------------|-------------|-------------|----------------------------------|-------|--------------|",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.pusher",
        "documentation": {}
    },
    {
        "label": "ReacherEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.reacher",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.reacher",
        "peekOfCode": "class ReacherEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    \"Reacher\" is a two-jointed robot arm. The goal is to move the robot's end effector (called *fingertip*) close to a\n    target that is spawned at a random position.\n    ### Action Space\n    The action space is a `Box(-1, 1, (2,), float32)`. An action `(a, b)` represents the torques applied at the hinge joints.\n    | Num | Action                                                                          | Control Min | Control Max | Name (in corresponding XML file) | Joint | Unit |\n    |-----|---------------------------------------------------------------------------------|-------------|-------------|--------------------------|-------|------|\n    | 0   | Torque applied at the first hinge (connecting the link to the point of fixture) | -1 | 1 | joint0  | hinge | torque (N m) |",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.reacher",
        "documentation": {}
    },
    {
        "label": "SwimmerEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.swimmer",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.swimmer",
        "peekOfCode": "class SwimmerEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, \"swimmer.xml\", 4)\n        utils.EzPickle.__init__(self)\n    def step(self, a):\n        ctrl_cost_coeff = 0.0001\n        xposbefore = self.sim.data.qpos[0]\n        self.do_simulation(a, self.frame_skip)\n        xposafter = self.sim.data.qpos[0]\n        reward_fwd = (xposafter - xposbefore) / self.dt",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.swimmer",
        "documentation": {}
    },
    {
        "label": "SwimmerEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.swimmer_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.swimmer_v3",
        "peekOfCode": "class SwimmerEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment corresponds to the Swimmer environment described in Rémi Coulom's PhD thesis\n    [\"Reinforcement Learning Using Neural Networks, with Applications to Motor Control\"](https://tel.archives-ouvertes.fr/tel-00003985/document).\n    The environment aims to increase the number of independent state and control\n    variables as compared to the classic control environments. The swimmers\n    consist of three or more segments ('***links***') and one less articulation\n    joints ('***rotors***') - one rotor joint connecting exactly two links to\n    form a linear chain. The swimmer is suspended in a two dimensional pool and",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.swimmer_v3",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.swimmer_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.swimmer_v3",
        "peekOfCode": "__credits__ = [\"Rushiv Arora\"]\nimport numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\nDEFAULT_CAMERA_CONFIG = {}\nclass SwimmerEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment corresponds to the Swimmer environment described in Rémi Coulom's PhD thesis\n    [\"Reinforcement Learning Using Neural Networks, with Applications to Motor Control\"](https://tel.archives-ouvertes.fr/tel-00003985/document).",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.swimmer_v3",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CAMERA_CONFIG",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.swimmer_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.swimmer_v3",
        "peekOfCode": "DEFAULT_CAMERA_CONFIG = {}\nclass SwimmerEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment corresponds to the Swimmer environment described in Rémi Coulom's PhD thesis\n    [\"Reinforcement Learning Using Neural Networks, with Applications to Motor Control\"](https://tel.archives-ouvertes.fr/tel-00003985/document).\n    The environment aims to increase the number of independent state and control\n    variables as compared to the classic control environments. The swimmers\n    consist of three or more segments ('***links***') and one less articulation\n    joints ('***rotors***') - one rotor joint connecting exactly two links to",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.swimmer_v3",
        "documentation": {}
    },
    {
        "label": "Walker2dEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.walker2d",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.walker2d",
        "peekOfCode": "class Walker2dEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, \"walker2d.xml\", 4)\n        utils.EzPickle.__init__(self)\n    def step(self, a):\n        posbefore = self.sim.data.qpos[0]\n        self.do_simulation(a, self.frame_skip)\n        posafter, height, ang = self.sim.data.qpos[0:3]\n        alive_bonus = 1.0\n        reward = (posafter - posbefore) / self.dt",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.walker2d",
        "documentation": {}
    },
    {
        "label": "Walker2dEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.walker2d_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.walker2d_v3",
        "peekOfCode": "class Walker2dEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment builds on the hopper environment based on the work done by Erez, Tassa, and Todorov\n    in [\"Infinite Horizon Model Predictive Control for Nonlinear Periodic Tasks\"](http://www.roboticsproceedings.org/rss07/p10.pdf)\n    by adding another set of legs making it possible for the robot to walker forward instead of\n    hop. Like other Mujoco environments, this environment aims to increase the number of independent state\n    and control variables as compared to the classic control environments. The walker is a\n    two-dimensional two-legged figure that consist of four main body parts - a single torso at the top\n    (with the two legs splitting after the torso), two thighs in the middle below the torso, two legs",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.walker2d_v3",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CAMERA_CONFIG",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.mujoco.walker2d_v3",
        "description": "repos_that_could_be_useful.gym.gym.envs.mujoco.walker2d_v3",
        "peekOfCode": "DEFAULT_CAMERA_CONFIG = {\n    \"trackbodyid\": 2,\n    \"distance\": 4.0,\n    \"lookat\": np.array((0.0, 0.0, 1.15)),\n    \"elevation\": -20.0,\n}\nclass Walker2dEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    \"\"\"\n    ### Description\n    This environment builds on the hopper environment based on the work done by Erez, Tassa, and Todorov",
        "detail": "repos_that_could_be_useful.gym.gym.envs.mujoco.walker2d_v3",
        "documentation": {}
    },
    {
        "label": "BlackjackEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "peekOfCode": "class BlackjackEnv(gym.Env):\n    \"\"\"\n    Blackjack is a card game where the goal is to beat the dealer by obtaining cards\n    that sum to closer to 21 (without going over 21) than the dealers cards.\n    ### Description\n    Card Values:\n    - Face cards (Jack, Queen, King) have a point value of 10.\n    - Aces can either count as 11 (called a 'usable ace') or 1.\n    - Numerical cards (2-9) have a value equal to their number.\n    This game is played with an infinite deck (or with replacement).",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "documentation": {}
    },
    {
        "label": "cmp",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "peekOfCode": "def cmp(a, b):\n    return float(a > b) - float(a < b)\n# 1 = Ace, 2-10 = Number cards, Jack/Queen/King = 10\ndeck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\ndef draw_card(np_random):\n    return int(np_random.choice(deck))\ndef draw_hand(np_random):\n    return [draw_card(np_random), draw_card(np_random)]\ndef usable_ace(hand):  # Does this hand have a usable ace?\n    return 1 in hand and sum(hand) + 10 <= 21",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "documentation": {}
    },
    {
        "label": "draw_card",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "peekOfCode": "def draw_card(np_random):\n    return int(np_random.choice(deck))\ndef draw_hand(np_random):\n    return [draw_card(np_random), draw_card(np_random)]\ndef usable_ace(hand):  # Does this hand have a usable ace?\n    return 1 in hand and sum(hand) + 10 <= 21\ndef sum_hand(hand):  # Return current hand total\n    if usable_ace(hand):\n        return sum(hand) + 10\n    return sum(hand)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "documentation": {}
    },
    {
        "label": "draw_hand",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "peekOfCode": "def draw_hand(np_random):\n    return [draw_card(np_random), draw_card(np_random)]\ndef usable_ace(hand):  # Does this hand have a usable ace?\n    return 1 in hand and sum(hand) + 10 <= 21\ndef sum_hand(hand):  # Return current hand total\n    if usable_ace(hand):\n        return sum(hand) + 10\n    return sum(hand)\ndef is_bust(hand):  # Is this hand a bust?\n    return sum_hand(hand) > 21",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "documentation": {}
    },
    {
        "label": "usable_ace",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "peekOfCode": "def usable_ace(hand):  # Does this hand have a usable ace?\n    return 1 in hand and sum(hand) + 10 <= 21\ndef sum_hand(hand):  # Return current hand total\n    if usable_ace(hand):\n        return sum(hand) + 10\n    return sum(hand)\ndef is_bust(hand):  # Is this hand a bust?\n    return sum_hand(hand) > 21\ndef score(hand):  # What is the score of this hand (0 if bust)\n    return 0 if is_bust(hand) else sum_hand(hand)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "documentation": {}
    },
    {
        "label": "sum_hand",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "peekOfCode": "def sum_hand(hand):  # Return current hand total\n    if usable_ace(hand):\n        return sum(hand) + 10\n    return sum(hand)\ndef is_bust(hand):  # Is this hand a bust?\n    return sum_hand(hand) > 21\ndef score(hand):  # What is the score of this hand (0 if bust)\n    return 0 if is_bust(hand) else sum_hand(hand)\ndef is_natural(hand):  # Is this hand a natural blackjack?\n    return sorted(hand) == [1, 10]",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "documentation": {}
    },
    {
        "label": "is_bust",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "peekOfCode": "def is_bust(hand):  # Is this hand a bust?\n    return sum_hand(hand) > 21\ndef score(hand):  # What is the score of this hand (0 if bust)\n    return 0 if is_bust(hand) else sum_hand(hand)\ndef is_natural(hand):  # Is this hand a natural blackjack?\n    return sorted(hand) == [1, 10]\nclass BlackjackEnv(gym.Env):\n    \"\"\"\n    Blackjack is a card game where the goal is to beat the dealer by obtaining cards\n    that sum to closer to 21 (without going over 21) than the dealers cards.",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "peekOfCode": "def score(hand):  # What is the score of this hand (0 if bust)\n    return 0 if is_bust(hand) else sum_hand(hand)\ndef is_natural(hand):  # Is this hand a natural blackjack?\n    return sorted(hand) == [1, 10]\nclass BlackjackEnv(gym.Env):\n    \"\"\"\n    Blackjack is a card game where the goal is to beat the dealer by obtaining cards\n    that sum to closer to 21 (without going over 21) than the dealers cards.\n    ### Description\n    Card Values:",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "documentation": {}
    },
    {
        "label": "is_natural",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "peekOfCode": "def is_natural(hand):  # Is this hand a natural blackjack?\n    return sorted(hand) == [1, 10]\nclass BlackjackEnv(gym.Env):\n    \"\"\"\n    Blackjack is a card game where the goal is to beat the dealer by obtaining cards\n    that sum to closer to 21 (without going over 21) than the dealers cards.\n    ### Description\n    Card Values:\n    - Face cards (Jack, Queen, King) have a point value of 10.\n    - Aces can either count as 11 (called a 'usable ace') or 1.",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "documentation": {}
    },
    {
        "label": "deck",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "peekOfCode": "deck = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\ndef draw_card(np_random):\n    return int(np_random.choice(deck))\ndef draw_hand(np_random):\n    return [draw_card(np_random), draw_card(np_random)]\ndef usable_ace(hand):  # Does this hand have a usable ace?\n    return 1 in hand and sum(hand) + 10 <= 21\ndef sum_hand(hand):  # Return current hand total\n    if usable_ace(hand):\n        return sum(hand) + 10",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.blackjack",
        "documentation": {}
    },
    {
        "label": "CliffWalkingEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "peekOfCode": "class CliffWalkingEnv(Env):\n    \"\"\"\n    This is a simple implementation of the Gridworld Cliff\n    reinforcement learning task.\n    Adapted from Example 6.6 (page 106) from [Reinforcement Learning: An Introduction\n    by Sutton and Barto](http://incompleteideas.net/book/bookdraft2018jan1.pdf).\n    With inspiration from:\n    https://github.com/dennybritz/reinforcement-learning/blob/master/lib/envs/cliff_walking.py\n    ### Description\n    The board is a 4x12 matrix, with (using NumPy matrix indexing):",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "documentation": {}
    },
    {
        "label": "UP",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "peekOfCode": "UP = 0\nRIGHT = 1\nDOWN = 2\nLEFT = 3\nclass CliffWalkingEnv(Env):\n    \"\"\"\n    This is a simple implementation of the Gridworld Cliff\n    reinforcement learning task.\n    Adapted from Example 6.6 (page 106) from [Reinforcement Learning: An Introduction\n    by Sutton and Barto](http://incompleteideas.net/book/bookdraft2018jan1.pdf).",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "documentation": {}
    },
    {
        "label": "RIGHT",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "peekOfCode": "RIGHT = 1\nDOWN = 2\nLEFT = 3\nclass CliffWalkingEnv(Env):\n    \"\"\"\n    This is a simple implementation of the Gridworld Cliff\n    reinforcement learning task.\n    Adapted from Example 6.6 (page 106) from [Reinforcement Learning: An Introduction\n    by Sutton and Barto](http://incompleteideas.net/book/bookdraft2018jan1.pdf).\n    With inspiration from:",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "documentation": {}
    },
    {
        "label": "DOWN",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "peekOfCode": "DOWN = 2\nLEFT = 3\nclass CliffWalkingEnv(Env):\n    \"\"\"\n    This is a simple implementation of the Gridworld Cliff\n    reinforcement learning task.\n    Adapted from Example 6.6 (page 106) from [Reinforcement Learning: An Introduction\n    by Sutton and Barto](http://incompleteideas.net/book/bookdraft2018jan1.pdf).\n    With inspiration from:\n    https://github.com/dennybritz/reinforcement-learning/blob/master/lib/envs/cliff_walking.py",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "documentation": {}
    },
    {
        "label": "LEFT",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "peekOfCode": "LEFT = 3\nclass CliffWalkingEnv(Env):\n    \"\"\"\n    This is a simple implementation of the Gridworld Cliff\n    reinforcement learning task.\n    Adapted from Example 6.6 (page 106) from [Reinforcement Learning: An Introduction\n    by Sutton and Barto](http://incompleteideas.net/book/bookdraft2018jan1.pdf).\n    With inspiration from:\n    https://github.com/dennybritz/reinforcement-learning/blob/master/lib/envs/cliff_walking.py\n    ### Description",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.cliffwalking",
        "documentation": {}
    },
    {
        "label": "FrozenLakeEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "peekOfCode": "class FrozenLakeEnv(Env):\n    \"\"\"\n    Frozen lake involves crossing a frozen lake from Start(S) to Goal(G) without falling into any Holes(H) by walking over\n    the Frozen(F) lake. The agent may not always move in the intended direction due to the slippery nature of the frozen lake.\n    ### Action Space\n    The agent takes a 1-element vector for actions.\n    The action space is `(dir)`, where `dir` decides direction to move in which can be:\n    - 0: LEFT\n    - 1: DOWN\n    - 2: RIGHT",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "documentation": {}
    },
    {
        "label": "generate_random_map",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "peekOfCode": "def generate_random_map(size=8, p=0.8):\n    \"\"\"Generates a random valid map (one that has a path from start to goal)\n    :param size: size of each side of the grid\n    :param p: probability that a tile is frozen\n    \"\"\"\n    valid = False\n    # DFS to check that it's a valid path.\n    def is_valid(res):\n        frontier, discovered = [], set()\n        frontier.append((0, 0))",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "documentation": {}
    },
    {
        "label": "LEFT",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "peekOfCode": "LEFT = 0\nDOWN = 1\nRIGHT = 2\nUP = 3\nMAPS = {\n    \"4x4\": [\"SFFF\", \"FHFH\", \"FFFH\", \"HFFG\"],\n    \"8x8\": [\n        \"SFFFFFFF\",\n        \"FFFFFFFF\",\n        \"FFFHFFFF\",",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "documentation": {}
    },
    {
        "label": "DOWN",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "peekOfCode": "DOWN = 1\nRIGHT = 2\nUP = 3\nMAPS = {\n    \"4x4\": [\"SFFF\", \"FHFH\", \"FFFH\", \"HFFG\"],\n    \"8x8\": [\n        \"SFFFFFFF\",\n        \"FFFFFFFF\",\n        \"FFFHFFFF\",\n        \"FFFFFHFF\",",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "documentation": {}
    },
    {
        "label": "RIGHT",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "peekOfCode": "RIGHT = 2\nUP = 3\nMAPS = {\n    \"4x4\": [\"SFFF\", \"FHFH\", \"FFFH\", \"HFFG\"],\n    \"8x8\": [\n        \"SFFFFFFF\",\n        \"FFFFFFFF\",\n        \"FFFHFFFF\",\n        \"FFFFFHFF\",\n        \"FFFHFFFF\",",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "documentation": {}
    },
    {
        "label": "UP",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "peekOfCode": "UP = 3\nMAPS = {\n    \"4x4\": [\"SFFF\", \"FHFH\", \"FFFH\", \"HFFG\"],\n    \"8x8\": [\n        \"SFFFFFFF\",\n        \"FFFFFFFF\",\n        \"FFFHFFFF\",\n        \"FFFFFHFF\",\n        \"FFFHFFFF\",\n        \"FHHFFFHF\",",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "documentation": {}
    },
    {
        "label": "MAPS",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "peekOfCode": "MAPS = {\n    \"4x4\": [\"SFFF\", \"FHFH\", \"FFFH\", \"HFFG\"],\n    \"8x8\": [\n        \"SFFFFFFF\",\n        \"FFFFFFFF\",\n        \"FFFHFFFF\",\n        \"FFFFFHFF\",\n        \"FFFHFFFF\",\n        \"FHHFFFHF\",\n        \"FHFFHFHF\",",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.frozen_lake",
        "documentation": {}
    },
    {
        "label": "TaxiEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.taxi",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.taxi",
        "peekOfCode": "class TaxiEnv(Env):\n    \"\"\"\n    The Taxi Problem\n    from \"Hierarchical Reinforcement Learning with the MAXQ Value Function Decomposition\"\n    by Tom Dietterich\n    ### Description\n    There are four designated locations in the grid world indicated by R(ed),\n    G(reen), Y(ellow), and B(lue). When the episode starts, the taxi starts off\n    at a random square and the passenger is at a random location. The taxi\n    drives to the passenger's location, picks up the passenger, drives to the",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.taxi",
        "documentation": {}
    },
    {
        "label": "MAP",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.taxi",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.taxi",
        "peekOfCode": "MAP = [\n    \"+---------+\",\n    \"|R: | : :G|\",\n    \"| : | : : |\",\n    \"| : : : : |\",\n    \"| | : | : |\",\n    \"|Y| : |B: |\",\n    \"+---------+\",\n]\nWINDOW_SIZE = (550, 350)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.taxi",
        "documentation": {}
    },
    {
        "label": "WINDOW_SIZE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.taxi",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.taxi",
        "peekOfCode": "WINDOW_SIZE = (550, 350)\nclass TaxiEnv(Env):\n    \"\"\"\n    The Taxi Problem\n    from \"Hierarchical Reinforcement Learning with the MAXQ Value Function Decomposition\"\n    by Tom Dietterich\n    ### Description\n    There are four designated locations in the grid world indicated by R(ed),\n    G(reen), Y(ellow), and B(lue). When the episode starts, the taxi starts off\n    at a random square and the passenger is at a random location. The taxi",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.taxi",
        "documentation": {}
    },
    {
        "label": "categorical_sample",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.toy_text.utils",
        "description": "repos_that_could_be_useful.gym.gym.envs.toy_text.utils",
        "peekOfCode": "def categorical_sample(prob_n, np_random):\n    \"\"\"\n    Sample from categorical distribution\n    Each row specifies class probabilities\n    \"\"\"\n    prob_n = np.asarray(prob_n)\n    csprob_n = np.cumsum(prob_n)\n    return (csprob_n > np_random.random()).argmax()",
        "detail": "repos_that_could_be_useful.gym.gym.envs.toy_text.utils",
        "documentation": {}
    },
    {
        "label": "EnvSpec",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "class EnvSpec:\n    id: str\n    entry_point: Optional[Union[Callable, str]] = field(default=None)\n    reward_threshold: Optional[float] = field(default=None)\n    nondeterministic: bool = field(default=False)\n    max_episode_steps: Optional[int] = field(default=None)\n    order_enforce: bool = field(default=True)\n    autoreset: bool = field(default=False)\n    kwargs: dict = field(default_factory=dict)\n    namespace: Optional[str] = field(init=False)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def load(name: str) -> Type:\n    mod_name, attr_name = name.split(\":\")\n    mod = importlib.import_module(mod_name)\n    fn = getattr(mod, attr_name)\n    return fn\ndef parse_env_id(id: str) -> Tuple[Optional[str], str, Optional[int]]:\n    \"\"\"Parse environment ID string format.\n    This format is true today, but it's *not* an official spec.\n    [namespace/](env-name)-v(version)    env-name is group 1, version is group 2\n    2016-10-31: We're experimentally expanding the environment ID format",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "parse_env_id",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def parse_env_id(id: str) -> Tuple[Optional[str], str, Optional[int]]:\n    \"\"\"Parse environment ID string format.\n    This format is true today, but it's *not* an official spec.\n    [namespace/](env-name)-v(version)    env-name is group 1, version is group 2\n    2016-10-31: We're experimentally expanding the environment ID format\n    to include an optional namespace.\n    \"\"\"\n    match = ENV_ID_RE.fullmatch(id)\n    if not match:\n        raise error.Error(",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "get_env_id",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def get_env_id(ns: Optional[str], name: str, version: Optional[int]):\n    \"\"\"Get the full env ID given a name and (optional) version and namespace.\n    Inverse of parse_env_id.\"\"\"\n    full_name = name\n    if version is not None:\n        full_name += f\"-v{version}\"\n    if ns is not None:\n        full_name = ns + \"/\" + full_name\n    return full_name\n@dataclass",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "find_highest_version",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def find_highest_version(ns: Optional[str], name: str) -> Optional[int]:\n    version: list[int] = [\n        spec_.version\n        for spec_ in registry.values()\n        if spec_.namespace == ns and spec_.name == name and spec_.version is not None\n    ]\n    return max(version, default=None)\ndef load_env_plugins(entry_point: str = \"gym.envs\") -> None:\n    # Load third-party environments\n    for plugin in metadata.entry_points(group=entry_point):",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "load_env_plugins",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def load_env_plugins(entry_point: str = \"gym.envs\") -> None:\n    # Load third-party environments\n    for plugin in metadata.entry_points(group=entry_point):\n        # Python 3.8 doesn't support plugin.module, plugin.attr\n        # So we'll have to try and parse this ourselves\n        module, attr = None, None\n        try:\n            module, attr = plugin.module, plugin.attr  # type: ignore  ## error: Cannot access member \"attr\" for type \"EntryPoint\"\n        except AttributeError:\n            if \":\" in plugin.value:",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: Literal[\"CartPole-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"MountainCar-v0\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"MountainCarContinuous-v0\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n@overload\ndef make(id: Literal[\"Pendulum-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n@overload\ndef make(id: Literal[\"Acrobot-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n# Box2d",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: Literal[\"MountainCar-v0\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"MountainCarContinuous-v0\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n@overload\ndef make(id: Literal[\"Pendulum-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n@overload\ndef make(id: Literal[\"Acrobot-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n# Box2d\n# ----------------------------------------\n@overload",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: Literal[\"MountainCarContinuous-v0\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n@overload\ndef make(id: Literal[\"Pendulum-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n@overload\ndef make(id: Literal[\"Acrobot-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n# Box2d\n# ----------------------------------------\n@overload\ndef make(id: Literal[\"LunarLander-v2\", \"LunarLanderContinuous-v2\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: Literal[\"Pendulum-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n@overload\ndef make(id: Literal[\"Acrobot-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n# Box2d\n# ----------------------------------------\n@overload\ndef make(id: Literal[\"LunarLander-v2\", \"LunarLanderContinuous-v2\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"BipedalWalker-v3\", \"BipedalWalkerHardcore-v3\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n@overload",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: Literal[\"Acrobot-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n# Box2d\n# ----------------------------------------\n@overload\ndef make(id: Literal[\"LunarLander-v2\", \"LunarLanderContinuous-v2\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"BipedalWalker-v3\", \"BipedalWalkerHardcore-v3\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n@overload\ndef make(id: Literal[\"CarRacing-v1\", \"CarRacingDomainRandomize-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n# Toy Text",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: Literal[\"LunarLander-v2\", \"LunarLanderContinuous-v2\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"BipedalWalker-v3\", \"BipedalWalkerHardcore-v3\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n@overload\ndef make(id: Literal[\"CarRacing-v1\", \"CarRacingDomainRandomize-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n# Toy Text\n# ----------------------------------------\n@overload\ndef make(id: Literal[\"Blackjack-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: Literal[\"BipedalWalker-v3\", \"BipedalWalkerHardcore-v3\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n@overload\ndef make(id: Literal[\"CarRacing-v1\", \"CarRacingDomainRandomize-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n# Toy Text\n# ----------------------------------------\n@overload\ndef make(id: Literal[\"Blackjack-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"FrozenLake-v1\", \"FrozenLake8x8-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: Literal[\"CarRacing-v1\", \"CarRacingDomainRandomize-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | Sequence[SupportsFloat]]: ...\n# Toy Text\n# ----------------------------------------\n@overload\ndef make(id: Literal[\"Blackjack-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"FrozenLake-v1\", \"FrozenLake8x8-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"CliffWalking-v0\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: Literal[\"Blackjack-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"FrozenLake-v1\", \"FrozenLake8x8-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"CliffWalking-v0\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"Taxi-v3\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n# Mujoco\n# ----------------------------------------\n@overload",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: Literal[\"FrozenLake-v1\", \"FrozenLake8x8-v1\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"CliffWalking-v0\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"Taxi-v3\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n# Mujoco\n# ----------------------------------------\n@overload\ndef make(id: Literal[\n    \"Reacher-v2\",",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: Literal[\"CliffWalking-v0\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n@overload\ndef make(id: Literal[\"Taxi-v3\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n# Mujoco\n# ----------------------------------------\n@overload\ndef make(id: Literal[\n    \"Reacher-v2\",\n    \"Pusher-v2\",\n    \"Thrower-v2\",",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: Literal[\"Taxi-v3\"], **kwargs) -> Env[np.ndarray, np.ndarray | int]: ...\n# Mujoco\n# ----------------------------------------\n@overload\ndef make(id: Literal[\n    \"Reacher-v2\",\n    \"Pusher-v2\",\n    \"Thrower-v2\",\n    \"Striker-v2\",\n    \"InvertedPendulum-v2\",",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: Literal[\n    \"Reacher-v2\",\n    \"Pusher-v2\",\n    \"Thrower-v2\",\n    \"Striker-v2\",\n    \"InvertedPendulum-v2\",\n    \"InvertedDoublePendulum-v2\",\n    \"HalfCheetah-v2\", \"HalfCheetah-v3\",\n    \"Hopper-v2\", \"Hopper-v3\",\n    \"Swimmer-v2\", \"Swimmer-v3\",",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: str, **kwargs) -> Env: ...\n@overload\ndef make(id: EnvSpec, **kwargs) -> Env: ...\n# fmt: on\n# Global registry of environments. Meant to be accessed through `register` and `make`\nregistry: dict[str, EnvSpec] = dict()\ncurrent_namespace: Optional[str] = None\ndef _check_spec_register(spec: EnvSpec):\n    \"\"\"Checks whether the spec is valid to be registered. Helper function for `register`.\"\"\"\n    global registry, current_namespace",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(id: EnvSpec, **kwargs) -> Env: ...\n# fmt: on\n# Global registry of environments. Meant to be accessed through `register` and `make`\nregistry: dict[str, EnvSpec] = dict()\ncurrent_namespace: Optional[str] = None\ndef _check_spec_register(spec: EnvSpec):\n    \"\"\"Checks whether the spec is valid to be registered. Helper function for `register`.\"\"\"\n    global registry, current_namespace\n    if current_namespace is not None:\n        if spec.namespace is not None:",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "namespace",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def namespace(ns: str):\n    global current_namespace\n    old_namespace = current_namespace\n    current_namespace = ns\n    yield\n    current_namespace = old_namespace\ndef register(id: str, **kwargs):\n    \"\"\"\n    Register an environment with gym. The `id` parameter corresponds to the name of the environment,\n    with the syntax as follows:",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def register(id: str, **kwargs):\n    \"\"\"\n    Register an environment with gym. The `id` parameter corresponds to the name of the environment,\n    with the syntax as follows:\n    `(namespace)/(env_name)-v(version)`\n    where `namespace` is optional.\n    It takes arbitrary keyword arguments, which are passed to the `EnvSpec` constructor.\n    \"\"\"\n    global registry, current_namespace\n    ns, name, version = parse_env_id(id)",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def make(\n    id: str | EnvSpec,\n    max_episode_steps: Optional[int] = None,\n    autoreset: bool = False,\n    **kwargs,\n) -> Env:\n    \"\"\"\n    Create an environment according to the given ID.\n    Args:\n        id: Name of the environment.",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "spec",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.envs.registration",
        "description": "repos_that_could_be_useful.gym.gym.envs.registration",
        "peekOfCode": "def spec(env_id: str) -> EnvSpec:\n    \"\"\"\n    Retrieve the spec for the given environment from the global registry.\n    \"\"\"\n    spec_ = registry.get(env_id)\n    if spec_ is None:\n        ns, name, version = parse_env_id(env_id)\n        _check_version_exists(ns, name, version)\n        raise error.Error(f\"No registered env with id: {env_id}\")\n    else:",
        "detail": "repos_that_could_be_useful.gym.gym.envs.registration",
        "documentation": {}
    },
    {
        "label": "Box",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.box",
        "description": "repos_that_could_be_useful.gym.gym.spaces.box",
        "peekOfCode": "class Box(Space[np.ndarray]):\n    r\"\"\"A (possibly unbounded) box in :math:`\\mathbb{R}^n`.\n    Specifically, a Box represents the Cartesian product of n closed intervals.\n    Each interval has the form of one of :math:`[a, b]`, :math:`(-\\infty, b]`,\n    :math:`[a, \\infty)`, or :math:`(-\\infty, \\infty)`.\n    There are two common use cases:\n    * Identical bound for each dimension::\n        >>> Box(low=-1.0, high=2.0, shape=(3, 4), dtype=np.float32)\n        Box(3, 4)\n    * Independent bound for each dimension::",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.box",
        "documentation": {}
    },
    {
        "label": "get_inf",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.box",
        "description": "repos_that_could_be_useful.gym.gym.spaces.box",
        "peekOfCode": "def get_inf(dtype, sign: str) -> SupportsFloat:\n    \"\"\"Returns an infinite that doesn't break things.\n    Args:\n        dtype: An `np.dtype`\n        sign (str): must be either `\"+\"` or `\"-\"`\n    \"\"\"\n    if np.dtype(dtype).kind == \"f\":\n        if sign == \"+\":\n            return np.inf\n        elif sign == \"-\":",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.box",
        "documentation": {}
    },
    {
        "label": "get_precision",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.box",
        "description": "repos_that_could_be_useful.gym.gym.spaces.box",
        "peekOfCode": "def get_precision(dtype) -> SupportsFloat:\n    \"\"\"Get precision of a data type.\"\"\"\n    if np.issubdtype(dtype, np.floating):\n        return np.finfo(dtype).precision\n    else:\n        return np.inf\ndef _broadcast(\n    value: Union[SupportsFloat, np.ndarray],\n    dtype,\n    shape: tuple[int, ...],",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.box",
        "documentation": {}
    },
    {
        "label": "Dict",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.dict",
        "description": "repos_that_could_be_useful.gym.gym.spaces.dict",
        "peekOfCode": "class Dict(Space[TypingDict[str, Space]], Mapping):\n    \"\"\"A dictionary of :class:`Space` instances.\n    Elements of this space are (ordered) dictionaries of elements from the constituent spaces.\n    Example usage::\n        >>> observation_space = spaces.Dict({\"position\": spaces.Discrete(2), \"velocity\": spaces.Discrete(3)})\n        >>> observation_space.sample()\n        OrderedDict([('position', 1), ('velocity', 2)])\n    Example usage [nested]::\n        >>> spaces.Dict(\n        ...     {",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.dict",
        "documentation": {}
    },
    {
        "label": "Discrete",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.discrete",
        "description": "repos_that_could_be_useful.gym.gym.spaces.discrete",
        "peekOfCode": "class Discrete(Space[int]):\n    r\"\"\"A space consisting of finitely many elements.\n    This class represents a finite subset of integers, more specifically a set of the form :math:`\\{ a, a+1, \\dots, a+n-1 \\}`.\n    Example::\n        >>> Discrete(2)            # {0, 1}\n        >>> Discrete(3, start=-1)  # {-1, 0, 1}\n    \"\"\"\n    def __init__(\n        self,\n        n: int,",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.discrete",
        "documentation": {}
    },
    {
        "label": "MultiBinary",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.multi_binary",
        "description": "repos_that_could_be_useful.gym.gym.spaces.multi_binary",
        "peekOfCode": "class MultiBinary(Space[np.ndarray]):\n    \"\"\"An n-shape binary space.\n    Elements of this space are binary arrays of a shape that is fixed during construction.\n    Example Usage::\n        >>> self.observation_space = spaces.MultiBinary(5)\n        >>> self.observation_space.sample()\n            array([0, 1, 0, 1, 0], dtype=int8)\n        >>> self.observation_space = spaces.MultiBinary([3, 2])\n        >>> self.observation_space.sample()\n            array([[0, 0],",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.multi_binary",
        "documentation": {}
    },
    {
        "label": "MultiDiscrete",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.multi_discrete",
        "description": "repos_that_could_be_useful.gym.gym.spaces.multi_discrete",
        "peekOfCode": "class MultiDiscrete(Space[np.ndarray]):\n    \"\"\"This represents the cartesian product of arbitrary :class:`Discrete` spaces.\n    It is useful to represent game controllers or keyboards where each key can be represented as a discrete action space.\n    Note:\n        Some environment wrappers assume a value of 0 always represents the NOOP action.\n    e.g. Nintendo Game Controller - Can be conceptualized as 3 discrete action spaces:\n    1. Arrow Keys: Discrete 5  - NOOP[0], UP[1], RIGHT[2], DOWN[3], LEFT[4]  - params: min: 0, max: 4\n    2. Button A:   Discrete 2  - NOOP[0], Pressed[1] - params: min: 0, max: 1\n    3. Button B:   Discrete 2  - NOOP[0], Pressed[1] - params: min: 0, max: 1\n    It can be initialized as ``MultiDiscrete([ 5, 2, 2 ])``",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.multi_discrete",
        "documentation": {}
    },
    {
        "label": "Space",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.space",
        "description": "repos_that_could_be_useful.gym.gym.spaces.space",
        "peekOfCode": "class Space(Generic[T_cov]):\n    \"\"\"Superclass that is used to define observation and action spaces.\n    Spaces are crucially used in Gym to define the format of valid actions and observations.\n    They serve various purposes:\n    * They clearly define how to interact with environments, i.e. they specify what actions need to look like and what observations will look like\n    * They allow us to work with highly structured data (e.g. in the form of elements of :class:`Dict` spaces) and painlessly transform them into flat arrays that can be used in learning code\n    * They provide a method to sample random elements. This is especially useful for exploration and debugging.\n    Different spaces can be combined hierarchically via container spaces (:class:`Tuple` and :class:`Dict`) to build a\n    more expressive space\n    Warning:",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.space",
        "documentation": {}
    },
    {
        "label": "T_cov",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.space",
        "description": "repos_that_could_be_useful.gym.gym.spaces.space",
        "peekOfCode": "T_cov = TypeVar(\"T_cov\", covariant=True)\nclass Space(Generic[T_cov]):\n    \"\"\"Superclass that is used to define observation and action spaces.\n    Spaces are crucially used in Gym to define the format of valid actions and observations.\n    They serve various purposes:\n    * They clearly define how to interact with environments, i.e. they specify what actions need to look like and what observations will look like\n    * They allow us to work with highly structured data (e.g. in the form of elements of :class:`Dict` spaces) and painlessly transform them into flat arrays that can be used in learning code\n    * They provide a method to sample random elements. This is especially useful for exploration and debugging.\n    Different spaces can be combined hierarchically via container spaces (:class:`Tuple` and :class:`Dict`) to build a\n    more expressive space",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.space",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.tuple",
        "description": "repos_that_could_be_useful.gym.gym.spaces.tuple",
        "peekOfCode": "class Tuple(Space[tuple], Sequence):\n    \"\"\"A tuple (more precisely: the cartesian product) of :class:`Space` instances.\n    Elements of this space are tuples of elements of the constituent spaces.\n    Example usage::\n        >> observation_space = spaces.Tuple((spaces.Discrete(2), spaces.Box(-1, 1, shape=(2,))))\n        >> observation_space.sample()\n        (0, array([0.03633198, 0.42370757], dtype=float32))\n    \"\"\"\n    def __init__(\n        self,",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.tuple",
        "documentation": {}
    },
    {
        "label": "flatdim",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "description": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "peekOfCode": "def flatdim(space: Space) -> int:\n    \"\"\"Return the number of dimensions a flattened equivalent of this space would have.\n    Accepts a space and returns an integer.\n    Raises:\n         NotImplementedError: if the space is not defined in ``gym.spaces``.\n    Example usage::\n        >>> s = spaces.Dict({\"position\": spaces.Discrete(2), \"velocity\": spaces.Discrete(3)})\n        >>> spaces.flatdim(s)\n        5\n    \"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "documentation": {}
    },
    {
        "label": "flatten",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "description": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "peekOfCode": "def flatten(space: Space[T], x: T) -> np.ndarray:\n    \"\"\"Flatten a data point from a space.\n    This is useful when e.g. points from spaces must be passed to a neural\n    network, which only understands flat arrays of floats.\n    Accepts a space and a point from that space. Always returns a 1D array.\n    Raises ``NotImplementedError`` if the space is not defined in\n    ``gym.spaces``.\n    \"\"\"\n    raise NotImplementedError(f\"Unknown space: `{space}`\")\n@flatten.register(Box)",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "documentation": {}
    },
    {
        "label": "unflatten",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "description": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "peekOfCode": "def unflatten(space: Space[T], x: np.ndarray) -> T:\n    \"\"\"Unflatten a data point from a space.\n    This reverses the transformation applied by :func:`flatten`. You must ensure\n    that the ``space`` argument is the same as for the :func:`flatten` call.\n    Accepts a space and a flattened point. Returns a point with a structure\n    that matches the space. Raises ``NotImplementedError`` if the space is not\n    defined in ``gym.spaces``.\n    \"\"\"\n    raise NotImplementedError(f\"Unknown space: `{space}`\")\n@unflatten.register(Box)",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "documentation": {}
    },
    {
        "label": "flatten_space",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "description": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "peekOfCode": "def flatten_space(space: Space) -> Box:\n    \"\"\"Flatten a space into a single ``Box``.\n    This is equivalent to :func:`flatten`, but operates on the space itself. The\n    result always is a `Box` with flat boundaries. The box has exactly\n    :func:`flatdim` dimensions. Flattening a sample of the original space\n    has the same effect as taking a sample of the flattenend space.\n    Raises ``NotImplementedError`` if the space is not defined in\n    ``gym.spaces``.\n    Example::\n        >>> box = Box(0.0, 1.0, shape=(3, 4, 5))",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "description": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "peekOfCode": "T = TypeVar(\"T\")\n@singledispatch\ndef flatten(space: Space[T], x: T) -> np.ndarray:\n    \"\"\"Flatten a data point from a space.\n    This is useful when e.g. points from spaces must be passed to a neural\n    network, which only understands flat arrays of floats.\n    Accepts a space and a point from that space. Always returns a 1D array.\n    Raises ``NotImplementedError`` if the space is not defined in\n    ``gym.spaces``.\n    \"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.spaces.utils",
        "documentation": {}
    },
    {
        "label": "colorize",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.colorize",
        "description": "repos_that_could_be_useful.gym.gym.utils.colorize",
        "peekOfCode": "def colorize(string, color, bold=False, highlight=False):\n    \"\"\"Return string surrounded by appropriate terminal color codes to\n    print colorized text.  Valid colors: gray, red, green, yellow,\n    blue, magenta, cyan, white, crimson\n    \"\"\"\n    attr = []\n    num = color2num[color]\n    if highlight:\n        num += 10\n    attr.append(str(num))",
        "detail": "repos_that_could_be_useful.gym.gym.utils.colorize",
        "documentation": {}
    },
    {
        "label": "color2num",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.colorize",
        "description": "repos_that_could_be_useful.gym.gym.utils.colorize",
        "peekOfCode": "color2num = dict(\n    gray=30,\n    red=31,\n    green=32,\n    yellow=33,\n    blue=34,\n    magenta=35,\n    cyan=36,\n    white=37,\n    crimson=38,",
        "detail": "repos_that_could_be_useful.gym.gym.utils.colorize",
        "documentation": {}
    },
    {
        "label": "check_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.env_checker",
        "description": "repos_that_could_be_useful.gym.gym.utils.env_checker",
        "peekOfCode": "def check_env(env: gym.Env, warn: bool = True, skip_render_check: bool = True) -> None:\n    \"\"\"\n    Check that an environment follows Gym API.\n    This is particularly useful when using a custom environment.\n    Please take a look at https://github.com/openai/gym/blob/master/gym/core.py\n    for more information about the API.\n    It also optionally check that the environment is compatible with Stable-Baselines.\n    :param env: The Gym environment that will be checked\n    :param warn: Whether to output additional warnings\n        mainly related to the interaction with Stable Baselines",
        "detail": "repos_that_could_be_useful.gym.gym.utils.env_checker",
        "documentation": {}
    },
    {
        "label": "EzPickle",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.ezpickle",
        "description": "repos_that_could_be_useful.gym.gym.utils.ezpickle",
        "peekOfCode": "class EzPickle:\n    \"\"\"Objects that are pickled and unpickled via their constructor\n    arguments.\n    Example usage:\n        class Dog(Animal, EzPickle):\n            def __init__(self, furcolor, tailkind=\"bushy\"):\n                Animal.__init__()\n                EzPickle.__init__(furcolor, tailkind)\n                ...\n    When this object is unpickled, a new Dog will be constructed by passing the provided",
        "detail": "repos_that_could_be_useful.gym.gym.utils.ezpickle",
        "documentation": {}
    },
    {
        "label": "MissingKeysToAction",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.play",
        "description": "repos_that_could_be_useful.gym.gym.utils.play",
        "peekOfCode": "class MissingKeysToAction(Exception):\n    \"\"\"Raised when the environment does not have\n    a default keys_to_action mapping\n    \"\"\"\nclass PlayableGame:\n    def __init__(\n        self,\n        env: Env,\n        keys_to_action: Optional[Dict[Tuple[int], int]] = None,\n        zoom: Optional[float] = None,",
        "detail": "repos_that_could_be_useful.gym.gym.utils.play",
        "documentation": {}
    },
    {
        "label": "PlayableGame",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.play",
        "description": "repos_that_could_be_useful.gym.gym.utils.play",
        "peekOfCode": "class PlayableGame:\n    def __init__(\n        self,\n        env: Env,\n        keys_to_action: Optional[Dict[Tuple[int], int]] = None,\n        zoom: Optional[float] = None,\n    ):\n        self.env = env\n        self.relevant_keys = self._get_relevant_keys(keys_to_action)\n        self.video_size = self._get_video_size(zoom)",
        "detail": "repos_that_could_be_useful.gym.gym.utils.play",
        "documentation": {}
    },
    {
        "label": "PlayPlot",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.play",
        "description": "repos_that_could_be_useful.gym.gym.utils.play",
        "peekOfCode": "class PlayPlot:\n    def __init__(self, callback, horizon_timesteps, plot_names):\n        deprecation(\n            \"`PlayPlot` is marked as deprecated and will be removed in the near future.\"\n        )\n        self.data_callback = callback\n        self.horizon_timesteps = horizon_timesteps\n        self.plot_names = plot_names\n        assert plt is not None, \"matplotlib backend failed, plotting will not work\"\n        num_plots = len(self.plot_names)",
        "detail": "repos_that_could_be_useful.gym.gym.utils.play",
        "documentation": {}
    },
    {
        "label": "display_arr",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.play",
        "description": "repos_that_could_be_useful.gym.gym.utils.play",
        "peekOfCode": "def display_arr(\n    screen: Surface, arr: NDArray, video_size: Tuple[int, int], transpose: bool\n):\n    arr_min, arr_max = arr.min(), arr.max()\n    arr = 255.0 * (arr - arr_min) / (arr_max - arr_min)\n    pyg_img = pygame.surfarray.make_surface(arr.swapaxes(0, 1) if transpose else arr)\n    pyg_img = pygame.transform.scale(pyg_img, video_size)\n    screen.blit(pyg_img, (0, 0))\ndef play(\n    env: Env,",
        "detail": "repos_that_could_be_useful.gym.gym.utils.play",
        "documentation": {}
    },
    {
        "label": "play",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.play",
        "description": "repos_that_could_be_useful.gym.gym.utils.play",
        "peekOfCode": "def play(\n    env: Env,\n    transpose: Optional[bool] = True,\n    fps: Optional[int] = 30,\n    zoom: Optional[float] = None,\n    callback: Optional[Callable] = None,\n    keys_to_action: Optional[Dict[Tuple[int], int]] = None,\n    seed: Optional[int] = None,\n):\n    \"\"\"Allows one to play the game using keyboard.",
        "detail": "repos_that_could_be_useful.gym.gym.utils.play",
        "documentation": {}
    },
    {
        "label": "RandomNumberGenerator",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "description": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "peekOfCode": "class RandomNumberGenerator(np.random.Generator):\n    def rand(self, *size):\n        deprecation(\n            \"Function `rng.rand(*size)` is marked as deprecated \"\n            \"and will be removed in the future. \"\n            \"Please use `Generator.random(size)` instead.\"\n        )\n        return self.random(size)\n    random_sample = rand\n    def randn(self, *size):",
        "detail": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "documentation": {}
    },
    {
        "label": "np_random",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "description": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "peekOfCode": "def np_random(seed: Optional[int] = None) -> Tuple[\"RandomNumberGenerator\", Any]:\n    if seed is not None and not (isinstance(seed, int) and 0 <= seed):\n        raise error.Error(f\"Seed must be a non-negative integer or omitted, not {seed}\")\n    seed_seq = np.random.SeedSequence(seed)\n    np_seed = seed_seq.entropy\n    rng = RandomNumberGenerator(np.random.PCG64(seed_seq))\n    return rng, np_seed\n# TODO: Remove this class and make it alias to `Generator` in a future Gym release\n# RandomNumberGenerator = np.random.Generator\nclass RandomNumberGenerator(np.random.Generator):",
        "detail": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "documentation": {}
    },
    {
        "label": "hash_seed",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "description": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "peekOfCode": "def hash_seed(seed: Optional[int] = None, max_bytes: int = 8) -> int:\n    \"\"\"Any given evaluation is likely to have many PRNG's active at\n    once. (Most commonly, because the environment is running in\n    multiple processes.) There's literature indicating that having\n    linear correlations between seeds of multiple PRNG's can correlate\n    the outputs:\n    http://blogs.unity3d.com/2015/01/07/a-primer-on-repeatable-random-numbers/\n    http://stackoverflow.com/questions/1554958/how-different-do-random-seeds-need-to-be\n    http://dl.acm.org/citation.cfm?id=1276928\n    Thus, for sanity we hash the seeds before using them. (This scheme",
        "detail": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "documentation": {}
    },
    {
        "label": "create_seed",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "description": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "peekOfCode": "def create_seed(a: Optional[Union[int, str]] = None, max_bytes: int = 8) -> int:\n    \"\"\"Create a strong random seed. Otherwise, Python 2 would seed using\n    the system time, which might be non-robust especially in the\n    presence of concurrency.\n    Args:\n        a: None seeds from an operating system specific randomness source.\n        max_bytes: Maximum number of bytes to use in the seed.\n    \"\"\"\n    deprecation(\n        \"Function `create_seed(a, max_bytes)` is marked as deprecated and will be removed in the future. \"",
        "detail": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "documentation": {}
    },
    {
        "label": "RNG",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "description": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "peekOfCode": "RNG = RandomNumberGenerator\n# Legacy functions\ndef hash_seed(seed: Optional[int] = None, max_bytes: int = 8) -> int:\n    \"\"\"Any given evaluation is likely to have many PRNG's active at\n    once. (Most commonly, because the environment is running in\n    multiple processes.) There's literature indicating that having\n    linear correlations between seeds of multiple PRNG's can correlate\n    the outputs:\n    http://blogs.unity3d.com/2015/01/07/a-primer-on-repeatable-random-numbers/\n    http://stackoverflow.com/questions/1554958/how-different-do-random-seeds-need-to-be",
        "detail": "repos_that_could_be_useful.gym.gym.utils.seeding",
        "documentation": {}
    },
    {
        "label": "CloudpickleWrapper",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.misc",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.misc",
        "peekOfCode": "class CloudpickleWrapper:\n    def __init__(self, fn):\n        self.fn = fn\n    def __getstate__(self):\n        import cloudpickle\n        return cloudpickle.dumps(self.fn)\n    def __setstate__(self, ob):\n        import pickle\n        self.fn = pickle.loads(ob)\n    def __call__(self):",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.misc",
        "documentation": {}
    },
    {
        "label": "clear_mpi_env_vars",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.misc",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.misc",
        "peekOfCode": "def clear_mpi_env_vars():\n    \"\"\"\n    `from mpi4py import MPI` will call `MPI_Init` by default. If the child\n    process has MPI environment variables, MPI will think that the child process\n    is an MPI process just like the parent and do bad things such as hang.\n    This context manager is a hacky way to clear those environment variables\n    temporarily such as when we are starting multiprocessing Processes.\n    \"\"\"\n    removed_environment = {}\n    for k, v in list(os.environ.items()):",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.misc",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.misc",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.misc",
        "peekOfCode": "__all__ = [\"CloudpickleWrapper\", \"clear_mpi_env_vars\"]\nclass CloudpickleWrapper:\n    def __init__(self, fn):\n        self.fn = fn\n    def __getstate__(self):\n        import cloudpickle\n        return cloudpickle.dumps(self.fn)\n    def __setstate__(self, ob):\n        import pickle\n        self.fn = pickle.loads(ob)",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.misc",
        "documentation": {}
    },
    {
        "label": "concatenate",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.numpy_utils",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.numpy_utils",
        "peekOfCode": "def concatenate(space, items, out):\n    \"\"\"Concatenate multiple samples from space into a single object.\n    Parameters\n    ----------\n    items : iterable of samples of `space`\n        Samples to be concatenated.\n    out : tuple, dict, or `np.ndarray`\n        The output object. This object is a (possibly nested) numpy array.\n    space : `gym.spaces.Space` instance\n        Observation space of a single environment in the vectorized environment.",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.numpy_utils",
        "documentation": {}
    },
    {
        "label": "create_empty_array",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.numpy_utils",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.numpy_utils",
        "peekOfCode": "def create_empty_array(space, n=1, fn=np.zeros):\n    \"\"\"Create an empty (possibly nested) numpy array.\n    Parameters\n    ----------\n    space : `gym.spaces.Space` instance\n        Observation space of a single environment in the vectorized environment.\n    n : int\n        Number of environments in the vectorized environment. If `None`, creates\n        an empty sample from `space`.\n    fn : callable",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.numpy_utils",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.numpy_utils",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.numpy_utils",
        "peekOfCode": "__all__ = [\"concatenate\", \"create_empty_array\"]\n@singledispatch\ndef concatenate(space, items, out):\n    \"\"\"Concatenate multiple samples from space into a single object.\n    Parameters\n    ----------\n    items : iterable of samples of `space`\n        Samples to be concatenated.\n    out : tuple, dict, or `np.ndarray`\n        The output object. This object is a (possibly nested) numpy array.",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.numpy_utils",
        "documentation": {}
    },
    {
        "label": "create_shared_memory",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.shared_memory",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.shared_memory",
        "peekOfCode": "def create_shared_memory(space, n=1, ctx=mp):\n    \"\"\"Create a shared memory object, to be shared across processes. This\n    eventually contains the observations from the vectorized environment.\n    Parameters\n    ----------\n    space : `gym.spaces.Space` instance\n        Observation space of a single environment in the vectorized environment.\n    n : int\n        Number of environments in the vectorized environment (i.e. the number\n        of processes).",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.shared_memory",
        "documentation": {}
    },
    {
        "label": "read_from_shared_memory",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.shared_memory",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.shared_memory",
        "peekOfCode": "def read_from_shared_memory(space, shared_memory, n=1):\n    \"\"\"Read the batch of observations from shared memory as a numpy array.\n    Parameters\n    ----------\n    shared_memory : dict, tuple, or `multiprocessing.Array` instance\n        Shared object across processes. This contains the observations from the\n        vectorized environment. This object is created with `create_shared_memory`.\n    space : `gym.spaces.Space` instance\n        Observation space of a single environment in the vectorized environment.\n    n : int",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.shared_memory",
        "documentation": {}
    },
    {
        "label": "write_to_shared_memory",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.shared_memory",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.shared_memory",
        "peekOfCode": "def write_to_shared_memory(space, index, value, shared_memory):\n    \"\"\"Write the observation of a single environment into shared memory.\n    Parameters\n    ----------\n    index : int\n        Index of the environment (must be in `[0, num_envs)`).\n    value : sample from `space`\n        Observation of the single environment to write to shared memory.\n    shared_memory : dict, tuple, or `multiprocessing.Array` instance\n        Shared object across processes. This contains the observations from the",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.shared_memory",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.shared_memory",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.shared_memory",
        "peekOfCode": "__all__ = [\"create_shared_memory\", \"read_from_shared_memory\", \"write_to_shared_memory\"]\n@singledispatch\ndef create_shared_memory(space, n=1, ctx=mp):\n    \"\"\"Create a shared memory object, to be shared across processes. This\n    eventually contains the observations from the vectorized environment.\n    Parameters\n    ----------\n    space : `gym.spaces.Space` instance\n        Observation space of a single environment in the vectorized environment.\n    n : int",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.shared_memory",
        "documentation": {}
    },
    {
        "label": "batch_space",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.spaces",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.spaces",
        "peekOfCode": "def batch_space(space, n=1):\n    \"\"\"Create a (batched) space, containing multiple copies of a single space.\n    Parameters\n    ----------\n    space : `gym.spaces.Space` instance\n        Space (e.g. the observation space) for a single environment in the\n        vectorized environment.\n    n : int\n        Number of environments in the vectorized environment.\n    Returns",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.spaces",
        "documentation": {}
    },
    {
        "label": "iterate",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.spaces",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.spaces",
        "peekOfCode": "def iterate(space, items):\n    \"\"\"Iterate over the elements of a (batched) space.\n    Parameters\n    ----------\n    space : `gym.spaces.Space` instance\n        Space to which `items` belong to.\n    items : samples of `space`\n        Items to be iterated over.\n    Returns\n    -------",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.spaces",
        "documentation": {}
    },
    {
        "label": "_BaseGymSpaces",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.spaces",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.spaces",
        "peekOfCode": "_BaseGymSpaces = (Box, Discrete, MultiDiscrete, MultiBinary)\n__all__ = [\"_BaseGymSpaces\", \"batch_space\", \"iterate\"]\n@singledispatch\ndef batch_space(space, n=1):\n    \"\"\"Create a (batched) space, containing multiple copies of a single space.\n    Parameters\n    ----------\n    space : `gym.spaces.Space` instance\n        Space (e.g. the observation space) for a single environment in the\n        vectorized environment.",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.spaces",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.utils.spaces",
        "description": "repos_that_could_be_useful.gym.gym.vector.utils.spaces",
        "peekOfCode": "__all__ = [\"_BaseGymSpaces\", \"batch_space\", \"iterate\"]\n@singledispatch\ndef batch_space(space, n=1):\n    \"\"\"Create a (batched) space, containing multiple copies of a single space.\n    Parameters\n    ----------\n    space : `gym.spaces.Space` instance\n        Space (e.g. the observation space) for a single environment in the\n        vectorized environment.\n    n : int",
        "detail": "repos_that_could_be_useful.gym.gym.vector.utils.spaces",
        "documentation": {}
    },
    {
        "label": "AsyncState",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.async_vector_env",
        "description": "repos_that_could_be_useful.gym.gym.vector.async_vector_env",
        "peekOfCode": "class AsyncState(Enum):\n    DEFAULT = \"default\"\n    WAITING_RESET = \"reset\"\n    WAITING_STEP = \"step\"\n    WAITING_CALL = \"call\"\nclass AsyncVectorEnv(VectorEnv):\n    \"\"\"Vectorized environment that runs multiple environments in parallel. It\n    uses `multiprocessing`_ processes, and pipes for communication.\n    Parameters\n    ----------",
        "detail": "repos_that_could_be_useful.gym.gym.vector.async_vector_env",
        "documentation": {}
    },
    {
        "label": "AsyncVectorEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.async_vector_env",
        "description": "repos_that_could_be_useful.gym.gym.vector.async_vector_env",
        "peekOfCode": "class AsyncVectorEnv(VectorEnv):\n    \"\"\"Vectorized environment that runs multiple environments in parallel. It\n    uses `multiprocessing`_ processes, and pipes for communication.\n    Parameters\n    ----------\n    env_fns : iterable of callable\n        Functions that create the environments.\n    observation_space : :class:`gym.spaces.Space`, optional\n        Observation space of a single environment. If ``None``, then the\n        observation space of the first environment is taken.",
        "detail": "repos_that_could_be_useful.gym.gym.vector.async_vector_env",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.async_vector_env",
        "description": "repos_that_could_be_useful.gym.gym.vector.async_vector_env",
        "peekOfCode": "__all__ = [\"AsyncVectorEnv\"]\nclass AsyncState(Enum):\n    DEFAULT = \"default\"\n    WAITING_RESET = \"reset\"\n    WAITING_STEP = \"step\"\n    WAITING_CALL = \"call\"\nclass AsyncVectorEnv(VectorEnv):\n    \"\"\"Vectorized environment that runs multiple environments in parallel. It\n    uses `multiprocessing`_ processes, and pipes for communication.\n    Parameters",
        "detail": "repos_that_could_be_useful.gym.gym.vector.async_vector_env",
        "documentation": {}
    },
    {
        "label": "SyncVectorEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.sync_vector_env",
        "description": "repos_that_could_be_useful.gym.gym.vector.sync_vector_env",
        "peekOfCode": "class SyncVectorEnv(VectorEnv):\n    \"\"\"Vectorized environment that serially runs multiple environments.\n    Parameters\n    ----------\n    env_fns : iterable of callable\n        Functions that create the environments.\n    observation_space : :class:`gym.spaces.Space`, optional\n        Observation space of a single environment. If ``None``, then the\n        observation space of the first environment is taken.\n    action_space : :class:`gym.spaces.Space`, optional",
        "detail": "repos_that_could_be_useful.gym.gym.vector.sync_vector_env",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.sync_vector_env",
        "description": "repos_that_could_be_useful.gym.gym.vector.sync_vector_env",
        "peekOfCode": "__all__ = [\"SyncVectorEnv\"]\nclass SyncVectorEnv(VectorEnv):\n    \"\"\"Vectorized environment that serially runs multiple environments.\n    Parameters\n    ----------\n    env_fns : iterable of callable\n        Functions that create the environments.\n    observation_space : :class:`gym.spaces.Space`, optional\n        Observation space of a single environment. If ``None``, then the\n        observation space of the first environment is taken.",
        "detail": "repos_that_could_be_useful.gym.gym.vector.sync_vector_env",
        "documentation": {}
    },
    {
        "label": "VectorEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.vector_env",
        "description": "repos_that_could_be_useful.gym.gym.vector.vector_env",
        "peekOfCode": "class VectorEnv(gym.Env):\n    r\"\"\"Base class for vectorized environments. Runs multiple independent copies of the\n    same environment in parallel. This is not the same as 1 environment that has multiple\n    sub components, but it is many copies of the same base env.\n    Each observation returned from vectorized environment is a batch of observations\n    for each parallel environment. And :meth:`step` is also expected to receive a batch of\n    actions for each parallel environment.\n    .. note::\n        All parallel environments should share the identical observation and action spaces.\n        In other words, a vector of multiple different environments is not supported.",
        "detail": "repos_that_could_be_useful.gym.gym.vector.vector_env",
        "documentation": {}
    },
    {
        "label": "VectorEnvWrapper",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.vector_env",
        "description": "repos_that_could_be_useful.gym.gym.vector.vector_env",
        "peekOfCode": "class VectorEnvWrapper(VectorEnv):\n    r\"\"\"Wraps the vectorized environment to allow a modular transformation.\n    This class is the base class for all wrappers for vectorized environments. The subclass\n    could override some methods to change the behavior of the original vectorized environment\n    without touching the original code.\n    .. note::\n        Don't forget to call ``super().__init__(env)`` if the subclass overrides :meth:`__init__`.\n    \"\"\"\n    def __init__(self, env):\n        assert isinstance(env, VectorEnv)",
        "detail": "repos_that_could_be_useful.gym.gym.vector.vector_env",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.vector.vector_env",
        "description": "repos_that_could_be_useful.gym.gym.vector.vector_env",
        "peekOfCode": "__all__ = [\"VectorEnv\"]\nclass VectorEnv(gym.Env):\n    r\"\"\"Base class for vectorized environments. Runs multiple independent copies of the\n    same environment in parallel. This is not the same as 1 environment that has multiple\n    sub components, but it is many copies of the same base env.\n    Each observation returned from vectorized environment is a batch of observations\n    for each parallel environment. And :meth:`step` is also expected to receive a batch of\n    actions for each parallel environment.\n    .. note::\n        All parallel environments should share the identical observation and action spaces.",
        "detail": "repos_that_could_be_useful.gym.gym.vector.vector_env",
        "documentation": {}
    },
    {
        "label": "VideoRecorder",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.monitoring.video_recorder",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.monitoring.video_recorder",
        "peekOfCode": "class VideoRecorder:\n    \"\"\"VideoRecorder renders a nice movie of a rollout, frame by frame. It\n    comes with an `enabled` option so you can still use the same code\n    on episodes where you don't want to record video.\n    Note:\n        You are responsible for calling `close` on a created\n        VideoRecorder, or else you may leak an encoder process.\n    Args:\n        env (Env): Environment to take video of.\n        path (Optional[str]): Path to the video file; will be randomly chosen if omitted.",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.monitoring.video_recorder",
        "documentation": {}
    },
    {
        "label": "TextEncoder",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.monitoring.video_recorder",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.monitoring.video_recorder",
        "peekOfCode": "class TextEncoder:\n    \"\"\"Store a moving picture made out of ANSI frames. Format adapted from\n    https://github.com/asciinema/asciinema/blob/master/doc/asciicast-v1.md\"\"\"\n    def __init__(self, output_path, frames_per_sec):\n        self.output_path = output_path\n        self.frames_per_sec = frames_per_sec\n        self.frames = []\n    def capture_frame(self, frame):\n        string = None\n        if isinstance(frame, str):",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.monitoring.video_recorder",
        "documentation": {}
    },
    {
        "label": "ImageEncoder",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.monitoring.video_recorder",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.monitoring.video_recorder",
        "peekOfCode": "class ImageEncoder:\n    def __init__(self, output_path, frame_shape, frames_per_sec, output_frames_per_sec):\n        self.proc = None\n        self.output_path = output_path\n        # Frame shape should be lines-first, so w and h are swapped\n        h, w, pixfmt = frame_shape\n        if pixfmt != 3 and pixfmt != 4:\n            raise error.InvalidFrame(\n                \"Your frame has shape {}, but we require (w,h,3) or (w,h,4), i.e., RGB values for a w-by-h image, with an optional alpha channel.\".format(\n                    frame_shape",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.monitoring.video_recorder",
        "documentation": {}
    },
    {
        "label": "touch",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.monitoring.video_recorder",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.monitoring.video_recorder",
        "peekOfCode": "def touch(path):\n    open(path, \"a\").close()\nclass VideoRecorder:\n    \"\"\"VideoRecorder renders a nice movie of a rollout, frame by frame. It\n    comes with an `enabled` option so you can still use the same code\n    on episodes where you don't want to record video.\n    Note:\n        You are responsible for calling `close` on a created\n        VideoRecorder, or else you may leak an encoder process.\n    Args:",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.monitoring.video_recorder",
        "documentation": {}
    },
    {
        "label": "AtariPreprocessing",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.atari_preprocessing",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.atari_preprocessing",
        "peekOfCode": "class AtariPreprocessing(gym.Wrapper):\n    r\"\"\"Atari 2600 preprocessings.\n    This class follows the guidelines in\n    Machado et al. (2018), \"Revisiting the Arcade Learning Environment:\n    Evaluation Protocols and Open Problems for General Agents\".\n    Specifically:\n    * NoopReset: obtain initial state by taking random number of no-ops on reset.\n    * Frame skipping: 4 by default\n    * Max-pooling: most recent two observations\n    * Termination signal when a life is lost: turned off by default. Not recommended by Machado et al. (2018).",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.atari_preprocessing",
        "documentation": {}
    },
    {
        "label": "AutoResetWrapper",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.autoreset",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.autoreset",
        "peekOfCode": "class AutoResetWrapper(gym.Wrapper):\n    \"\"\"\n    A class for providing an automatic reset functionality\n    for gym environments when calling self.step().\n    When calling step causes self.env.step() to return done,\n    self.env.reset() is called,\n    and the return format of self.step() is as follows:\n    new_obs, terminal_reward, terminal_done, info\n    new_obs is the first observation after calling self.env.reset(),\n    terminal_reward is the reward after calling self.env.step(),",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.autoreset",
        "documentation": {}
    },
    {
        "label": "ClipAction",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.clip_action",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.clip_action",
        "peekOfCode": "class ClipAction(ActionWrapper):\n    r\"\"\"Clip the continuous action within the valid bound.\"\"\"\n    def __init__(self, env):\n        assert isinstance(env.action_space, Box)\n        super().__init__(env)\n    def action(self, action):\n        return np.clip(action, self.action_space.low, self.action_space.high)",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.clip_action",
        "documentation": {}
    },
    {
        "label": "FilterObservation",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.filter_observation",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.filter_observation",
        "peekOfCode": "class FilterObservation(ObservationWrapper):\n    \"\"\"Filter dictionary observations by their keys.\n    Args:\n        env: The environment to wrap.\n        filter_keys: List of keys to be included in the observations.\n    Raises:\n        ValueError: If observation keys in not instance of None or\n            iterable.\n        ValueError: If any of the `filter_keys` are not included in\n            the original `env`'s observation space",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.filter_observation",
        "documentation": {}
    },
    {
        "label": "FlattenObservation",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.flatten_observation",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.flatten_observation",
        "peekOfCode": "class FlattenObservation(ObservationWrapper):\n    r\"\"\"Observation wrapper that flattens the observation.\"\"\"\n    def __init__(self, env):\n        super().__init__(env)\n        self.observation_space = spaces.flatten_space(env.observation_space)\n    def observation(self, observation):\n        return spaces.flatten(self.env.observation_space, observation)",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.flatten_observation",
        "documentation": {}
    },
    {
        "label": "LazyFrames",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.frame_stack",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.frame_stack",
        "peekOfCode": "class LazyFrames:\n    r\"\"\"Ensures common frames are only stored once to optimize memory use.\n    To further reduce the memory use, it is optionally to turn on lz4 to\n    compress the observations.\n    .. note::\n        This object should only be converted to numpy array just before forward pass.\n    Args:\n        lz4_compress (bool): use lz4 to compress the frames internally\n    \"\"\"\n    __slots__ = (\"frame_shape\", \"dtype\", \"shape\", \"lz4_compress\", \"_frames\")",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.frame_stack",
        "documentation": {}
    },
    {
        "label": "FrameStack",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.frame_stack",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.frame_stack",
        "peekOfCode": "class FrameStack(ObservationWrapper):\n    r\"\"\"Observation wrapper that stacks the observations in a rolling manner.\n    For example, if the number of stacks is 4, then the returned observation contains\n    the most recent 4 observations. For environment 'Pendulum-v1', the original observation\n    is an array with shape [3], so if we stack 4 observations, the processed observation\n    has shape [4, 3].\n    .. note::\n        To be memory efficient, the stacked observations are wrapped by :class:`LazyFrame`.\n    .. note::\n        The observation space must be `Box` type. If one uses `Dict`",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.frame_stack",
        "documentation": {}
    },
    {
        "label": "GrayScaleObservation",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.gray_scale_observation",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.gray_scale_observation",
        "peekOfCode": "class GrayScaleObservation(ObservationWrapper):\n    \"\"\"Convert the image observation from RGB to gray scale.\n    Args:\n        keep_dim (bool): If `True`, a singleton dimension will be added, i.e. observations are of the shape AxBx1. Otherwise they are of shape AxB\n    \"\"\"\n    def __init__(self, env, keep_dim: bool = False):\n        super().__init__(env)\n        self.keep_dim = keep_dim\n        assert (\n            len(env.observation_space.shape) == 3",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.gray_scale_observation",
        "documentation": {}
    },
    {
        "label": "RunningMeanStd",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.normalize",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.normalize",
        "peekOfCode": "class RunningMeanStd:\n    # https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Parallel_algorithm\n    def __init__(self, epsilon=1e-4, shape=()):\n        self.mean = np.zeros(shape, \"float64\")\n        self.var = np.ones(shape, \"float64\")\n        self.count = epsilon\n    def update(self, x):\n        batch_mean = np.mean(x, axis=0)\n        batch_var = np.var(x, axis=0)\n        batch_count = x.shape[0]",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.normalize",
        "documentation": {}
    },
    {
        "label": "NormalizeObservation",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.normalize",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.normalize",
        "peekOfCode": "class NormalizeObservation(gym.core.Wrapper):\n    \"\"\"This wrapper will normalize observations s.t. each coordinate is centered with unit variance.\n    .. note ::\n        The normalization depends on past trajectories and observations will not be normalized correctly if the wrapper was\n        newly instantiated or the policy was changed recently.\n    Args:\n         epsilon: A stability parameter that is used when scaling the observations.\n    \"\"\"\n    def __init__(\n        self,",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.normalize",
        "documentation": {}
    },
    {
        "label": "NormalizeReward",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.normalize",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.normalize",
        "peekOfCode": "class NormalizeReward(gym.core.Wrapper):\n    \"\"\"This wrapper will normalize immediate rewards s.t. their exponential moving average has a fixed variance.\n    The exponential moving average will have variance (1 - `gamma`)**2.\n    .. note ::\n        The scaling depends on past trajectories and rewards will not be scaled correctly if the wrapper was newly\n        instantiated or the policy was changed recently.\n    Args:\n        epsilon (float): A stability parameter\n        gamma (float): The discount factor that is used in the exponential moving average.\n    \"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.normalize",
        "documentation": {}
    },
    {
        "label": "update_mean_var_count_from_moments",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.normalize",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.normalize",
        "peekOfCode": "def update_mean_var_count_from_moments(\n    mean, var, count, batch_mean, batch_var, batch_count\n):\n    delta = batch_mean - mean\n    tot_count = count + batch_count\n    new_mean = mean + delta * batch_count / tot_count\n    m_a = var * count\n    m_b = batch_var * batch_count\n    M2 = m_a + m_b + np.square(delta) * count * batch_count / tot_count\n    new_var = M2 / tot_count",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.normalize",
        "documentation": {}
    },
    {
        "label": "OrderEnforcing",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.order_enforcing",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.order_enforcing",
        "peekOfCode": "class OrderEnforcing(gym.Wrapper):\n    \"\"\"This will produce an error if `step` is called before an initial `reset`\"\"\"\n    def __init__(self, env):\n        super().__init__(env)\n        self._has_reset = False\n    def step(self, action):\n        assert self._has_reset, \"Cannot call env.step() before calling reset()\"\n        observation, reward, done, info = self.env.step(action)\n        return observation, reward, done, info\n    def reset(self, **kwargs):",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.order_enforcing",
        "documentation": {}
    },
    {
        "label": "PixelObservationWrapper",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.pixel_observation",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.pixel_observation",
        "peekOfCode": "class PixelObservationWrapper(ObservationWrapper):\n    \"\"\"Augment observations by pixel values.\"\"\"\n    def __init__(\n        self, env, pixels_only=True, render_kwargs=None, pixel_keys=(\"pixels\",)\n    ):\n        \"\"\"Initializes a new pixel Wrapper.\n        Args:\n            env: The environment to wrap.\n            pixels_only: If `True` (default), the original observation returned\n                by the wrapped environment will be discarded, and a dictionary",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.pixel_observation",
        "documentation": {}
    },
    {
        "label": "STATE_KEY",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.pixel_observation",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.pixel_observation",
        "peekOfCode": "STATE_KEY = \"state\"\nclass PixelObservationWrapper(ObservationWrapper):\n    \"\"\"Augment observations by pixel values.\"\"\"\n    def __init__(\n        self, env, pixels_only=True, render_kwargs=None, pixel_keys=(\"pixels\",)\n    ):\n        \"\"\"Initializes a new pixel Wrapper.\n        Args:\n            env: The environment to wrap.\n            pixels_only: If `True` (default), the original observation returned",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.pixel_observation",
        "documentation": {}
    },
    {
        "label": "RecordEpisodeStatistics",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.record_episode_statistics",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.record_episode_statistics",
        "peekOfCode": "class RecordEpisodeStatistics(gym.Wrapper):\n    \"\"\"This wrapper will keep track of cumulative rewards and episode lengths.\n    At the end of an episode, the statistics of the episode will be added to `info`. After the completion\n    of an episode, `info` will look like this:\n    ```\n    info = {\n        ...\n        \"episode\": {\n            \"r\": <cumulative reward>,\n            \"l\": <episode length>,",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.record_episode_statistics",
        "documentation": {}
    },
    {
        "label": "RecordVideo",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.record_video",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.record_video",
        "peekOfCode": "class RecordVideo(gym.Wrapper):\n    \"\"\"This wrapper records videos of rollouts.\n    Usually, you only want to record episodes intermittently, say every hundreth episode.\n    To do this, you can specify **either** `episode_trigger` **or** `step_trigger` (not both).\n    They should be functions returning a boolean that indicates whether a recording should be started at the\n    current episode or step, respectively.\n    If neither `episode_trigger` nor `step_trigger` is passed, a default `episode_trigger` will be employed.\n    By default, the recording will be stopped once a `done` signal has been emitted by the environment. However, you can\n    also create recordings of fixed length (possibly spanning several episodes) by passing a strictly positive value for\n    `video_length`.",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.record_video",
        "documentation": {}
    },
    {
        "label": "capped_cubic_video_schedule",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.record_video",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.record_video",
        "peekOfCode": "def capped_cubic_video_schedule(episode_id):\n    if episode_id < 1000:\n        return int(round(episode_id ** (1.0 / 3))) ** 3 == episode_id\n    else:\n        return episode_id % 1000 == 0\nclass RecordVideo(gym.Wrapper):\n    \"\"\"This wrapper records videos of rollouts.\n    Usually, you only want to record episodes intermittently, say every hundreth episode.\n    To do this, you can specify **either** `episode_trigger` **or** `step_trigger` (not both).\n    They should be functions returning a boolean that indicates whether a recording should be started at the",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.record_video",
        "documentation": {}
    },
    {
        "label": "RescaleAction",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.rescale_action",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.rescale_action",
        "peekOfCode": "class RescaleAction(gym.ActionWrapper):\n    r\"\"\"Rescales the continuous action space of the environment to a range [min_action, max_action].\n    The wrapped environment `env` must have an action space of type `spaces.Box`. If `min_action`\n    or `max_action` are numpy arrays, the shape must match the shape of the environment's action space.\n    Example::\n        >>> RescaleAction(env, min_action, max_action).action_space == Box(min_action, max_action)\n        True\n    Args:\n        env: The environment that will be wrapped\n        min_action (Union[np.array, float]): The lower bound of the new action space. This may be a numpy array or a scalar.",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.rescale_action",
        "documentation": {}
    },
    {
        "label": "ResizeObservation",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.resize_observation",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.resize_observation",
        "peekOfCode": "class ResizeObservation(ObservationWrapper):\n    \"\"\"Resize the image observation.\n    This wrapper works on environments with image observations (or more generally observations of shape AxBxC) and resizes\n    the observation to the shape given by the 2-tuple `shape`. The argument `shape` may also be an integer. In that case, the\n    observation is scaled to a square of side-length `shape`.\n    Args:\n        shape (Union[tuple, int]): The dimensions of the resized observation\n    \"\"\"\n    def __init__(self, env, shape: Union[tuple, int]):\n        super().__init__(env)",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.resize_observation",
        "documentation": {}
    },
    {
        "label": "TimeAwareObservation",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.time_aware_observation",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.time_aware_observation",
        "peekOfCode": "class TimeAwareObservation(ObservationWrapper):\n    r\"\"\"Augment the observation with current time step in the trajectory.\n    .. note::\n        Currently it only works with one-dimensional observation space. It doesn't\n        support pixel observation space yet.\n    \"\"\"\n    def __init__(self, env):\n        super().__init__(env)\n        assert isinstance(env.observation_space, Box)\n        assert env.observation_space.dtype == np.float32",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.time_aware_observation",
        "documentation": {}
    },
    {
        "label": "TimeLimit",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.time_limit",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.time_limit",
        "peekOfCode": "class TimeLimit(gym.Wrapper):\n    \"\"\"This wrapper will issue a `done` signal if a maximum number of timesteps is exceeded.\n    Oftentimes, it is **very** important to distinguish `done` signals that were produced by the\n    `TimeLimit` wrapper (truncations) and those that originate from the underlying environment (terminations).\n    This can be done by looking at the `info` that is returned when `done` signal was issued.\n    The done-signal originates from the time limit (i.e. it signifies a *truncation*) if and only if\n    the key `\"TimeLimit.truncated\"` exists in `info` and the corresponding value is `True`.\n    Args:\n        env: The environment that will be wrapped\n        max_episode_steps (Optional[int]): The maximum number of steps until a done-signal occurs. If it is `None`, the value from `env.spec` (if available) will be used",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.time_limit",
        "documentation": {}
    },
    {
        "label": "TransformObservation",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.transform_observation",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.transform_observation",
        "peekOfCode": "class TransformObservation(ObservationWrapper):\n    r\"\"\"Transform the observation via an arbitrary function.\n    Example::\n        >>> import gym\n        >>> env = gym.make('CartPole-v1')\n        >>> env = TransformObservation(env, lambda obs: obs + 0.1*np.random.randn(*obs.shape))\n        >>> env.reset()\n        array([-0.08319338,  0.04635121, -0.07394746,  0.20877492])\n    Args:\n        env (Env): environment",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.transform_observation",
        "documentation": {}
    },
    {
        "label": "TransformReward",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.wrappers.transform_reward",
        "description": "repos_that_could_be_useful.gym.gym.wrappers.transform_reward",
        "peekOfCode": "class TransformReward(RewardWrapper):\n    r\"\"\"Transform the reward via an arbitrary function.\n    Example::\n        >>> import gym\n        >>> env = gym.make('CartPole-v1')\n        >>> env = TransformReward(env, lambda r: 0.01*r)\n        >>> env.reset()\n        >>> observation, reward, done, info = env.step(env.action_space.sample())\n        >>> reward\n        0.01",
        "detail": "repos_that_could_be_useful.gym.gym.wrappers.transform_reward",
        "documentation": {}
    },
    {
        "label": "Env",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.core",
        "description": "repos_that_could_be_useful.gym.gym.core",
        "peekOfCode": "class Env(Generic[ObsType, ActType]):\n    r\"\"\"The main OpenAI Gym class.\n    It encapsulates an environment with arbitrary behind-the-scenes dynamics.\n    An environment can be partially or fully observed.\n    The main API methods that users of this class need to know are:\n    - :meth:`step` - Takes a step in the environment using an action returning the next observation, reward,\n      if the environment terminated and more information.\n    - :meth:`reset` - Resets the environment to an initial state, returning the initial observation.\n    - :meth:`render` - Renders the environment observation with modes depending on the output\n    - :meth:`close` - Closes the environment, important for rendering where pygame is imported",
        "detail": "repos_that_could_be_useful.gym.gym.core",
        "documentation": {}
    },
    {
        "label": "Wrapper",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.core",
        "description": "repos_that_could_be_useful.gym.gym.core",
        "peekOfCode": "class Wrapper(Env[ObsType, ActType]):\n    \"\"\"Wraps an environment to allow a modular transformation of the :meth:`step` and :meth:`reset` methods.\n    This class is the base class for all wrappers. The subclass could override\n    some methods to change the behavior of the original environment without touching the\n    original code.\n    Note:\n        Don't forget to call ``super().__init__(env)`` if the subclass overrides :meth:`__init__`.\n    \"\"\"\n    def __init__(self, env: Env):\n        \"\"\"Wraps an environment to allow a modular transformation of the :meth:`step` and :meth:`reset` methods.",
        "detail": "repos_that_could_be_useful.gym.gym.core",
        "documentation": {}
    },
    {
        "label": "ObservationWrapper",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.core",
        "description": "repos_that_could_be_useful.gym.gym.core",
        "peekOfCode": "class ObservationWrapper(Wrapper):\n    \"\"\"A wrapper that can modify observations using :meth:`observation` for :meth:`reset` and :meth:`step`.\"\"\"\n    def reset(self, **kwargs):\n        \"\"\"Resets the environment, returning a modified observation using :meth:`self.observation`.\"\"\"\n        if kwargs.get(\"return_info\", False):\n            obs, info = self.env.reset(**kwargs)\n            return self.observation(obs), info\n        else:\n            return self.observation(self.env.reset(**kwargs))\n    def step(self, action):",
        "detail": "repos_that_could_be_useful.gym.gym.core",
        "documentation": {}
    },
    {
        "label": "RewardWrapper",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.core",
        "description": "repos_that_could_be_useful.gym.gym.core",
        "peekOfCode": "class RewardWrapper(Wrapper):\n    \"\"\"A wrapper that can modify the returning reward from a step.\"\"\"\n    def step(self, action):\n        \"\"\"Modifies the reward using :meth:`self.reward` after the environment :meth:`env.step`.\"\"\"\n        observation, reward, done, info = self.env.step(action)\n        return observation, self.reward(reward), done, info\n    @abstractmethod\n    def reward(self, reward):\n        \"\"\"Returns a modified ``reward``.\"\"\"\n        raise NotImplementedError",
        "detail": "repos_that_could_be_useful.gym.gym.core",
        "documentation": {}
    },
    {
        "label": "ActionWrapper",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.core",
        "description": "repos_that_could_be_useful.gym.gym.core",
        "peekOfCode": "class ActionWrapper(Wrapper):\n    \"\"\"A wrapper that can modify the action before :meth:`env.step`.\"\"\"\n    def step(self, action):\n        \"\"\"Runs the environment :meth:`env.step` using the modified ``action`` from :meth:`self.action`.\"\"\"\n        return self.env.step(self.action(action))\n    @abstractmethod\n    def action(self, action):\n        \"\"\"Returns a modified action before :meth:`env.step` is called.\"\"\"\n        raise NotImplementedError\n    @abstractmethod",
        "detail": "repos_that_could_be_useful.gym.gym.core",
        "documentation": {}
    },
    {
        "label": "ObsType",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.core",
        "description": "repos_that_could_be_useful.gym.gym.core",
        "peekOfCode": "ObsType = TypeVar(\"ObsType\")\nActType = TypeVar(\"ActType\")\nclass Env(Generic[ObsType, ActType]):\n    r\"\"\"The main OpenAI Gym class.\n    It encapsulates an environment with arbitrary behind-the-scenes dynamics.\n    An environment can be partially or fully observed.\n    The main API methods that users of this class need to know are:\n    - :meth:`step` - Takes a step in the environment using an action returning the next observation, reward,\n      if the environment terminated and more information.\n    - :meth:`reset` - Resets the environment to an initial state, returning the initial observation.",
        "detail": "repos_that_could_be_useful.gym.gym.core",
        "documentation": {}
    },
    {
        "label": "ActType",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.core",
        "description": "repos_that_could_be_useful.gym.gym.core",
        "peekOfCode": "ActType = TypeVar(\"ActType\")\nclass Env(Generic[ObsType, ActType]):\n    r\"\"\"The main OpenAI Gym class.\n    It encapsulates an environment with arbitrary behind-the-scenes dynamics.\n    An environment can be partially or fully observed.\n    The main API methods that users of this class need to know are:\n    - :meth:`step` - Takes a step in the environment using an action returning the next observation, reward,\n      if the environment terminated and more information.\n    - :meth:`reset` - Resets the environment to an initial state, returning the initial observation.\n    - :meth:`render` - Renders the environment observation with modes depending on the output",
        "detail": "repos_that_could_be_useful.gym.gym.core",
        "documentation": {}
    },
    {
        "label": "Error",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class Error(Exception):\n    \"\"\"Error superclass.\"\"\"\n# Local errors\nclass Unregistered(Error):\n    \"\"\"Raised when the user requests an item from the registry that does not actually exist.\"\"\"\nclass UnregisteredEnv(Unregistered):\n    \"\"\"Raised when the user requests an env from the registry that does not actually exist.\"\"\"\nclass NamespaceNotFound(UnregisteredEnv):\n    \"\"\"Raised when the user requests an env from the registry where the namespace doesn't exist.\"\"\"\nclass NameNotFound(UnregisteredEnv):",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "Unregistered",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class Unregistered(Error):\n    \"\"\"Raised when the user requests an item from the registry that does not actually exist.\"\"\"\nclass UnregisteredEnv(Unregistered):\n    \"\"\"Raised when the user requests an env from the registry that does not actually exist.\"\"\"\nclass NamespaceNotFound(UnregisteredEnv):\n    \"\"\"Raised when the user requests an env from the registry where the namespace doesn't exist.\"\"\"\nclass NameNotFound(UnregisteredEnv):\n    \"\"\"Raised when the user requests an env from the registry where the name doesn't exist.\"\"\"\nclass VersionNotFound(UnregisteredEnv):\n    \"\"\"Raised when the user requests an env from the registry where the version doesn't exist.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "UnregisteredEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class UnregisteredEnv(Unregistered):\n    \"\"\"Raised when the user requests an env from the registry that does not actually exist.\"\"\"\nclass NamespaceNotFound(UnregisteredEnv):\n    \"\"\"Raised when the user requests an env from the registry where the namespace doesn't exist.\"\"\"\nclass NameNotFound(UnregisteredEnv):\n    \"\"\"Raised when the user requests an env from the registry where the name doesn't exist.\"\"\"\nclass VersionNotFound(UnregisteredEnv):\n    \"\"\"Raised when the user requests an env from the registry where the version doesn't exist.\"\"\"\nclass UnregisteredBenchmark(Unregistered):\n    \"\"\"Raised when the user requests an env from the registry that does not actually exist.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "NamespaceNotFound",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class NamespaceNotFound(UnregisteredEnv):\n    \"\"\"Raised when the user requests an env from the registry where the namespace doesn't exist.\"\"\"\nclass NameNotFound(UnregisteredEnv):\n    \"\"\"Raised when the user requests an env from the registry where the name doesn't exist.\"\"\"\nclass VersionNotFound(UnregisteredEnv):\n    \"\"\"Raised when the user requests an env from the registry where the version doesn't exist.\"\"\"\nclass UnregisteredBenchmark(Unregistered):\n    \"\"\"Raised when the user requests an env from the registry that does not actually exist.\"\"\"\nclass DeprecatedEnv(Error):\n    \"\"\"Raised when the user requests an env from the registry with an older version number than the latest env with the same name.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "NameNotFound",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class NameNotFound(UnregisteredEnv):\n    \"\"\"Raised when the user requests an env from the registry where the name doesn't exist.\"\"\"\nclass VersionNotFound(UnregisteredEnv):\n    \"\"\"Raised when the user requests an env from the registry where the version doesn't exist.\"\"\"\nclass UnregisteredBenchmark(Unregistered):\n    \"\"\"Raised when the user requests an env from the registry that does not actually exist.\"\"\"\nclass DeprecatedEnv(Error):\n    \"\"\"Raised when the user requests an env from the registry with an older version number than the latest env with the same name.\"\"\"\nclass RegistrationError(Error):\n    \"\"\"Raised when the user attempts to register an invalid env. For example, an unversioned env when a versioned env exists.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "VersionNotFound",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class VersionNotFound(UnregisteredEnv):\n    \"\"\"Raised when the user requests an env from the registry where the version doesn't exist.\"\"\"\nclass UnregisteredBenchmark(Unregistered):\n    \"\"\"Raised when the user requests an env from the registry that does not actually exist.\"\"\"\nclass DeprecatedEnv(Error):\n    \"\"\"Raised when the user requests an env from the registry with an older version number than the latest env with the same name.\"\"\"\nclass RegistrationError(Error):\n    \"\"\"Raised when the user attempts to register an invalid env. For example, an unversioned env when a versioned env exists.\"\"\"\nclass UnseedableEnv(Error):\n    \"\"\"Raised when the user tries to seed an env that does not support seeding.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "UnregisteredBenchmark",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class UnregisteredBenchmark(Unregistered):\n    \"\"\"Raised when the user requests an env from the registry that does not actually exist.\"\"\"\nclass DeprecatedEnv(Error):\n    \"\"\"Raised when the user requests an env from the registry with an older version number than the latest env with the same name.\"\"\"\nclass RegistrationError(Error):\n    \"\"\"Raised when the user attempts to register an invalid env. For example, an unversioned env when a versioned env exists.\"\"\"\nclass UnseedableEnv(Error):\n    \"\"\"Raised when the user tries to seed an env that does not support seeding.\"\"\"\nclass DependencyNotInstalled(Error):\n    \"\"\"Raised when the user has not installed a dependency.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "DeprecatedEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class DeprecatedEnv(Error):\n    \"\"\"Raised when the user requests an env from the registry with an older version number than the latest env with the same name.\"\"\"\nclass RegistrationError(Error):\n    \"\"\"Raised when the user attempts to register an invalid env. For example, an unversioned env when a versioned env exists.\"\"\"\nclass UnseedableEnv(Error):\n    \"\"\"Raised when the user tries to seed an env that does not support seeding.\"\"\"\nclass DependencyNotInstalled(Error):\n    \"\"\"Raised when the user has not installed a dependency.\"\"\"\nclass UnsupportedMode(Error):\n    \"\"\"Raised when the user requests a rendering mode not supported by the environment.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "RegistrationError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class RegistrationError(Error):\n    \"\"\"Raised when the user attempts to register an invalid env. For example, an unversioned env when a versioned env exists.\"\"\"\nclass UnseedableEnv(Error):\n    \"\"\"Raised when the user tries to seed an env that does not support seeding.\"\"\"\nclass DependencyNotInstalled(Error):\n    \"\"\"Raised when the user has not installed a dependency.\"\"\"\nclass UnsupportedMode(Error):\n    \"\"\"Raised when the user requests a rendering mode not supported by the environment.\"\"\"\nclass ResetNeeded(Error):\n    \"\"\"When the order enforcing is violated, i.e. step or render is called before reset.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "UnseedableEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class UnseedableEnv(Error):\n    \"\"\"Raised when the user tries to seed an env that does not support seeding.\"\"\"\nclass DependencyNotInstalled(Error):\n    \"\"\"Raised when the user has not installed a dependency.\"\"\"\nclass UnsupportedMode(Error):\n    \"\"\"Raised when the user requests a rendering mode not supported by the environment.\"\"\"\nclass ResetNeeded(Error):\n    \"\"\"When the order enforcing is violated, i.e. step or render is called before reset.\"\"\"\nclass ResetNotAllowed(Error):\n    \"\"\"When the monitor is active, raised when the user tries to step an environment that's not yet done.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "DependencyNotInstalled",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class DependencyNotInstalled(Error):\n    \"\"\"Raised when the user has not installed a dependency.\"\"\"\nclass UnsupportedMode(Error):\n    \"\"\"Raised when the user requests a rendering mode not supported by the environment.\"\"\"\nclass ResetNeeded(Error):\n    \"\"\"When the order enforcing is violated, i.e. step or render is called before reset.\"\"\"\nclass ResetNotAllowed(Error):\n    \"\"\"When the monitor is active, raised when the user tries to step an environment that's not yet done.\"\"\"\nclass InvalidAction(Error):\n    \"\"\"Raised when the user performs an action not contained within the action space.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "UnsupportedMode",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class UnsupportedMode(Error):\n    \"\"\"Raised when the user requests a rendering mode not supported by the environment.\"\"\"\nclass ResetNeeded(Error):\n    \"\"\"When the order enforcing is violated, i.e. step or render is called before reset.\"\"\"\nclass ResetNotAllowed(Error):\n    \"\"\"When the monitor is active, raised when the user tries to step an environment that's not yet done.\"\"\"\nclass InvalidAction(Error):\n    \"\"\"Raised when the user performs an action not contained within the action space.\"\"\"\n# API errors\nclass APIError(Error):",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "ResetNeeded",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class ResetNeeded(Error):\n    \"\"\"When the order enforcing is violated, i.e. step or render is called before reset.\"\"\"\nclass ResetNotAllowed(Error):\n    \"\"\"When the monitor is active, raised when the user tries to step an environment that's not yet done.\"\"\"\nclass InvalidAction(Error):\n    \"\"\"Raised when the user performs an action not contained within the action space.\"\"\"\n# API errors\nclass APIError(Error):\n    \"\"\"Deprecated, to be removed at gym 1.0.\"\"\"\n    def __init__(",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "ResetNotAllowed",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class ResetNotAllowed(Error):\n    \"\"\"When the monitor is active, raised when the user tries to step an environment that's not yet done.\"\"\"\nclass InvalidAction(Error):\n    \"\"\"Raised when the user performs an action not contained within the action space.\"\"\"\n# API errors\nclass APIError(Error):\n    \"\"\"Deprecated, to be removed at gym 1.0.\"\"\"\n    def __init__(\n        self,\n        message=None,",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "InvalidAction",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class InvalidAction(Error):\n    \"\"\"Raised when the user performs an action not contained within the action space.\"\"\"\n# API errors\nclass APIError(Error):\n    \"\"\"Deprecated, to be removed at gym 1.0.\"\"\"\n    def __init__(\n        self,\n        message=None,\n        http_body=None,\n        http_status=None,",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "APIError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class APIError(Error):\n    \"\"\"Deprecated, to be removed at gym 1.0.\"\"\"\n    def __init__(\n        self,\n        message=None,\n        http_body=None,\n        http_status=None,\n        json_body=None,\n        headers=None,\n    ):",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "APIConnectionError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class APIConnectionError(APIError):\n    \"\"\"Deprecated, to be removed at gym 1.0.\"\"\"\nclass InvalidRequestError(APIError):\n    \"\"\"Deprecated, to be removed at gym 1.0.\"\"\"\n    def __init__(\n        self,\n        message,\n        param,\n        http_body=None,\n        http_status=None,",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "InvalidRequestError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class InvalidRequestError(APIError):\n    \"\"\"Deprecated, to be removed at gym 1.0.\"\"\"\n    def __init__(\n        self,\n        message,\n        param,\n        http_body=None,\n        http_status=None,\n        json_body=None,\n        headers=None,",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "AuthenticationError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class AuthenticationError(APIError):\n    \"\"\"Deprecated, to be removed at gym 1.0.\"\"\"\nclass RateLimitError(APIError):\n    \"\"\"Deprecated, to be removed at gym 1.0.\"\"\"\n# Video errors\nclass VideoRecorderError(Error):\n    \"\"\"Unused error.\"\"\"\nclass InvalidFrame(Error):\n    \"\"\"Error message when an invalid frame is captured.\"\"\"\n# Wrapper errors",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "RateLimitError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class RateLimitError(APIError):\n    \"\"\"Deprecated, to be removed at gym 1.0.\"\"\"\n# Video errors\nclass VideoRecorderError(Error):\n    \"\"\"Unused error.\"\"\"\nclass InvalidFrame(Error):\n    \"\"\"Error message when an invalid frame is captured.\"\"\"\n# Wrapper errors\nclass DoubleWrapperError(Error):\n    \"\"\"Error message for when using double wrappers.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "VideoRecorderError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class VideoRecorderError(Error):\n    \"\"\"Unused error.\"\"\"\nclass InvalidFrame(Error):\n    \"\"\"Error message when an invalid frame is captured.\"\"\"\n# Wrapper errors\nclass DoubleWrapperError(Error):\n    \"\"\"Error message for when using double wrappers.\"\"\"\nclass WrapAfterConfigureError(Error):\n    \"\"\"Error message for using wrap after configure.\"\"\"\nclass RetriesExceededError(Error):",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "InvalidFrame",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class InvalidFrame(Error):\n    \"\"\"Error message when an invalid frame is captured.\"\"\"\n# Wrapper errors\nclass DoubleWrapperError(Error):\n    \"\"\"Error message for when using double wrappers.\"\"\"\nclass WrapAfterConfigureError(Error):\n    \"\"\"Error message for using wrap after configure.\"\"\"\nclass RetriesExceededError(Error):\n    \"\"\"Error message for retries exceeding set number.\"\"\"\n# Vectorized environments errors",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "DoubleWrapperError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class DoubleWrapperError(Error):\n    \"\"\"Error message for when using double wrappers.\"\"\"\nclass WrapAfterConfigureError(Error):\n    \"\"\"Error message for using wrap after configure.\"\"\"\nclass RetriesExceededError(Error):\n    \"\"\"Error message for retries exceeding set number.\"\"\"\n# Vectorized environments errors\nclass AlreadyPendingCallError(Exception):\n    \"\"\"Raised when `reset`, or `step` is called asynchronously (e.g. with `reset_async`, or `step_async` respectively), and `reset_async`, or `step_async` (respectively) is called again (without a complete call to `reset_wait`, or `step_wait` respectively).\"\"\"\n    def __init__(self, message: str, name: str):",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "WrapAfterConfigureError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class WrapAfterConfigureError(Error):\n    \"\"\"Error message for using wrap after configure.\"\"\"\nclass RetriesExceededError(Error):\n    \"\"\"Error message for retries exceeding set number.\"\"\"\n# Vectorized environments errors\nclass AlreadyPendingCallError(Exception):\n    \"\"\"Raised when `reset`, or `step` is called asynchronously (e.g. with `reset_async`, or `step_async` respectively), and `reset_async`, or `step_async` (respectively) is called again (without a complete call to `reset_wait`, or `step_wait` respectively).\"\"\"\n    def __init__(self, message: str, name: str):\n        \"\"\"Initialises the exception with name attributes.\"\"\"\n        super().__init__(message)",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "RetriesExceededError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class RetriesExceededError(Error):\n    \"\"\"Error message for retries exceeding set number.\"\"\"\n# Vectorized environments errors\nclass AlreadyPendingCallError(Exception):\n    \"\"\"Raised when `reset`, or `step` is called asynchronously (e.g. with `reset_async`, or `step_async` respectively), and `reset_async`, or `step_async` (respectively) is called again (without a complete call to `reset_wait`, or `step_wait` respectively).\"\"\"\n    def __init__(self, message: str, name: str):\n        \"\"\"Initialises the exception with name attributes.\"\"\"\n        super().__init__(message)\n        self.name = name\nclass NoAsyncCallError(Exception):",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "AlreadyPendingCallError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class AlreadyPendingCallError(Exception):\n    \"\"\"Raised when `reset`, or `step` is called asynchronously (e.g. with `reset_async`, or `step_async` respectively), and `reset_async`, or `step_async` (respectively) is called again (without a complete call to `reset_wait`, or `step_wait` respectively).\"\"\"\n    def __init__(self, message: str, name: str):\n        \"\"\"Initialises the exception with name attributes.\"\"\"\n        super().__init__(message)\n        self.name = name\nclass NoAsyncCallError(Exception):\n    \"\"\"Raised when an asynchronous `reset`, or `step` is not running, but `reset_wait`, or `step_wait` (respectively) is called.\"\"\"\n    def __init__(self, message: str, name: str):\n        \"\"\"Initialises the exception with name attributes.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "NoAsyncCallError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class NoAsyncCallError(Exception):\n    \"\"\"Raised when an asynchronous `reset`, or `step` is not running, but `reset_wait`, or `step_wait` (respectively) is called.\"\"\"\n    def __init__(self, message: str, name: str):\n        \"\"\"Initialises the exception with name attributes.\"\"\"\n        super().__init__(message)\n        self.name = name\nclass ClosedEnvironmentError(Exception):\n    \"\"\"Trying to call `reset`, or `step`, while the environment is closed.\"\"\"\nclass CustomSpaceError(Exception):\n    \"\"\"The space is a custom gym.Space instance, and is not supported by `AsyncVectorEnv` with `shared_memory=True`.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "ClosedEnvironmentError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class ClosedEnvironmentError(Exception):\n    \"\"\"Trying to call `reset`, or `step`, while the environment is closed.\"\"\"\nclass CustomSpaceError(Exception):\n    \"\"\"The space is a custom gym.Space instance, and is not supported by `AsyncVectorEnv` with `shared_memory=True`.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "CustomSpaceError",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.gym.error",
        "description": "repos_that_could_be_useful.gym.gym.error",
        "peekOfCode": "class CustomSpaceError(Exception):\n    \"\"\"The space is a custom gym.Space instance, and is not supported by `AsyncVectorEnv` with `shared_memory=True`.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.error",
        "documentation": {}
    },
    {
        "label": "set_level",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.logger",
        "description": "repos_that_could_be_useful.gym.gym.logger",
        "peekOfCode": "def set_level(level: int):\n    \"\"\"Set logging threshold on current logger.\"\"\"\n    global min_level\n    min_level = level\ndef debug(msg: str, *args: object):\n    \"\"\"Logs a debug message to the user.\"\"\"\n    if min_level <= DEBUG:\n        print(f\"DEBUG: {msg % args}\", file=sys.stderr)\ndef info(msg: str, *args: object):\n    \"\"\"Logs an info message to the user.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.logger",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.logger",
        "description": "repos_that_could_be_useful.gym.gym.logger",
        "peekOfCode": "def debug(msg: str, *args: object):\n    \"\"\"Logs a debug message to the user.\"\"\"\n    if min_level <= DEBUG:\n        print(f\"DEBUG: {msg % args}\", file=sys.stderr)\ndef info(msg: str, *args: object):\n    \"\"\"Logs an info message to the user.\"\"\"\n    if min_level <= INFO:\n        print(f\"INFO: {msg % args}\", file=sys.stderr)\ndef warn(\n    msg: str,",
        "detail": "repos_that_could_be_useful.gym.gym.logger",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.logger",
        "description": "repos_that_could_be_useful.gym.gym.logger",
        "peekOfCode": "def info(msg: str, *args: object):\n    \"\"\"Logs an info message to the user.\"\"\"\n    if min_level <= INFO:\n        print(f\"INFO: {msg % args}\", file=sys.stderr)\ndef warn(\n    msg: str,\n    *args: object,\n    category: Optional[Type[Warning]] = None,\n    stacklevel: int = 1,\n):",
        "detail": "repos_that_could_be_useful.gym.gym.logger",
        "documentation": {}
    },
    {
        "label": "warn",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.logger",
        "description": "repos_that_could_be_useful.gym.gym.logger",
        "peekOfCode": "def warn(\n    msg: str,\n    *args: object,\n    category: Optional[Type[Warning]] = None,\n    stacklevel: int = 1,\n):\n    \"\"\"Raises a warning to the user if the min_level <= WARN.\n    Args:\n        msg: The message to warn the user\n        *args: Additional information to warn the user",
        "detail": "repos_that_could_be_useful.gym.gym.logger",
        "documentation": {}
    },
    {
        "label": "deprecation",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.logger",
        "description": "repos_that_could_be_useful.gym.gym.logger",
        "peekOfCode": "def deprecation(msg: str, *args: object):\n    \"\"\"Logs a deprecation warning to users.\"\"\"\n    warn(msg, *args, category=DeprecationWarning, stacklevel=2)\ndef error(msg: str, *args: object):\n    \"\"\"Logs an error message if min_level <= ERROR in red on the sys.stderr.\"\"\"\n    if min_level <= ERROR:\n        print(colorize(f\"ERROR: {msg % args}\", \"red\"), file=sys.stderr)\n# DEPRECATED:\nsetLevel = set_level",
        "detail": "repos_that_could_be_useful.gym.gym.logger",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.gym.logger",
        "description": "repos_that_could_be_useful.gym.gym.logger",
        "peekOfCode": "def error(msg: str, *args: object):\n    \"\"\"Logs an error message if min_level <= ERROR in red on the sys.stderr.\"\"\"\n    if min_level <= ERROR:\n        print(colorize(f\"ERROR: {msg % args}\", \"red\"), file=sys.stderr)\n# DEPRECATED:\nsetLevel = set_level",
        "detail": "repos_that_could_be_useful.gym.gym.logger",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.logger",
        "description": "repos_that_could_be_useful.gym.gym.logger",
        "peekOfCode": "DEBUG = 10\nINFO = 20\nWARN = 30\nERROR = 40\nDISABLED = 50\nmin_level = 30\nwarnings.simplefilter(\"once\", DeprecationWarning)\ndef set_level(level: int):\n    \"\"\"Set logging threshold on current logger.\"\"\"\n    global min_level",
        "detail": "repos_that_could_be_useful.gym.gym.logger",
        "documentation": {}
    },
    {
        "label": "INFO",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.logger",
        "description": "repos_that_could_be_useful.gym.gym.logger",
        "peekOfCode": "INFO = 20\nWARN = 30\nERROR = 40\nDISABLED = 50\nmin_level = 30\nwarnings.simplefilter(\"once\", DeprecationWarning)\ndef set_level(level: int):\n    \"\"\"Set logging threshold on current logger.\"\"\"\n    global min_level\n    min_level = level",
        "detail": "repos_that_could_be_useful.gym.gym.logger",
        "documentation": {}
    },
    {
        "label": "WARN",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.logger",
        "description": "repos_that_could_be_useful.gym.gym.logger",
        "peekOfCode": "WARN = 30\nERROR = 40\nDISABLED = 50\nmin_level = 30\nwarnings.simplefilter(\"once\", DeprecationWarning)\ndef set_level(level: int):\n    \"\"\"Set logging threshold on current logger.\"\"\"\n    global min_level\n    min_level = level\ndef debug(msg: str, *args: object):",
        "detail": "repos_that_could_be_useful.gym.gym.logger",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.logger",
        "description": "repos_that_could_be_useful.gym.gym.logger",
        "peekOfCode": "ERROR = 40\nDISABLED = 50\nmin_level = 30\nwarnings.simplefilter(\"once\", DeprecationWarning)\ndef set_level(level: int):\n    \"\"\"Set logging threshold on current logger.\"\"\"\n    global min_level\n    min_level = level\ndef debug(msg: str, *args: object):\n    \"\"\"Logs a debug message to the user.\"\"\"",
        "detail": "repos_that_could_be_useful.gym.gym.logger",
        "documentation": {}
    },
    {
        "label": "DISABLED",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.logger",
        "description": "repos_that_could_be_useful.gym.gym.logger",
        "peekOfCode": "DISABLED = 50\nmin_level = 30\nwarnings.simplefilter(\"once\", DeprecationWarning)\ndef set_level(level: int):\n    \"\"\"Set logging threshold on current logger.\"\"\"\n    global min_level\n    min_level = level\ndef debug(msg: str, *args: object):\n    \"\"\"Logs a debug message to the user.\"\"\"\n    if min_level <= DEBUG:",
        "detail": "repos_that_could_be_useful.gym.gym.logger",
        "documentation": {}
    },
    {
        "label": "min_level",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.logger",
        "description": "repos_that_could_be_useful.gym.gym.logger",
        "peekOfCode": "min_level = 30\nwarnings.simplefilter(\"once\", DeprecationWarning)\ndef set_level(level: int):\n    \"\"\"Set logging threshold on current logger.\"\"\"\n    global min_level\n    min_level = level\ndef debug(msg: str, *args: object):\n    \"\"\"Logs a debug message to the user.\"\"\"\n    if min_level <= DEBUG:\n        print(f\"DEBUG: {msg % args}\", file=sys.stderr)",
        "detail": "repos_that_could_be_useful.gym.gym.logger",
        "documentation": {}
    },
    {
        "label": "setLevel",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.logger",
        "description": "repos_that_could_be_useful.gym.gym.logger",
        "peekOfCode": "setLevel = set_level",
        "detail": "repos_that_could_be_useful.gym.gym.logger",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.gym.version",
        "description": "repos_that_could_be_useful.gym.gym.version",
        "peekOfCode": "VERSION = \"0.23.1\"",
        "detail": "repos_that_could_be_useful.gym.gym.version",
        "documentation": {}
    },
    {
        "label": "should_skip_env_spec_for_tests",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.spec_list",
        "description": "repos_that_could_be_useful.gym.tests.envs.spec_list",
        "peekOfCode": "def should_skip_env_spec_for_tests(spec):\n    # We skip tests for envs that require dependencies or are otherwise\n    # troublesome to run frequently\n    ep = spec.entry_point\n    # Skip mujoco tests for pull request CI\n    if skip_mujoco and ep.startswith(\"gym.envs.mujoco\"):\n        return True\n    try:\n        import gym.envs.atari  # noqa:F401\n    except ImportError:",
        "detail": "repos_that_could_be_useful.gym.tests.envs.spec_list",
        "documentation": {}
    },
    {
        "label": "SKIP_MUJOCO_WARNING_MESSAGE",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.spec_list",
        "description": "repos_that_could_be_useful.gym.tests.envs.spec_list",
        "peekOfCode": "SKIP_MUJOCO_WARNING_MESSAGE = (\n    \"Cannot run mujoco test (either license key not found or mujoco not\"\n    \"installed properly).\"\n)\nskip_mujoco = not (os.environ.get(\"MUJOCO_KEY\"))\nif not skip_mujoco:\n    try:\n        import mujoco_py  # noqa:F401\n    except ImportError:\n        skip_mujoco = True",
        "detail": "repos_that_could_be_useful.gym.tests.envs.spec_list",
        "documentation": {}
    },
    {
        "label": "skip_mujoco",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.spec_list",
        "description": "repos_that_could_be_useful.gym.tests.envs.spec_list",
        "peekOfCode": "skip_mujoco = not (os.environ.get(\"MUJOCO_KEY\"))\nif not skip_mujoco:\n    try:\n        import mujoco_py  # noqa:F401\n    except ImportError:\n        skip_mujoco = True\ndef should_skip_env_spec_for_tests(spec):\n    # We skip tests for envs that require dependencies or are otherwise\n    # troublesome to run frequently\n    ep = spec.entry_point",
        "detail": "repos_that_could_be_useful.gym.tests.envs.spec_list",
        "documentation": {}
    },
    {
        "label": "spec_list",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.spec_list",
        "description": "repos_that_could_be_useful.gym.tests.envs.spec_list",
        "peekOfCode": "spec_list = [\n    spec\n    for spec in sorted(envs.registry.values(), key=lambda x: x.id)\n    if spec.entry_point is not None and not should_skip_env_spec_for_tests(spec)\n]",
        "detail": "repos_that_could_be_useful.gym.tests.envs.spec_list",
        "documentation": {}
    },
    {
        "label": "test_serialize_deserialize",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_action_dim_check",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_action_dim_check",
        "peekOfCode": "def test_serialize_deserialize(environment_id):\n    env = envs.make(environment_id)\n    env.reset()\n    with pytest.raises(ValueError, match=\"Action dimension mismatch\"):\n        env.step([0.1])\n    with pytest.raises(ValueError, match=\"Action dimension mismatch\"):\n        env.step(0.1)",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_action_dim_check",
        "documentation": {}
    },
    {
        "label": "ENVIRONMENT_IDS",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_action_dim_check",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_action_dim_check",
        "peekOfCode": "ENVIRONMENT_IDS = (\"HalfCheetah-v2\",)\n@pytest.mark.skipif(skip_mujoco, reason=SKIP_MUJOCO_WARNING_MESSAGE)\n@pytest.mark.parametrize(\"environment_id\", ENVIRONMENT_IDS)\ndef test_serialize_deserialize(environment_id):\n    env = envs.make(environment_id)\n    env.reset()\n    with pytest.raises(ValueError, match=\"Action dimension mismatch\"):\n        env.step([0.1])\n    with pytest.raises(ValueError, match=\"Action dimension mismatch\"):\n        env.step(0.1)",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_action_dim_check",
        "documentation": {}
    },
    {
        "label": "test_ale_legacy_env_specs",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_atari_legacy_env_specs",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_atari_legacy_env_specs",
        "peekOfCode": "def test_ale_legacy_env_specs():\n    versions = [\"-v0\", \"-v4\"]\n    suffixes = [\"\", \"NoFrameskip\", \"Deterministic\"]\n    obs_types = [\"\", \"-ram\"]\n    games = [\n        \"adventure\",\n        \"air_raid\",\n        \"alien\",\n        \"amidar\",\n        \"assault\",",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_atari_legacy_env_specs",
        "documentation": {}
    },
    {
        "label": "test_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_determinism",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_determinism",
        "peekOfCode": "def test_env(spec):\n    \"\"\"Run a rollout with two environments and assert equality.\n    This test run a rollout of NUM_STEPS steps with two environments\n    initialized with the same seed and assert that:\n    - observation after first reset are the same\n    - same actions are sampled by the two envs\n    - observations are contained in the observation space\n    - obs, rew, done and info are equals between the two envs\n    Args:\n        spec (EnvSpec): Environment specification",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_determinism",
        "documentation": {}
    },
    {
        "label": "assert_equals",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_determinism",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_determinism",
        "peekOfCode": "def assert_equals(a, b, prefix=None):\n    \"\"\"Assert equality of data structures `a` and `b`.\n    Args:\n        a: first data structure\n        b: second data structure\n        prefix: prefix for failed assertion message for types and dicts\n    \"\"\"\n    assert type(a) == type(b), f\"{prefix}Differing types: {a} and {b}\"\n    if isinstance(a, dict):\n        assert list(a.keys()) == list(b.keys()), f\"{prefix}Key sets differ: {a} and {b}\"",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_determinism",
        "documentation": {}
    },
    {
        "label": "test_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_envs",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_envs",
        "peekOfCode": "def test_env(spec):\n    # Capture warnings\n    with pytest.warns(None) as warnings:\n        env = spec.make()\n    # Test if env adheres to Gym API\n    check_env(env, warn=True, skip_render_check=True)\n    # Check that dtype is explicitly declared for gym.Box spaces\n    for warning_msg in warnings:\n        assert \"autodetected dtype\" not in str(warning_msg.message)\n    ob_space = env.observation_space",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_envs",
        "documentation": {}
    },
    {
        "label": "test_reset_info",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_envs",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_envs",
        "peekOfCode": "def test_reset_info(spec):\n    with pytest.warns(None):\n        env = spec.make()\n    ob_space = env.observation_space\n    obs = env.reset()\n    assert ob_space.contains(obs)\n    obs = env.reset(return_info=False)\n    assert ob_space.contains(obs)\n    obs, info = env.reset(return_info=True)\n    assert ob_space.contains(obs)",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_envs",
        "documentation": {}
    },
    {
        "label": "test_env_render_result_is_immutable",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_envs",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_envs",
        "peekOfCode": "def test_env_render_result_is_immutable():\n    environs = [\n        envs.make(\"Taxi-v3\"),\n        envs.make(\"FrozenLake-v1\"),\n    ]\n    for env in environs:\n        env.reset()\n        output = env.render(mode=\"ansi\")\n        assert isinstance(output, str)\n        env.close()",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_envs",
        "documentation": {}
    },
    {
        "label": "test_frozenlake_dfs_map_generation",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_frozenlake_dfs",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_frozenlake_dfs",
        "peekOfCode": "def test_frozenlake_dfs_map_generation():\n    def frozenlake_dfs_path_exists(res):\n        frontier, discovered = [], set()\n        frontier.append((0, 0))\n        while frontier:\n            r, c = frontier.pop()\n            if not (r, c) in discovered:\n                discovered.add((r, c))\n                directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n                for x, y in directions:",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_frozenlake_dfs",
        "documentation": {}
    },
    {
        "label": "test_lunar_lander",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_lunar_lander",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_lunar_lander",
        "peekOfCode": "def test_lunar_lander():\n    _test_lander(LunarLander(), seed=0)\n@pytest.mark.skipif(Box2D is None, reason=\"Box2D not installed\")\ndef test_lunar_lander_continuous():\n    _test_lander(LunarLander(continuous=True), seed=0)\n@pytest.mark.skipif(Box2D is None, reason=\"Box2D not installed\")\ndef _test_lander(env, seed=None, render=False):\n    total_reward = demo_heuristic_lander(env, seed=seed, render=render)\n    assert total_reward > 100",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_lunar_lander",
        "documentation": {}
    },
    {
        "label": "test_lunar_lander_continuous",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_lunar_lander",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_lunar_lander",
        "peekOfCode": "def test_lunar_lander_continuous():\n    _test_lander(LunarLander(continuous=True), seed=0)\n@pytest.mark.skipif(Box2D is None, reason=\"Box2D not installed\")\ndef _test_lander(env, seed=None, render=False):\n    total_reward = demo_heuristic_lander(env, seed=seed, render=render)\n    assert total_reward > 100",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_lunar_lander",
        "documentation": {}
    },
    {
        "label": "Mujocov2Tov3ConversionTest",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_mujoco_v2_to_v3_conversion",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_mujoco_v2_to_v3_conversion",
        "peekOfCode": "class Mujocov2Tov3ConversionTest(unittest.TestCase):\n    def test_environments_match(self):\n        test_cases = (\n            {\"old_id\": \"Swimmer-v2\", \"new_id\": \"Swimmer-v3\"},\n            {\"old_id\": \"Hopper-v2\", \"new_id\": \"Hopper-v3\"},\n            {\"old_id\": \"Walker2d-v2\", \"new_id\": \"Walker2d-v3\"},\n            {\"old_id\": \"HalfCheetah-v2\", \"new_id\": \"HalfCheetah-v3\"},\n            {\"old_id\": \"Ant-v2\", \"new_id\": \"Ant-v3\"},\n            {\"old_id\": \"Humanoid-v2\", \"new_id\": \"Humanoid-v3\"},\n        )",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_mujoco_v2_to_v3_conversion",
        "documentation": {}
    },
    {
        "label": "verify_environments_match",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_mujoco_v2_to_v3_conversion",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_mujoco_v2_to_v3_conversion",
        "peekOfCode": "def verify_environments_match(\n    old_environment_id, new_environment_id, seed=1, num_actions=1000\n):\n    old_environment = envs.make(old_environment_id)\n    new_environment = envs.make(new_environment_id)\n    old_reset_observation = old_environment.reset(seed=seed)\n    new_reset_observation = new_environment.reset(seed=seed)\n    np.testing.assert_allclose(old_reset_observation, new_reset_observation)\n    for i in range(num_actions):\n        action = old_environment.action_space.sample()",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_mujoco_v2_to_v3_conversion",
        "documentation": {}
    },
    {
        "label": "ArgumentEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "class ArgumentEnv(gym.Env):\n    def __init__(self, arg1, arg2, arg3):\n        self.arg1 = arg1\n        self.arg2 = arg2\n        self.arg3 = arg3\ngym.register(\n    id=\"test.ArgumentEnv-v0\",\n    entry_point=\"tests.envs.test_registration:ArgumentEnv\",\n    kwargs={\n        \"arg1\": \"arg1\",",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "register_some_envs",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def register_some_envs():\n    namespace = \"MyAwesomeNamespace\"\n    versioned_name = \"MyAwesomeVersionedEnv\"\n    unversioned_name = \"MyAwesomeUnversionedEnv\"\n    versions = [1, 3, 5]\n    for version in versions:\n        env_id = f\"{namespace}/{versioned_name}-v{version}\"\n        gym.register(\n            id=env_id,\n            entry_point=\"tests.envs.test_registration:ArgumentEnv\",",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_make",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_make():\n    env = envs.make(\"CartPole-v1\")\n    assert env.spec.id == \"CartPole-v1\"\n    assert isinstance(env.unwrapped, cartpole.CartPoleEnv)\n@pytest.mark.parametrize(\n    \"env_id, namespace, name, version\",\n    [\n        (\n            \"MyAwesomeNamespace/MyAwesomeEnv-v0\",\n            \"MyAwesomeNamespace\",",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_register",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_register(env_id, namespace, name, version):\n    register(env_id)\n    assert gym.envs.spec(env_id).id == env_id\n    full_name = f\"{name}\"\n    if namespace:\n        full_name = f\"{namespace}/{full_name}\"\n    if version is not None:\n        full_name = f\"{full_name}-v{version}\"\n    assert full_name in gym.envs.registry.keys()\n    del gym.envs.registry[env_id]",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_register_error",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_register_error(env_id):\n    with pytest.raises(error.Error, match=\"Malformed environment ID\"):\n        register(env_id)\n@pytest.mark.parametrize(\n    \"env_id_input, env_id_suggested\",\n    [\n        (\"cartpole-v1\", \"CartPole\"),\n        (\"blackjack-v1\", \"Blackjack\"),\n        (\"Blackjock-v1\", \"Blackjack\"),\n        (\"mountaincarcontinuous-v0\", \"MountainCarContinuous\"),",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_env_suggestions",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_env_suggestions(register_some_envs, env_id_input, env_id_suggested):\n    with pytest.raises(\n        error.UnregisteredEnv, match=f\"Did you mean: `{env_id_suggested}` ?\"\n    ):\n        envs.make(env_id_input)\n@pytest.mark.parametrize(\n    \"env_id_input, suggested_versions, default_version\",\n    [\n        (\"CartPole-v12\", \"`v0`, `v1`\", False),\n        (\"Blackjack-v10\", \"`v1`\", False),",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_env_version_suggestions",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_env_version_suggestions(\n    register_some_envs, env_id_input, suggested_versions, default_version\n):\n    if default_version:\n        match_str = \"provides the default version\"\n        with pytest.raises(\n            error.DeprecatedEnv,\n            match=match_str,\n        ):\n            envs.make(env_id_input)",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_make_with_kwargs",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_make_with_kwargs():\n    env = envs.make(\"test.ArgumentEnv-v0\", arg2=\"override_arg2\", arg3=\"override_arg3\")\n    assert env.spec.id == \"test.ArgumentEnv-v0\"\n    assert isinstance(env.unwrapped, ArgumentEnv)\n    assert env.arg1 == \"arg1\"\n    assert env.arg2 == \"override_arg2\"\n    assert env.arg3 == \"override_arg3\"\n@pytest.mark.filterwarnings(\n    \"ignore:.*The environment Humanoid-v0 is out of date. You should consider upgrading to \"\n    \"version `v3` with the environment ID `Humanoid-v3`.*\"",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_make_deprecated",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_make_deprecated():\n    try:\n        envs.make(\"Humanoid-v0\")\n    except error.Error:\n        pass\n    else:\n        assert False\ndef test_spec():\n    spec = envs.spec(\"CartPole-v1\")\n    assert spec.id == \"CartPole-v1\"",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_spec",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_spec():\n    spec = envs.spec(\"CartPole-v1\")\n    assert spec.id == \"CartPole-v1\"\ndef test_spec_with_kwargs():\n    map_name_value = \"8x8\"\n    env = gym.make(\"FrozenLake-v1\", map_name=map_name_value)\n    assert env.spec.kwargs[\"map_name\"] == map_name_value\ndef test_missing_lookup():\n    register(id=\"Test1-v0\", entry_point=None)\n    register(id=\"Test1-v15\", entry_point=None)",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_spec_with_kwargs",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_spec_with_kwargs():\n    map_name_value = \"8x8\"\n    env = gym.make(\"FrozenLake-v1\", map_name=map_name_value)\n    assert env.spec.kwargs[\"map_name\"] == map_name_value\ndef test_missing_lookup():\n    register(id=\"Test1-v0\", entry_point=None)\n    register(id=\"Test1-v15\", entry_point=None)\n    register(id=\"Test1-v9\", entry_point=None)\n    register(id=\"Other1-v100\", entry_point=None)\n    with pytest.raises(error.DeprecatedEnv):",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_missing_lookup",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_missing_lookup():\n    register(id=\"Test1-v0\", entry_point=None)\n    register(id=\"Test1-v15\", entry_point=None)\n    register(id=\"Test1-v9\", entry_point=None)\n    register(id=\"Other1-v100\", entry_point=None)\n    with pytest.raises(error.DeprecatedEnv):\n        spec(\"Test1-v1\")\n    try:\n        spec(\"Test1-v1000\")\n    except error.UnregisteredEnv:",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_malformed_lookup",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_malformed_lookup():\n    try:\n        spec(\"“Breakout-v0”\")\n    except error.Error as e:\n        assert \"Malformed environment ID\" in f\"{e}\", f\"Unexpected message: {e}\"\n    else:\n        assert False\ndef test_versioned_lookups():\n    register(\"test/Test2-v5\")\n    with pytest.raises(error.VersionNotFound):",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_versioned_lookups",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_versioned_lookups():\n    register(\"test/Test2-v5\")\n    with pytest.raises(error.VersionNotFound):\n        spec(\"test/Test2-v9\")\n    with pytest.raises(error.DeprecatedEnv):\n        spec(\"test/Test2-v4\")\n    assert spec(\"test/Test2-v5\")\ndef test_default_lookups():\n    register(\"test/Test3\")\n    with pytest.raises(error.DeprecatedEnv):",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_default_lookups",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_default_lookups():\n    register(\"test/Test3\")\n    with pytest.raises(error.DeprecatedEnv):\n        spec(\"test/Test3-v0\")\n    # Lookup default\n    spec(\"test/Test3\")\ndef test_register_versioned_unversioned():\n    # Register versioned then unversioned\n    versioned_env = \"Test/MyEnv-v0\"\n    register(versioned_env)",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_register_versioned_unversioned",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_register_versioned_unversioned():\n    # Register versioned then unversioned\n    versioned_env = \"Test/MyEnv-v0\"\n    register(versioned_env)\n    assert gym.envs.spec(versioned_env).id == versioned_env\n    unversioned_env = \"Test/MyEnv\"\n    with pytest.raises(error.RegistrationError):\n        register(unversioned_env)\n    # Clean everything\n    del gym.envs.registry[versioned_env]",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_return_latest_versioned_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_return_latest_versioned_env(register_some_envs):\n    with pytest.warns(UserWarning):\n        env = envs.make(\"MyAwesomeNamespace/MyAwesomeVersionedEnv\")\n    assert env.spec.id == \"MyAwesomeNamespace/MyAwesomeVersionedEnv-v5\"\ndef test_namespace():\n    # Check if the namespace context manager works\n    with registration.namespace(\"MyDefaultNamespace\"):\n        register(\"MyDefaultEnvironment-v0\")\n    register(\"MyDefaultEnvironment-v1\")\n    assert \"MyDefaultNamespace/MyDefaultEnvironment-v0\" in registry",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_namespace",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "description": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "peekOfCode": "def test_namespace():\n    # Check if the namespace context manager works\n    with registration.namespace(\"MyDefaultNamespace\"):\n        register(\"MyDefaultEnvironment-v0\")\n    register(\"MyDefaultEnvironment-v1\")\n    assert \"MyDefaultNamespace/MyDefaultEnvironment-v0\" in registry\n    assert \"MyDefaultEnvironment-v1\" in registry\n    del registry[\"MyDefaultNamespace/MyDefaultEnvironment-v0\"]\n    del registry[\"MyDefaultEnvironment-v1\"]",
        "detail": "repos_that_could_be_useful.gym.tests.envs.test_registration",
        "documentation": {}
    },
    {
        "label": "test_roundtripping",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_roundtripping(space):\n    sample_1 = space.sample()\n    sample_2 = space.sample()\n    assert space.contains(sample_1)\n    assert space.contains(sample_2)\n    json_rep = space.to_jsonable([sample_1, sample_2])\n    json_roundtripped = json.loads(json.dumps(json_rep))\n    samples_after_roundtrip = space.from_jsonable(json_roundtripped)\n    sample_1_prime, sample_2_prime = samples_after_roundtrip\n    s1 = space.to_jsonable([sample_1])",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_equality",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_equality(space):\n    space1 = space\n    space2 = copy.deepcopy(space)\n    assert space1 == space2, f\"Expected {space1} to equal {space2}\"\n@pytest.mark.parametrize(\n    \"spaces\",\n    [\n        (Discrete(3), Discrete(4)),\n        (Discrete(3), Discrete(3, start=-1)),\n        (MultiDiscrete([2, 2, 100]), MultiDiscrete([2, 2, 8])),",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_inequality",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_inequality(spaces):\n    space1, space2 = spaces\n    assert space1 != space2, f\"Expected {space1} != {space2}\"\n@pytest.mark.parametrize(\n    \"space\",\n    [\n        Discrete(5),\n        Discrete(8, start=-20),\n        Box(low=0, high=255, shape=(2,), dtype=\"uint8\"),\n        Box(low=-np.inf, high=np.inf, shape=(3, 3)),",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_sample",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_sample(space):\n    space.seed(0)\n    n_trials = 100\n    samples = np.array([space.sample() for _ in range(n_trials)])\n    expected_mean = 0.0\n    if isinstance(space, Box):\n        if space.is_bounded():\n            expected_mean = (space.high + space.low) / 2\n        elif space.is_bounded(\"below\"):\n            expected_mean = 1 + space.low",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_class_inequality",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_class_inequality(spaces):\n    assert spaces[0] == spaces[0]\n    assert spaces[1] == spaces[1]\n    assert spaces[0] != spaces[1]\n    assert spaces[1] != spaces[0]\n@pytest.mark.parametrize(\n    \"space_fn\",\n    [\n        lambda: Dict(space1=\"abc\"),\n        lambda: Dict({\"space1\": \"abc\"}),",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_bad_space_calls",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_bad_space_calls(space_fn):\n    with pytest.raises(AssertionError):\n        space_fn()\ndef test_seed_Dict():\n    test_space = Dict(\n        {\n            \"a\": Box(low=0, high=1, shape=(3, 3)),\n            \"b\": Dict(\n                {\n                    \"b_1\": Box(low=-100, high=100, shape=(2,)),",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_seed_Dict",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_seed_Dict():\n    test_space = Dict(\n        {\n            \"a\": Box(low=0, high=1, shape=(3, 3)),\n            \"b\": Dict(\n                {\n                    \"b_1\": Box(low=-100, high=100, shape=(2,)),\n                    \"b_2\": Box(low=-1, high=1, shape=(2,)),\n                }\n            ),",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_box_dtype_check",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_box_dtype_check():\n    # Related Issues:\n    # https://github.com/openai/gym/issues/2357\n    # https://github.com/openai/gym/issues/2298\n    space = Box(0, 2, tuple(), dtype=np.float32)\n    # casting will match the correct type\n    assert space.contains(np.array(0.5, dtype=np.float32))\n    # float64 is not in float32 space\n    assert not space.contains(np.array(0.5))\n    assert not space.contains(np.array(1))",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_seed_returns_list",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_seed_returns_list(space):\n    def assert_integer_list(seed):\n        assert isinstance(seed, list)\n        assert len(seed) >= 1\n        assert all([isinstance(s, int) for s in seed])\n    assert_integer_list(space.seed(None))\n    assert_integer_list(space.seed(0))\ndef convert_sample_hashable(sample):\n    if isinstance(sample, np.ndarray):\n        return tuple(sample.tolist())",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "convert_sample_hashable",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def convert_sample_hashable(sample):\n    if isinstance(sample, np.ndarray):\n        return tuple(sample.tolist())\n    if isinstance(sample, (list, tuple)):\n        return tuple(convert_sample_hashable(s) for s in sample)\n    if isinstance(sample, dict):\n        return tuple(\n            (key, convert_sample_hashable(value)) for key, value in sample.items()\n        )\n    return sample",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "sample_equal",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def sample_equal(sample1, sample2):\n    return convert_sample_hashable(sample1) == convert_sample_hashable(sample2)\n@pytest.mark.parametrize(\n    \"space\",\n    [\n        Discrete(3),\n        Discrete(3, start=-4),\n        Box(low=0.0, high=np.inf, shape=(2, 2)),\n        Tuple([Discrete(5), Discrete(10)]),\n        Tuple(",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_seed_reproducibility",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_seed_reproducibility(space):\n    space1 = space\n    space2 = copy.deepcopy(space)\n    space1.seed(None)\n    space2.seed(None)\n    assert space1.seed(0) == space2.seed(0)\n    assert sample_equal(space1.sample(), space2.sample())\n@pytest.mark.parametrize(\n    \"space\",\n    [",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_seed_subspace_incorrelated",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_seed_subspace_incorrelated(space):\n    subspaces = space.spaces if isinstance(space, Tuple) else space.spaces.values()\n    space.seed(0)\n    states = [\n        convert_sample_hashable(subspace.np_random.bit_generator.state)\n        for subspace in subspaces\n    ]\n    assert len(states) == len(set(states))\ndef test_tuple():\n    spaces = [Discrete(5), Discrete(10), Discrete(5)]",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_tuple",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_tuple():\n    spaces = [Discrete(5), Discrete(10), Discrete(5)]\n    space_tuple = Tuple(spaces)\n    assert len(space_tuple) == len(spaces)\n    assert space_tuple.count(Discrete(5)) == 2\n    assert space_tuple.count(MultiBinary(2)) == 0\n    for i, space in enumerate(space_tuple):\n        assert space == spaces[i]\n    for i, space in enumerate(reversed(space_tuple)):\n        assert space == spaces[len(spaces) - 1 - i]",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_multidiscrete_as_tuple",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_multidiscrete_as_tuple():\n    # 1D multi-discrete\n    space = MultiDiscrete([3, 4, 5])\n    assert space.shape == (3,)\n    assert space[0] == Discrete(3)\n    assert space[0:1] == MultiDiscrete([3])\n    assert space[0:2] == MultiDiscrete([3, 4])\n    assert space[:] == space and space[:] is not space\n    assert len(space) == 3\n    # 2D multi-discrete",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_multidiscrete_subspace_reproducibility",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_multidiscrete_subspace_reproducibility():\n    # 1D multi-discrete\n    space = MultiDiscrete([100, 200, 300])\n    space.seed(None)\n    assert sample_equal(space[0].sample(), space[0].sample())\n    assert sample_equal(space[0:1].sample(), space[0:1].sample())\n    assert sample_equal(space[0:2].sample(), space[0:2].sample())\n    assert sample_equal(space[:].sample(), space[:].sample())\n    assert sample_equal(space[:].sample(), space.sample())\n    # 2D multi-discrete",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_space_legacy_state_pickling",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_space_legacy_state_pickling():\n    legacy_state = {\n        \"shape\": (\n            1,\n            2,\n            3,\n        ),\n        \"dtype\": np.int64,\n        \"np_random\": np.random.default_rng(),\n        \"n\": 3,",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_infinite_space",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_infinite_space(space):\n    # for this test, make sure that spaces that are passed in have only 0 or infinite bounds\n    # because space.high and space.low are both modified within the init\n    # so we check for infinite when we know it's not 0\n    space.seed(0)\n    assert np.all(space.high > space.low), \"High bound not higher than low bound\"\n    sample = space.sample()\n    # check if space contains sample\n    assert space.contains(\n        sample",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_discrete_legacy_state_pickling",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_discrete_legacy_state_pickling():\n    legacy_state = {\n        \"n\": 3,\n    }\n    d = Discrete(1)\n    assert \"start\" in d.__dict__\n    del d.__dict__[\"start\"]  # legacy did not include start param\n    assert \"start\" not in d.__dict__\n    d.__setstate__(legacy_state)\n    assert d.start == 0",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_pickle",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "peekOfCode": "def test_pickle(space):\n    space.sample()\n    # Pickle and unpickle with a string\n    pickled = pickle.dumps(space)\n    space2 = pickle.loads(pickled)\n    # Pickle and unpickle with a file\n    with tempfile.TemporaryFile() as f:\n        pickle.dump(space, f)\n        f.seek(0)\n        space3 = pickle.load(f)",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_flatdim",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "def test_flatdim(space, flatdim):\n    dim = utils.flatdim(space)\n    assert dim == flatdim, f\"Expected {dim} to equal {flatdim}\"\n@pytest.mark.parametrize(\"space\", spaces)\ndef test_flatten_space_boxes(space):\n    flat_space = utils.flatten_space(space)\n    assert isinstance(flat_space, Box), f\"Expected {type(flat_space)} to equal {Box}\"\n    flatdim = utils.flatdim(space)\n    (single_dim,) = flat_space.shape\n    assert single_dim == flatdim, f\"Expected {single_dim} to equal {flatdim}\"",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "test_flatten_space_boxes",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "def test_flatten_space_boxes(space):\n    flat_space = utils.flatten_space(space)\n    assert isinstance(flat_space, Box), f\"Expected {type(flat_space)} to equal {Box}\"\n    flatdim = utils.flatdim(space)\n    (single_dim,) = flat_space.shape\n    assert single_dim == flatdim, f\"Expected {single_dim} to equal {flatdim}\"\n@pytest.mark.parametrize(\"space\", spaces)\ndef test_flat_space_contains_flat_points(space):\n    some_samples = [space.sample() for _ in range(10)]\n    flattened_samples = [utils.flatten(space, sample) for sample in some_samples]",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "test_flat_space_contains_flat_points",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "def test_flat_space_contains_flat_points(space):\n    some_samples = [space.sample() for _ in range(10)]\n    flattened_samples = [utils.flatten(space, sample) for sample in some_samples]\n    flat_space = utils.flatten_space(space)\n    for i, flat_sample in enumerate(flattened_samples):\n        assert (\n            flat_sample in flat_space\n        ), f\"Expected sample #{i} {flat_sample} to be in {flat_space}\"\n@pytest.mark.parametrize(\"space\", spaces)\ndef test_flatten_dim(space):",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "test_flatten_dim",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "def test_flatten_dim(space):\n    sample = utils.flatten(space, space.sample())\n    (single_dim,) = sample.shape\n    flatdim = utils.flatdim(space)\n    assert single_dim == flatdim, f\"Expected {single_dim} to equal {flatdim}\"\n@pytest.mark.parametrize(\"space\", spaces)\ndef test_flatten_roundtripping(space):\n    some_samples = [space.sample() for _ in range(10)]\n    flattened_samples = [utils.flatten(space, sample) for sample in some_samples]\n    roundtripped_samples = [",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "test_flatten_roundtripping",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "def test_flatten_roundtripping(space):\n    some_samples = [space.sample() for _ in range(10)]\n    flattened_samples = [utils.flatten(space, sample) for sample in some_samples]\n    roundtripped_samples = [\n        utils.unflatten(space, sample) for sample in flattened_samples\n    ]\n    for i, (original, roundtripped) in enumerate(\n        zip(some_samples, roundtripped_samples)\n    ):\n        assert compare_nested(",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "compare_nested",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "def compare_nested(left, right):\n    if isinstance(left, np.ndarray) and isinstance(right, np.ndarray):\n        return np.allclose(left, right)\n    elif isinstance(left, OrderedDict) and isinstance(right, OrderedDict):\n        res = len(left) == len(right)\n        for ((left_key, left_value), (right_key, right_value)) in zip(\n            left.items(), right.items()\n        ):\n            if not res:\n                return False",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "test_dtypes",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "def test_dtypes(original_space, expected_flattened_dtype):\n    flattened_space = utils.flatten_space(original_space)\n    original_sample = original_space.sample()\n    flattened_sample = utils.flatten(original_space, original_sample)\n    unflattened_sample = utils.unflatten(original_space, flattened_sample)\n    assert flattened_space.contains(\n        flattened_sample\n    ), \"Expected flattened_space to contain flattened_sample\"\n    assert (\n        flattened_space.dtype == expected_flattened_dtype",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "compare_sample_types",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "def compare_sample_types(original_space, original_sample, unflattened_sample):\n    if isinstance(original_space, Discrete):\n        assert isinstance(unflattened_sample, int), (\n            \"Expected unflattened_sample to be an int. unflattened_sample: \"\n            \"{} original_sample: {}\".format(unflattened_sample, original_sample)\n        )\n    elif isinstance(original_space, Tuple):\n        for index in range(len(original_space)):\n            compare_sample_types(\n                original_space.spaces[index],",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "test_flatten",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "def test_flatten(space, sample, expected_flattened_sample):\n    assert sample in space\n    flattened_sample = utils.flatten(space, sample)\n    assert flattened_sample.shape == expected_flattened_sample.shape\n    assert flattened_sample.dtype == expected_flattened_sample.dtype\n    assert np.all(flattened_sample == expected_flattened_sample)\n@pytest.mark.parametrize(\n    [\"space\", \"flattened_sample\", \"expected_sample\"],\n    zip(spaces, expected_flattened_samples, samples),\n)",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "test_unflatten",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "def test_unflatten(space, flattened_sample, expected_sample):\n    sample = utils.unflatten(space, flattened_sample)\n    assert compare_nested(sample, expected_sample)\nexpected_flattened_spaces = [\n    Box(low=0, high=1, shape=(3,), dtype=np.int64),\n    Box(low=0.0, high=np.inf, shape=(4,), dtype=np.float32),\n    Box(low=0.0, high=np.inf, shape=(4,), dtype=np.float16),\n    Box(low=0, high=1, shape=(15,), dtype=np.int64),\n    Box(\n        low=np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], dtype=np.float64),",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "test_flatten_space",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "def test_flatten_space(space, expected_flattened_space):\n    flattened_space = utils.flatten_space(space)\n    assert flattened_space == expected_flattened_space",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "spaces",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "spaces = [\n    Discrete(3),\n    Box(low=0.0, high=np.inf, shape=(2, 2)),\n    Box(low=0.0, high=np.inf, shape=(2, 2), dtype=np.float16),\n    Tuple([Discrete(5), Discrete(10)]),\n    Tuple(\n        [\n            Discrete(5),\n            Box(low=np.array([0.0, 0.0]), high=np.array([1.0, 5.0]), dtype=np.float64),\n        ]",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "flatdims",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "flatdims = [3, 4, 4, 15, 7, 9, 14, 10, 7, 3, 8]\n@pytest.mark.parametrize([\"space\", \"flatdim\"], zip(spaces, flatdims))\ndef test_flatdim(space, flatdim):\n    dim = utils.flatdim(space)\n    assert dim == flatdim, f\"Expected {dim} to equal {flatdim}\"\n@pytest.mark.parametrize(\"space\", spaces)\ndef test_flatten_space_boxes(space):\n    flat_space = utils.flatten_space(space)\n    assert isinstance(flat_space, Box), f\"Expected {type(flat_space)} to equal {Box}\"\n    flatdim = utils.flatdim(space)",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "expected_flattened_dtypes",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "expected_flattened_dtypes = [\n    np.int64,\n    np.float32,\n    np.float16,\n    np.int64,\n    np.float64,\n    np.int64,\n    np.int64,\n    np.int8,\n    np.float64,",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "samples",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "samples = [\n    2,\n    np.array([[1.0, 3.0], [5.0, 8.0]], dtype=np.float32),\n    np.array([[1.0, 3.0], [5.0, 8.0]], dtype=np.float16),\n    (3, 7),\n    (2, np.array([0.5, 3.5], dtype=np.float32)),\n    (3, 0, 1),\n    np.array([0, 1, 7], dtype=np.int64),\n    np.array([0, 1, 1, 0, 0, 0, 1, 1, 1, 1], dtype=np.int8),\n    OrderedDict(",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "expected_flattened_samples",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "expected_flattened_samples = [\n    np.array([0, 0, 1], dtype=np.int64),\n    np.array([1.0, 3.0, 5.0, 8.0], dtype=np.float32),\n    np.array([1.0, 3.0, 5.0, 8.0], dtype=np.float16),\n    np.array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], dtype=np.int64),\n    np.array([0, 0, 1, 0, 0, 0.5, 3.5], dtype=np.float64),\n    np.array([0, 0, 0, 1, 0, 1, 0, 0, 1], dtype=np.int64),\n    np.array([1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], dtype=np.int64),\n    np.array([0, 1, 1, 0, 0, 0, 1, 1, 1, 1], dtype=np.int8),\n    np.array([0, 0, 0, 1, 0, 0.5, 3.5], dtype=np.float64),",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "expected_flattened_spaces",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "description": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "peekOfCode": "expected_flattened_spaces = [\n    Box(low=0, high=1, shape=(3,), dtype=np.int64),\n    Box(low=0.0, high=np.inf, shape=(4,), dtype=np.float32),\n    Box(low=0.0, high=np.inf, shape=(4,), dtype=np.float16),\n    Box(low=0, high=1, shape=(15,), dtype=np.int64),\n    Box(\n        low=np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], dtype=np.float64),\n        high=np.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 5.0], dtype=np.float64),\n        dtype=np.float64,\n    ),",
        "detail": "repos_that_could_be_useful.gym.tests.spaces.test_utils",
        "documentation": {}
    },
    {
        "label": "ActionDictTestEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_env_checker",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_env_checker",
        "peekOfCode": "class ActionDictTestEnv(gym.Env):\n    action_space = Dict({\"position\": Discrete(1), \"velocity\": Discrete(1)})\n    observation_space = Box(low=-1.0, high=2.0, shape=(3,), dtype=np.float32)\n    def step(self, action):\n        observation = np.array([1.0, 1.5, 0.5])\n        reward = 1\n        done = True\n        return observation, reward, done\n    def reset(self, *, seed: Optional[int] = None, options: Optional[dict] = None):\n        super().reset(seed=seed)",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_env_checker",
        "documentation": {}
    },
    {
        "label": "test_check_env_dict_action",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_env_checker",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_env_checker",
        "peekOfCode": "def test_check_env_dict_action():\n    # Environment.step() only returns 3 values: obs, reward, done. Not info!\n    test_env = ActionDictTestEnv()\n    with pytest.raises(AssertionError) as errorinfo:\n        check_env(env=test_env, warn=True)\n        assert (\n            str(errorinfo.value)\n            == \"The `step()` method must return four values: obs, reward, done, info\"\n        )",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_env_checker",
        "documentation": {}
    },
    {
        "label": "DummyEnvSpec",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "class DummyEnvSpec:\n    id: str\nclass DummyPlayEnv(gym.Env):\n    def step(self, action):\n        obs = np.zeros((1, 1))\n        rew, done, info = 1, False, {}\n        return obs, rew, done, info\n    def reset(self, seed=None):\n        ...\n    def render(self, mode=\"rgb_array\"):",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "DummyPlayEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "class DummyPlayEnv(gym.Env):\n    def step(self, action):\n        obs = np.zeros((1, 1))\n        rew, done, info = 1, False, {}\n        return obs, rew, done, info\n    def reset(self, seed=None):\n        ...\n    def render(self, mode=\"rgb_array\"):\n        return np.zeros((1, 1))\nclass PlayStatus:",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "PlayStatus",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "class PlayStatus:\n    def __init__(self, callback: Callable):\n        self.data_callback = callback\n        self.cumulative_reward = 0\n        self.last_observation = None\n    def callback(self, obs_t, obs_tp1, action, rew, done, info):\n        _, obs_tp1, _, rew, _, _ = self.data_callback(\n            obs_t, obs_tp1, action, rew, done, info\n        )\n        self.cumulative_reward += rew",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "dummy_keys_to_action",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "def dummy_keys_to_action():\n    return {(RELEVANT_KEY_1,): 0, (RELEVANT_KEY_2,): 1}\n@pytest.fixture(autouse=True)\ndef close_pygame():\n    yield\n    pygame.quit()\ndef test_play_relevant_keys():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())\n    assert game.relevant_keys == {RELEVANT_KEY_1, RELEVANT_KEY_2}",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "close_pygame",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "def close_pygame():\n    yield\n    pygame.quit()\ndef test_play_relevant_keys():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())\n    assert game.relevant_keys == {RELEVANT_KEY_1, RELEVANT_KEY_2}\ndef test_play_relevant_keys_no_mapping():\n    env = DummyPlayEnv()\n    env.spec = DummyEnvSpec(\"DummyPlayEnv\")",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "test_play_relevant_keys",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "def test_play_relevant_keys():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())\n    assert game.relevant_keys == {RELEVANT_KEY_1, RELEVANT_KEY_2}\ndef test_play_relevant_keys_no_mapping():\n    env = DummyPlayEnv()\n    env.spec = DummyEnvSpec(\"DummyPlayEnv\")\n    with pytest.raises(MissingKeysToAction):\n        PlayableGame(env)\ndef test_play_relevant_keys_with_env_attribute():",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "test_play_relevant_keys_no_mapping",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "def test_play_relevant_keys_no_mapping():\n    env = DummyPlayEnv()\n    env.spec = DummyEnvSpec(\"DummyPlayEnv\")\n    with pytest.raises(MissingKeysToAction):\n        PlayableGame(env)\ndef test_play_relevant_keys_with_env_attribute():\n    \"\"\"Env has a keys_to_action attribute\"\"\"\n    env = DummyPlayEnv()\n    env.get_keys_to_action = dummy_keys_to_action\n    game = PlayableGame(env)",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "test_play_relevant_keys_with_env_attribute",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "def test_play_relevant_keys_with_env_attribute():\n    \"\"\"Env has a keys_to_action attribute\"\"\"\n    env = DummyPlayEnv()\n    env.get_keys_to_action = dummy_keys_to_action\n    game = PlayableGame(env)\n    assert game.relevant_keys == {RELEVANT_KEY_1, RELEVANT_KEY_2}\ndef test_video_size_no_zoom():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())\n    assert game.video_size == list(env.render().shape)",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "test_video_size_no_zoom",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "def test_video_size_no_zoom():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())\n    assert game.video_size == list(env.render().shape)\ndef test_video_size_zoom():\n    env = DummyPlayEnv()\n    zoom = 2.2\n    game = PlayableGame(env, dummy_keys_to_action(), zoom)\n    assert game.video_size == tuple(int(shape * zoom) for shape in env.render().shape)\ndef test_keyboard_quit_event():",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "test_video_size_zoom",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "def test_video_size_zoom():\n    env = DummyPlayEnv()\n    zoom = 2.2\n    game = PlayableGame(env, dummy_keys_to_action(), zoom)\n    assert game.video_size == tuple(int(shape * zoom) for shape in env.render().shape)\ndef test_keyboard_quit_event():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())\n    event = Event(pygame.KEYDOWN, {\"key\": pygame.K_ESCAPE})\n    assert game.running is True",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "test_keyboard_quit_event",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "def test_keyboard_quit_event():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())\n    event = Event(pygame.KEYDOWN, {\"key\": pygame.K_ESCAPE})\n    assert game.running is True\n    game.process_event(event)\n    assert game.running is False\ndef test_pygame_quit_event():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "test_pygame_quit_event",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "def test_pygame_quit_event():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())\n    event = Event(pygame.QUIT)\n    assert game.running is True\n    game.process_event(event)\n    assert game.running is False\ndef test_keyboard_relevant_keydown_event():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "test_keyboard_relevant_keydown_event",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "def test_keyboard_relevant_keydown_event():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())\n    event = Event(pygame.KEYDOWN, {\"key\": RELEVANT_KEY_1})\n    game.process_event(event)\n    assert game.pressed_keys == [RELEVANT_KEY_1]\ndef test_keyboard_irrelevant_keydown_event():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())\n    event = Event(pygame.KEYDOWN, {\"key\": IRRELEVANT_KEY})",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "test_keyboard_irrelevant_keydown_event",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "def test_keyboard_irrelevant_keydown_event():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())\n    event = Event(pygame.KEYDOWN, {\"key\": IRRELEVANT_KEY})\n    game.process_event(event)\n    assert game.pressed_keys == []\ndef test_keyboard_keyup_event():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())\n    event = Event(pygame.KEYDOWN, {\"key\": RELEVANT_KEY_1})",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "test_keyboard_keyup_event",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "def test_keyboard_keyup_event():\n    env = DummyPlayEnv()\n    game = PlayableGame(env, dummy_keys_to_action())\n    event = Event(pygame.KEYDOWN, {\"key\": RELEVANT_KEY_1})\n    game.process_event(event)\n    event = Event(pygame.KEYUP, {\"key\": RELEVANT_KEY_1})\n    game.process_event(event)\n    assert game.pressed_keys == []\ndef test_play_loop_real_env():\n    SEED = 42",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "test_play_loop_real_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "def test_play_loop_real_env():\n    SEED = 42\n    ENV = \"CartPole-v1\"\n    # set of key events to inject into the play loop as callback\n    callback_events = [\n        Event(KEYDOWN, {\"key\": RELEVANT_KEY_1}),\n        Event(KEYUP, {\"key\": RELEVANT_KEY_1}),\n        Event(KEYDOWN, {\"key\": RELEVANT_KEY_2}),\n        Event(KEYUP, {\"key\": RELEVANT_KEY_2}),\n        Event(KEYDOWN, {\"key\": RELEVANT_KEY_1}),",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "RELEVANT_KEY_1",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "RELEVANT_KEY_1 = ord(\"a\")  # 97\nRELEVANT_KEY_2 = ord(\"d\")  # 100\nIRRELEVANT_KEY = 1\n@dataclass\nclass DummyEnvSpec:\n    id: str\nclass DummyPlayEnv(gym.Env):\n    def step(self, action):\n        obs = np.zeros((1, 1))\n        rew, done, info = 1, False, {}",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "RELEVANT_KEY_2",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "RELEVANT_KEY_2 = ord(\"d\")  # 100\nIRRELEVANT_KEY = 1\n@dataclass\nclass DummyEnvSpec:\n    id: str\nclass DummyPlayEnv(gym.Env):\n    def step(self, action):\n        obs = np.zeros((1, 1))\n        rew, done, info = 1, False, {}\n        return obs, rew, done, info",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "IRRELEVANT_KEY",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "peekOfCode": "IRRELEVANT_KEY = 1\n@dataclass\nclass DummyEnvSpec:\n    id: str\nclass DummyPlayEnv(gym.Env):\n    def step(self, action):\n        obs = np.zeros((1, 1))\n        rew, done, info = 1, False, {}\n        return obs, rew, done, info\n    def reset(self, seed=None):",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_play",
        "documentation": {}
    },
    {
        "label": "test_invalid_seeds",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_seeding",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_seeding",
        "peekOfCode": "def test_invalid_seeds():\n    for seed in [-1, \"test\"]:\n        try:\n            seeding.np_random(seed)\n        except error.Error:\n            pass\n        else:\n            assert False, f\"Invalid seed {seed} passed validation\"\ndef test_valid_seeds():\n    for seed in [0, 1]:",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_seeding",
        "documentation": {}
    },
    {
        "label": "test_valid_seeds",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_seeding",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_seeding",
        "peekOfCode": "def test_valid_seeds():\n    for seed in [0, 1]:\n        random, seed1 = seeding.np_random(seed)\n        assert seed == seed1\ndef test_rng_pickle():\n    rng, _ = seeding.np_random(seed=0)\n    pickled = pickle.dumps(rng)\n    rng2 = pickle.loads(pickled)\n    assert isinstance(\n        rng2, seeding.RandomNumberGenerator",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_seeding",
        "documentation": {}
    },
    {
        "label": "test_rng_pickle",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.utils.test_seeding",
        "description": "repos_that_could_be_useful.gym.tests.utils.test_seeding",
        "peekOfCode": "def test_rng_pickle():\n    rng, _ = seeding.np_random(seed=0)\n    pickled = pickle.dumps(rng)\n    rng2 = pickle.loads(pickled)\n    assert isinstance(\n        rng2, seeding.RandomNumberGenerator\n    ), \"Unpickled object is not a RandomNumberGenerator\"\n    assert rng.random() == rng2.random()",
        "detail": "repos_that_could_be_useful.gym.tests.utils.test_seeding",
        "documentation": {}
    },
    {
        "label": "test_create_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_create_async_vector_env(shared_memory):\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(8)]\n    try:\n        env = AsyncVectorEnv(env_fns, shared_memory=shared_memory)\n    finally:\n        env.close()\n    assert env.num_envs == 8\n@pytest.mark.parametrize(\"shared_memory\", [True, False])\ndef test_reset_async_vector_env(shared_memory):\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(8)]",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_reset_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_reset_async_vector_env(shared_memory):\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(8)]\n    try:\n        env = AsyncVectorEnv(env_fns, shared_memory=shared_memory)\n        observations = env.reset()\n    finally:\n        env.close()\n    assert isinstance(env.observation_space, Box)\n    assert isinstance(observations, np.ndarray)\n    assert observations.dtype == env.observation_space.dtype",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_step_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_step_async_vector_env(shared_memory, use_single_action_space):\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(8)]\n    try:\n        env = AsyncVectorEnv(env_fns, shared_memory=shared_memory)\n        observations = env.reset()\n        assert isinstance(env.single_action_space, Discrete)\n        assert isinstance(env.action_space, MultiDiscrete)\n        if use_single_action_space:\n            actions = [env.single_action_space.sample() for _ in range(8)]\n        else:",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_call_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_call_async_vector_env(shared_memory):\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(4)]\n    try:\n        env = AsyncVectorEnv(env_fns, shared_memory=shared_memory)\n        _ = env.reset()\n        images = env.call(\"render\", mode=\"rgb_array\")\n        gravity = env.call(\"gravity\")\n    finally:\n        env.close()\n    assert isinstance(images, tuple)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_set_attr_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_set_attr_async_vector_env(shared_memory):\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(4)]\n    try:\n        env = AsyncVectorEnv(env_fns, shared_memory=shared_memory)\n        env.set_attr(\"gravity\", [9.81, 3.72, 8.87, 1.62])\n        gravity = env.get_attr(\"gravity\")\n        assert gravity == (9.81, 3.72, 8.87, 1.62)\n    finally:\n        env.close()\n@pytest.mark.parametrize(\"shared_memory\", [True, False])",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_copy_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_copy_async_vector_env(shared_memory):\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(8)]\n    try:\n        env = AsyncVectorEnv(env_fns, shared_memory=shared_memory, copy=True)\n        observations = env.reset()\n        observations[0] = 0\n    finally:\n        env.close()\n@pytest.mark.parametrize(\"shared_memory\", [True, False])\ndef test_no_copy_async_vector_env(shared_memory):",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_no_copy_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_no_copy_async_vector_env(shared_memory):\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(8)]\n    try:\n        env = AsyncVectorEnv(env_fns, shared_memory=shared_memory, copy=False)\n        observations = env.reset()\n        observations[0] = 0\n    finally:\n        env.close()\n@pytest.mark.parametrize(\"shared_memory\", [True, False])\ndef test_reset_timeout_async_vector_env(shared_memory):",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_reset_timeout_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_reset_timeout_async_vector_env(shared_memory):\n    env_fns = [make_slow_env(0.3, i) for i in range(4)]\n    with pytest.raises(TimeoutError):\n        try:\n            env = AsyncVectorEnv(env_fns, shared_memory=shared_memory)\n            env.reset_async()\n            env.reset_wait(timeout=0.1)\n        finally:\n            env.close(terminate=True)\n@pytest.mark.parametrize(\"shared_memory\", [True, False])",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_step_timeout_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_step_timeout_async_vector_env(shared_memory):\n    env_fns = [make_slow_env(0.0, i) for i in range(4)]\n    with pytest.raises(TimeoutError):\n        try:\n            env = AsyncVectorEnv(env_fns, shared_memory=shared_memory)\n            env.reset()\n            env.step_async([0.1, 0.1, 0.3, 0.1])\n            observations, rewards, dones, _ = env.step_wait(timeout=0.1)\n        finally:\n            env.close(terminate=True)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_reset_out_of_order_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_reset_out_of_order_async_vector_env(shared_memory):\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(4)]\n    with pytest.raises(NoAsyncCallError):\n        try:\n            env = AsyncVectorEnv(env_fns, shared_memory=shared_memory)\n            env.reset_wait()\n        except NoAsyncCallError as exception:\n            assert exception.name == \"reset\"\n            raise\n        finally:",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_step_out_of_order_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_step_out_of_order_async_vector_env(shared_memory):\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(4)]\n    with pytest.raises(NoAsyncCallError):\n        try:\n            env = AsyncVectorEnv(env_fns, shared_memory=shared_memory)\n            actions = env.action_space.sample()\n            observations = env.reset()\n            observations, rewards, dones, infos = env.step_wait()\n        except AlreadyPendingCallError as exception:\n            assert exception.name == \"step\"",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_already_closed_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_already_closed_async_vector_env(shared_memory):\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(4)]\n    with pytest.raises(ClosedEnvironmentError):\n        env = AsyncVectorEnv(env_fns, shared_memory=shared_memory)\n        env.close()\n        env.reset()\n@pytest.mark.parametrize(\"shared_memory\", [True, False])\ndef test_check_spaces_async_vector_env(shared_memory):\n    # CartPole-v1 - observation_space: Box(4,), action_space: Discrete(2)\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(8)]",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_check_spaces_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_check_spaces_async_vector_env(shared_memory):\n    # CartPole-v1 - observation_space: Box(4,), action_space: Discrete(2)\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(8)]\n    # FrozenLake-v1 - Discrete(16), action_space: Discrete(4)\n    env_fns[1] = make_env(\"FrozenLake-v1\", 1)\n    with pytest.raises(RuntimeError):\n        env = AsyncVectorEnv(env_fns, shared_memory=shared_memory)\n        env.close(terminate=True)\ndef test_custom_space_async_vector_env():\n    env_fns = [make_custom_space_env(i) for i in range(4)]",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_custom_space_async_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_custom_space_async_vector_env():\n    env_fns = [make_custom_space_env(i) for i in range(4)]\n    try:\n        env = AsyncVectorEnv(env_fns, shared_memory=False)\n        reset_observations = env.reset()\n        assert isinstance(env.single_action_space, CustomSpace)\n        assert isinstance(env.action_space, Tuple)\n        actions = (\"action-2\", \"action-3\", \"action-5\", \"action-7\")\n        step_observations, rewards, dones, _ = env.step(actions)\n    finally:",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_custom_space_async_vector_env_shared_memory",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "peekOfCode": "def test_custom_space_async_vector_env_shared_memory():\n    env_fns = [make_custom_space_env(i) for i in range(4)]\n    with pytest.raises(ValueError):\n        env = AsyncVectorEnv(env_fns, shared_memory=True)\n        env.close(terminate=True)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_async_vector_env",
        "documentation": {}
    },
    {
        "label": "test_concatenate",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_numpy_utils",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_numpy_utils",
        "peekOfCode": "def test_concatenate(space):\n    def assert_type(lhs, rhs, n):\n        # Special case: if rhs is a list of scalars, lhs must be an np.ndarray\n        if np.isscalar(rhs[0]):\n            assert isinstance(lhs, np.ndarray)\n            assert all([np.isscalar(rhs[i]) for i in range(n)])\n        else:\n            assert all([isinstance(rhs[i], type(lhs)) for i in range(n)])\n    def assert_nested_equal(lhs, rhs, n):\n        assert isinstance(rhs, list)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_numpy_utils",
        "documentation": {}
    },
    {
        "label": "test_create_empty_array",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_numpy_utils",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_numpy_utils",
        "peekOfCode": "def test_create_empty_array(space, n):\n    def assert_nested_type(arr, space, n):\n        if isinstance(space, _BaseGymSpaces):\n            assert isinstance(arr, np.ndarray)\n            assert arr.dtype == space.dtype\n            assert arr.shape == (n,) + space.shape\n        elif isinstance(space, Tuple):\n            assert isinstance(arr, tuple)\n            assert len(arr) == len(space.spaces)\n            for i in range(len(arr)):",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_numpy_utils",
        "documentation": {}
    },
    {
        "label": "test_create_empty_array_zeros",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_numpy_utils",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_numpy_utils",
        "peekOfCode": "def test_create_empty_array_zeros(space, n):\n    def assert_nested_type(arr, space, n):\n        if isinstance(space, _BaseGymSpaces):\n            assert isinstance(arr, np.ndarray)\n            assert arr.dtype == space.dtype\n            assert arr.shape == (n,) + space.shape\n            assert np.all(arr == 0)\n        elif isinstance(space, Tuple):\n            assert isinstance(arr, tuple)\n            assert len(arr) == len(space.spaces)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_numpy_utils",
        "documentation": {}
    },
    {
        "label": "test_create_empty_array_none_shape_ones",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_numpy_utils",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_numpy_utils",
        "peekOfCode": "def test_create_empty_array_none_shape_ones(space):\n    def assert_nested_type(arr, space):\n        if isinstance(space, _BaseGymSpaces):\n            assert isinstance(arr, np.ndarray)\n            assert arr.dtype == space.dtype\n            assert arr.shape == space.shape\n            assert np.all(arr == 1)\n        elif isinstance(space, Tuple):\n            assert isinstance(arr, tuple)\n            assert len(arr) == len(space.spaces)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_numpy_utils",
        "documentation": {}
    },
    {
        "label": "test_create_shared_memory",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "peekOfCode": "def test_create_shared_memory(space, expected_type, n, ctx):\n    def assert_nested_type(lhs, rhs, n):\n        assert type(lhs) == type(rhs)\n        if isinstance(lhs, (list, tuple)):\n            assert len(lhs) == len(rhs)\n            for lhs_, rhs_ in zip(lhs, rhs):\n                assert_nested_type(lhs_, rhs_, n)\n        elif isinstance(lhs, (dict, OrderedDict)):\n            assert set(lhs.keys()) ^ set(rhs.keys()) == set()\n            for key in lhs.keys():",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "documentation": {}
    },
    {
        "label": "test_create_shared_memory_custom_space",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "peekOfCode": "def test_create_shared_memory_custom_space(n, ctx, space):\n    ctx = mp if (ctx is None) else mp.get_context(ctx)\n    with pytest.raises(CustomSpaceError):\n        create_shared_memory(space, n=n, ctx=ctx)\n@pytest.mark.parametrize(\n    \"space\", spaces, ids=[space.__class__.__name__ for space in spaces]\n)\ndef test_write_to_shared_memory(space):\n    def assert_nested_equal(lhs, rhs):\n        assert isinstance(rhs, list)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "documentation": {}
    },
    {
        "label": "test_write_to_shared_memory",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "peekOfCode": "def test_write_to_shared_memory(space):\n    def assert_nested_equal(lhs, rhs):\n        assert isinstance(rhs, list)\n        if isinstance(lhs, (list, tuple)):\n            for i in range(len(lhs)):\n                assert_nested_equal(lhs[i], [rhs_[i] for rhs_ in rhs])\n        elif isinstance(lhs, (dict, OrderedDict)):\n            for key in lhs.keys():\n                assert_nested_equal(lhs[key], [rhs_[key] for rhs_ in rhs])\n        elif isinstance(lhs, SynchronizedArray):",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "documentation": {}
    },
    {
        "label": "test_read_from_shared_memory",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "peekOfCode": "def test_read_from_shared_memory(space):\n    def assert_nested_equal(lhs, rhs, space, n):\n        assert isinstance(rhs, list)\n        if isinstance(space, Tuple):\n            assert isinstance(lhs, tuple)\n            for i in range(len(lhs)):\n                assert_nested_equal(\n                    lhs[i], [rhs_[i] for rhs_ in rhs], space.spaces[i], n\n                )\n        elif isinstance(space, Dict):",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "documentation": {}
    },
    {
        "label": "expected_types",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "peekOfCode": "expected_types = [\n    Array(\"d\", 1),\n    Array(\"f\", 1),\n    Array(\"f\", 3),\n    Array(\"f\", 4),\n    Array(\"B\", 1),\n    Array(\"B\", 32 * 32 * 3),\n    Array(\"i\", 1),\n    Array(\"i\", 1),\n    (Array(\"i\", 1), Array(\"i\", 1)),",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_shared_memory",
        "documentation": {}
    },
    {
        "label": "test_batch_space",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "peekOfCode": "def test_batch_space(space, expected_batch_space_4):\n    batch_space_4 = batch_space(space, n=4)\n    assert batch_space_4 == expected_batch_space_4\n@pytest.mark.parametrize(\n    \"space,expected_batch_space_4\",\n    list(zip(custom_spaces, expected_custom_batch_spaces_4)),\n    ids=[space.__class__.__name__ for space in custom_spaces],\n)\ndef test_batch_space_custom_space(space, expected_batch_space_4):\n    batch_space_4 = batch_space(space, n=4)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_batch_space_custom_space",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "peekOfCode": "def test_batch_space_custom_space(space, expected_batch_space_4):\n    batch_space_4 = batch_space(space, n=4)\n    assert batch_space_4 == expected_batch_space_4\n@pytest.mark.parametrize(\n    \"space,batch_space\",\n    list(zip(spaces, expected_batch_spaces_4)),\n    ids=[space.__class__.__name__ for space in spaces],\n)\ndef test_iterate(space, batch_space):\n    items = batch_space.sample()",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_iterate",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "peekOfCode": "def test_iterate(space, batch_space):\n    items = batch_space.sample()\n    iterator = iterate(batch_space, items)\n    for i, item in enumerate(iterator):\n        assert item in space\n    assert i == 3\n@pytest.mark.parametrize(\n    \"space,batch_space\",\n    list(zip(custom_spaces, expected_custom_batch_spaces_4)),\n    ids=[space.__class__.__name__ for space in custom_spaces],",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_iterate_custom_space",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "peekOfCode": "def test_iterate_custom_space(space, batch_space):\n    items = batch_space.sample()\n    iterator = iterate(batch_space, items)\n    for i, item in enumerate(iterator):\n        assert item in space\n    assert i == 3\n@pytest.mark.parametrize(\n    \"space\", spaces, ids=[space.__class__.__name__ for space in spaces]\n)\n@pytest.mark.parametrize(\"n\", [4, 5], ids=[f\"n={n}\" for n in [4, 5]])",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_rng_different_at_each_index",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "peekOfCode": "def test_rng_different_at_each_index(space: Space, n: int, base_seed: int):\n    \"\"\"\n    Tests that the rng values produced at each index are different\n    to prevent if the rng is copied for each subspace\n    \"\"\"\n    space.seed(base_seed)\n    batched_space = batch_space(space, n)\n    assert space.np_random is not batched_space.np_random\n    assert_rng_equal(space.np_random, batched_space.np_random)\n    batched_sample = batched_space.sample()",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_deterministic",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "peekOfCode": "def test_deterministic(space: Space, n: int, base_seed: int):\n    \"\"\"Tests the batched spaces are deterministic by using a copied version\"\"\"\n    # Copy the spaces and check that the np_random are not reference equal\n    space_a = space\n    space_a.seed(base_seed)\n    space_b = copy.deepcopy(space_a)\n    assert_rng_equal(space_a.np_random, space_b.np_random)\n    assert space_a.np_random is not space_b.np_random\n    # Batch the spaces and check that the np_random are not reference equal\n    space_a_batched = batch_space(space_a, n)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "documentation": {}
    },
    {
        "label": "expected_batch_spaces_4",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "peekOfCode": "expected_batch_spaces_4 = [\n    Box(low=-1.0, high=1.0, shape=(4,), dtype=np.float64),\n    Box(low=0.0, high=10.0, shape=(4, 1), dtype=np.float64),\n    Box(\n        low=np.array(\n            [[-1.0, 0.0, 0.0], [-1.0, 0.0, 0.0], [-1.0, 0.0, 0.0], [-1.0, 0.0, 0.0]]\n        ),\n        high=np.array(\n            [[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]\n        ),",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "documentation": {}
    },
    {
        "label": "expected_custom_batch_spaces_4",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "peekOfCode": "expected_custom_batch_spaces_4 = [\n    Tuple((CustomSpace(), CustomSpace(), CustomSpace(), CustomSpace())),\n    Tuple(\n        (\n            Tuple((CustomSpace(), CustomSpace(), CustomSpace(), CustomSpace())),\n            Box(low=0, high=255, shape=(4,), dtype=np.uint8),\n        )\n    ),\n]\n@pytest.mark.parametrize(",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_spaces",
        "documentation": {}
    },
    {
        "label": "test_create_sync_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "peekOfCode": "def test_create_sync_vector_env():\n    env_fns = [make_env(\"FrozenLake-v1\", i) for i in range(8)]\n    try:\n        env = SyncVectorEnv(env_fns)\n    finally:\n        env.close()\n    assert env.num_envs == 8\ndef test_reset_sync_vector_env():\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(8)]\n    try:",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "documentation": {}
    },
    {
        "label": "test_reset_sync_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "peekOfCode": "def test_reset_sync_vector_env():\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(8)]\n    try:\n        env = SyncVectorEnv(env_fns)\n        observations = env.reset()\n    finally:\n        env.close()\n    assert isinstance(env.observation_space, Box)\n    assert isinstance(observations, np.ndarray)\n    assert observations.dtype == env.observation_space.dtype",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "documentation": {}
    },
    {
        "label": "test_step_sync_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "peekOfCode": "def test_step_sync_vector_env(use_single_action_space):\n    env_fns = [make_env(\"FrozenLake-v1\", i) for i in range(8)]\n    try:\n        env = SyncVectorEnv(env_fns)\n        observations = env.reset()\n        assert isinstance(env.single_action_space, Discrete)\n        assert isinstance(env.action_space, MultiDiscrete)\n        if use_single_action_space:\n            actions = [env.single_action_space.sample() for _ in range(8)]\n        else:",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "documentation": {}
    },
    {
        "label": "test_call_sync_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "peekOfCode": "def test_call_sync_vector_env():\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(4)]\n    try:\n        env = SyncVectorEnv(env_fns)\n        _ = env.reset()\n        images = env.call(\"render\", mode=\"rgb_array\")\n        gravity = env.call(\"gravity\")\n    finally:\n        env.close()\n    assert isinstance(images, tuple)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "documentation": {}
    },
    {
        "label": "test_set_attr_sync_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "peekOfCode": "def test_set_attr_sync_vector_env():\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(4)]\n    try:\n        env = SyncVectorEnv(env_fns)\n        env.set_attr(\"gravity\", [9.81, 3.72, 8.87, 1.62])\n        gravity = env.get_attr(\"gravity\")\n        assert gravity == (9.81, 3.72, 8.87, 1.62)\n    finally:\n        env.close()\ndef test_check_spaces_sync_vector_env():",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "documentation": {}
    },
    {
        "label": "test_check_spaces_sync_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "peekOfCode": "def test_check_spaces_sync_vector_env():\n    # CartPole-v1 - observation_space: Box(4,), action_space: Discrete(2)\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(8)]\n    # FrozenLake-v1 - Discrete(16), action_space: Discrete(4)\n    env_fns[1] = make_env(\"FrozenLake-v1\", 1)\n    with pytest.raises(RuntimeError):\n        env = SyncVectorEnv(env_fns)\n        env.close()\ndef test_custom_space_sync_vector_env():\n    env_fns = [make_custom_space_env(i) for i in range(4)]",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "documentation": {}
    },
    {
        "label": "test_custom_space_sync_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "peekOfCode": "def test_custom_space_sync_vector_env():\n    env_fns = [make_custom_space_env(i) for i in range(4)]\n    try:\n        env = SyncVectorEnv(env_fns)\n        reset_observations = env.reset()\n        assert isinstance(env.single_action_space, CustomSpace)\n        assert isinstance(env.action_space, Tuple)\n        actions = (\"action-2\", \"action-3\", \"action-5\", \"action-7\")\n        step_observations, rewards, dones, _ = env.step(actions)\n    finally:",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "documentation": {}
    },
    {
        "label": "test_sync_vector_env_seed",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "peekOfCode": "def test_sync_vector_env_seed():\n    env = make_env(\"BipedalWalker-v3\", seed=123)()\n    sync_vector_env = SyncVectorEnv([make_env(\"BipedalWalker-v3\", seed=123)])\n    assert_rng_equal(env.action_space.np_random, sync_vector_env.action_space.np_random)\n    for _ in range(100):\n        env_action = env.action_space.sample()\n        vector_action = sync_vector_env.action_space.sample()\n        assert np.all(env_action == vector_action)\n@pytest.mark.parametrize(\"spec\", spec_list, ids=[spec.id for spec in spec_list])\ndef test_sync_vector_determinism(spec: EnvSpec, seed: int = 123, n: int = 3):",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "documentation": {}
    },
    {
        "label": "test_sync_vector_determinism",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "peekOfCode": "def test_sync_vector_determinism(spec: EnvSpec, seed: int = 123, n: int = 3):\n    \"\"\"Check that for all environments, the sync vector envs produce the same action samples using the same seeds\"\"\"\n    env_1 = SyncVectorEnv([make_env(spec.id, seed=seed) for _ in range(n)])\n    env_2 = SyncVectorEnv([make_env(spec.id, seed=seed) for _ in range(n)])\n    assert_rng_equal(env_1.action_space.np_random, env_2.action_space.np_random)\n    for _ in range(100):\n        env_1_samples = env_1.action_space.sample()\n        env_2_samples = env_2.action_space.sample()\n        assert np.all(env_1_samples == env_2_samples)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_sync_vector_env",
        "documentation": {}
    },
    {
        "label": "test_vector_env_equal",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_vector_env",
        "peekOfCode": "def test_vector_env_equal(shared_memory):\n    env_fns = [make_env(\"CartPole-v1\", i) for i in range(4)]\n    num_steps = 100\n    try:\n        async_env = AsyncVectorEnv(env_fns, shared_memory=shared_memory)\n        sync_env = SyncVectorEnv(env_fns)\n        assert async_env.num_envs == sync_env.num_envs\n        assert async_env.observation_space == sync_env.observation_space\n        assert async_env.single_observation_space == sync_env.single_observation_space\n        assert async_env.action_space == sync_env.action_space",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_vector_env",
        "documentation": {}
    },
    {
        "label": "test_custom_space_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_vector_env",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_vector_env",
        "peekOfCode": "def test_custom_space_vector_env():\n    env = VectorEnv(4, CustomSpace(), CustomSpace())\n    assert isinstance(env.single_observation_space, CustomSpace)\n    assert isinstance(env.observation_space, Tuple)\n    assert isinstance(env.single_action_space, CustomSpace)\n    assert isinstance(env.action_space, Tuple)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_vector_env",
        "documentation": {}
    },
    {
        "label": "DummyWrapper",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_vector_env_wrapper",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_vector_env_wrapper",
        "peekOfCode": "class DummyWrapper(VectorEnvWrapper):\n    def __init__(self, env):\n        self.env = env\n        self.counter = 0\n    def reset_async(self, **kwargs):\n        super().reset_async()\n        self.counter += 1\ndef test_vector_env_wrapper_inheritance():\n    env = make(\"FrozenLake-v1\", asynchronous=False)\n    wrapped = DummyWrapper(env)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_vector_env_wrapper",
        "documentation": {}
    },
    {
        "label": "test_vector_env_wrapper_inheritance",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_vector_env_wrapper",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_vector_env_wrapper",
        "peekOfCode": "def test_vector_env_wrapper_inheritance():\n    env = make(\"FrozenLake-v1\", asynchronous=False)\n    wrapped = DummyWrapper(env)\n    wrapped.reset()\n    assert wrapped.counter == 1\ndef test_vector_env_wrapper_attributes():\n    \"\"\"Test if `set_attr`, `call` methods for VecEnvWrapper get correctly forwarded to the vector env it is wrapping.\"\"\"\n    env = make(\"CartPole-v1\", num_envs=3)\n    wrapped = DummyWrapper(make(\"CartPole-v1\", num_envs=3))\n    assert np.allclose(wrapped.call(\"gravity\"), env.call(\"gravity\"))",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_vector_env_wrapper",
        "documentation": {}
    },
    {
        "label": "test_vector_env_wrapper_attributes",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.test_vector_env_wrapper",
        "description": "repos_that_could_be_useful.gym.tests.vector.test_vector_env_wrapper",
        "peekOfCode": "def test_vector_env_wrapper_attributes():\n    \"\"\"Test if `set_attr`, `call` methods for VecEnvWrapper get correctly forwarded to the vector env it is wrapping.\"\"\"\n    env = make(\"CartPole-v1\", num_envs=3)\n    wrapped = DummyWrapper(make(\"CartPole-v1\", num_envs=3))\n    assert np.allclose(wrapped.call(\"gravity\"), env.call(\"gravity\"))\n    env.set_attr(\"gravity\", [20.0, 20.0, 20.0])\n    wrapped.set_attr(\"gravity\", [20.0, 20.0, 20.0])\n    assert np.allclose(wrapped.get_attr(\"gravity\"), env.get_attr(\"gravity\"))",
        "detail": "repos_that_could_be_useful.gym.tests.vector.test_vector_env_wrapper",
        "documentation": {}
    },
    {
        "label": "UnittestSlowEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.utils",
        "description": "repos_that_could_be_useful.gym.tests.vector.utils",
        "peekOfCode": "class UnittestSlowEnv(gym.Env):\n    def __init__(self, slow_reset=0.3):\n        super().__init__()\n        self.slow_reset = slow_reset\n        self.observation_space = Box(\n            low=0, high=255, shape=(HEIGHT, WIDTH, 3), dtype=np.uint8\n        )\n        self.action_space = Box(low=0.0, high=1.0, shape=(), dtype=np.float32)\n    def reset(self, *, seed: Optional[int] = None, options: Optional[dict] = None):\n        super().reset(seed=seed)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "CustomSpace",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.utils",
        "description": "repos_that_could_be_useful.gym.tests.vector.utils",
        "peekOfCode": "class CustomSpace(gym.Space):\n    \"\"\"Minimal custom observation space.\"\"\"\n    def sample(self):\n        return self.np_random.integers(0, 10, ())\n    def contains(self, x):\n        return 0 <= x <= 10\n    def __eq__(self, other):\n        return isinstance(other, CustomSpace)\ncustom_spaces = [\n    CustomSpace(),",
        "detail": "repos_that_could_be_useful.gym.tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "CustomSpaceEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.utils",
        "description": "repos_that_could_be_useful.gym.tests.vector.utils",
        "peekOfCode": "class CustomSpaceEnv(gym.Env):\n    def __init__(self):\n        super().__init__()\n        self.observation_space = CustomSpace()\n        self.action_space = CustomSpace()\n    def reset(self, *, seed: Optional[int] = None, options: Optional[dict] = None):\n        super().reset(seed=seed)\n        return \"reset\"\n    def step(self, action):\n        observation = f\"step({action:s})\"",
        "detail": "repos_that_could_be_useful.gym.tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "make_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.utils",
        "description": "repos_that_could_be_useful.gym.tests.vector.utils",
        "peekOfCode": "def make_env(env_name, seed):\n    def _make():\n        env = gym.make(env_name)\n        env.action_space.seed(seed)\n        env.reset(seed=seed)\n        return env\n    return _make\ndef make_slow_env(slow_reset, seed):\n    def _make():\n        env = UnittestSlowEnv(slow_reset=slow_reset)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "make_slow_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.utils",
        "description": "repos_that_could_be_useful.gym.tests.vector.utils",
        "peekOfCode": "def make_slow_env(slow_reset, seed):\n    def _make():\n        env = UnittestSlowEnv(slow_reset=slow_reset)\n        env.reset(seed=seed)\n        return env\n    return _make\ndef make_custom_space_env(seed):\n    def _make():\n        env = CustomSpaceEnv()\n        env.reset(seed=seed)",
        "detail": "repos_that_could_be_useful.gym.tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "make_custom_space_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.utils",
        "description": "repos_that_could_be_useful.gym.tests.vector.utils",
        "peekOfCode": "def make_custom_space_env(seed):\n    def _make():\n        env = CustomSpaceEnv()\n        env.reset(seed=seed)\n        return env\n    return _make\ndef assert_rng_equal(rng_1: RandomNumberGenerator, rng_2: RandomNumberGenerator):\n    assert rng_1.bit_generator.state == rng_2.bit_generator.state",
        "detail": "repos_that_could_be_useful.gym.tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "assert_rng_equal",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.utils",
        "description": "repos_that_could_be_useful.gym.tests.vector.utils",
        "peekOfCode": "def assert_rng_equal(rng_1: RandomNumberGenerator, rng_2: RandomNumberGenerator):\n    assert rng_1.bit_generator.state == rng_2.bit_generator.state",
        "detail": "repos_that_could_be_useful.gym.tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "spaces",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.utils",
        "description": "repos_that_could_be_useful.gym.tests.vector.utils",
        "peekOfCode": "spaces = [\n    Box(low=np.array(-1.0), high=np.array(1.0), dtype=np.float64),\n    Box(low=np.array([0.0]), high=np.array([10.0]), dtype=np.float64),\n    Box(\n        low=np.array([-1.0, 0.0, 0.0]), high=np.array([1.0, 1.0, 1.0]), dtype=np.float64\n    ),\n    Box(\n        low=np.array([[-1.0, 0.0], [0.0, -1.0]]), high=np.ones((2, 2)), dtype=np.float64\n    ),\n    Box(low=0, high=255, shape=(), dtype=np.uint8),",
        "detail": "repos_that_could_be_useful.gym.tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "custom_spaces",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.vector.utils",
        "description": "repos_that_could_be_useful.gym.tests.vector.utils",
        "peekOfCode": "custom_spaces = [\n    CustomSpace(),\n    Tuple((CustomSpace(), Box(low=0, high=255, shape=(), dtype=np.uint8))),\n]\nclass CustomSpaceEnv(gym.Env):\n    def __init__(self):\n        super().__init__()\n        self.observation_space = CustomSpace()\n        self.action_space = CustomSpace()\n    def reset(self, *, seed: Optional[int] = None, options: Optional[dict] = None):",
        "detail": "repos_that_could_be_useful.gym.tests.vector.utils",
        "documentation": {}
    },
    {
        "label": "FakeEnvironment",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.flatten_test",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.flatten_test",
        "peekOfCode": "class FakeEnvironment(gym.Env):\n    def __init__(self, observation_space):\n        self.observation_space = observation_space\n    def reset(self, *, seed: Optional[int] = None, options: Optional[dict] = None):\n        super().reset(seed=seed)\n        self.observation = self.observation_space.sample()\n        return self.observation\nOBSERVATION_SPACES = (\n    (\n        Dict(",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.flatten_test",
        "documentation": {}
    },
    {
        "label": "TestFlattenEnvironment",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.flatten_test",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.flatten_test",
        "peekOfCode": "class TestFlattenEnvironment:\n    @pytest.mark.parametrize(\"observation_space, ordered_values\", OBSERVATION_SPACES)\n    def test_flattened_environment(self, observation_space, ordered_values):\n        \"\"\"\n        make sure that flattened observations occur in the order expected\n        \"\"\"\n        env = FakeEnvironment(observation_space=observation_space)\n        wrapped_env = FlattenObservation(env)\n        flattened = wrapped_env.reset()\n        unflattened = unflatten(env.observation_space, flattened)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.flatten_test",
        "documentation": {}
    },
    {
        "label": "OBSERVATION_SPACES",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.flatten_test",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.flatten_test",
        "peekOfCode": "OBSERVATION_SPACES = (\n    (\n        Dict(\n            OrderedDict(\n                [\n                    (\"key1\", Box(shape=(2, 3), low=0, high=0, dtype=np.float32)),\n                    (\"key2\", Box(shape=(), low=1, high=1, dtype=np.float32)),\n                    (\"key3\", Box(shape=(2,), low=2, high=2, dtype=np.float32)),\n                ]\n            )",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.flatten_test",
        "documentation": {}
    },
    {
        "label": "FakeEnvironment",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.nested_dict_test",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.nested_dict_test",
        "peekOfCode": "class FakeEnvironment(gym.Env):\n    def __init__(self, observation_space):\n        self.observation_space = observation_space\n        self.obs_keys = self.observation_space.spaces.keys()\n        self.action_space = Box(shape=(1,), low=-1, high=1, dtype=np.float32)\n    def render(self, width=32, height=32, *args, **kwargs):\n        del args\n        del kwargs\n        image_shape = (height, width, 3)\n        return np.zeros(image_shape, dtype=np.uint8)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.nested_dict_test",
        "documentation": {}
    },
    {
        "label": "TestNestedDictWrapper",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.nested_dict_test",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.nested_dict_test",
        "peekOfCode": "class TestNestedDictWrapper:\n    @pytest.mark.parametrize(\"observation_space, flat_shape\", NESTED_DICT_TEST_CASES)\n    def test_nested_dicts_size(self, observation_space, flat_shape):\n        env = FakeEnvironment(observation_space=observation_space)\n        # Make sure we are testing the right environment for the test.\n        observation_space = env.observation_space\n        assert isinstance(observation_space, Dict)\n        wrapped_env = FlattenObservation(FilterObservation(env, env.obs_keys))\n        assert wrapped_env.observation_space.shape == flat_shape\n        assert wrapped_env.observation_space.dtype == np.float32",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.nested_dict_test",
        "documentation": {}
    },
    {
        "label": "NESTED_DICT_TEST_CASES",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.nested_dict_test",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.nested_dict_test",
        "peekOfCode": "NESTED_DICT_TEST_CASES = (\n    (\n        Dict(\n            {\n                \"key1\": Box(shape=(2,), low=-1, high=1, dtype=np.float32),\n                \"key2\": Dict(\n                    {\n                        \"subkey1\": Box(shape=(2,), low=-1, high=1, dtype=np.float32),\n                        \"subkey2\": Box(shape=(2,), low=-1, high=1, dtype=np.float32),\n                    }",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.nested_dict_test",
        "documentation": {}
    },
    {
        "label": "env_fn",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_atari_preprocessing",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_atari_preprocessing",
        "peekOfCode": "def env_fn():\n    return lambda: gym.make(\"PongNoFrameskip-v4\")\ndef test_atari_preprocessing_grayscale(env_fn):\n    import cv2\n    env1 = env_fn()\n    env2 = AtariPreprocessing(\n        env_fn(), screen_size=84, grayscale_obs=True, frame_skip=1, noop_max=0\n    )\n    env3 = AtariPreprocessing(\n        env_fn(), screen_size=84, grayscale_obs=False, frame_skip=1, noop_max=0",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_atari_preprocessing",
        "documentation": {}
    },
    {
        "label": "test_atari_preprocessing_grayscale",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_atari_preprocessing",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_atari_preprocessing",
        "peekOfCode": "def test_atari_preprocessing_grayscale(env_fn):\n    import cv2\n    env1 = env_fn()\n    env2 = AtariPreprocessing(\n        env_fn(), screen_size=84, grayscale_obs=True, frame_skip=1, noop_max=0\n    )\n    env3 = AtariPreprocessing(\n        env_fn(), screen_size=84, grayscale_obs=False, frame_skip=1, noop_max=0\n    )\n    env4 = AtariPreprocessing(",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_atari_preprocessing",
        "documentation": {}
    },
    {
        "label": "test_atari_preprocessing_scale",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_atari_preprocessing",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_atari_preprocessing",
        "peekOfCode": "def test_atari_preprocessing_scale(env_fn):\n    # arbitrarily chosen number for stepping into env. and ensuring all observations are in the required range\n    max_test_steps = 10\n    for grayscale in [True, False]:\n        for scaled in [True, False]:\n            env = AtariPreprocessing(\n                env_fn(),\n                screen_size=84,\n                grayscale_obs=grayscale,\n                scale_obs=scaled,",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_atari_preprocessing",
        "documentation": {}
    },
    {
        "label": "DummyResetEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "peekOfCode": "class DummyResetEnv(gym.Env):\n    \"\"\"A dummy environment which returns ascending numbers starting at `0` when :meth:`self.step()` is called.\n    After the second call to :meth:`self.step()` done is true.\n    Info dicts are also returned containing the same number returned as an observation, accessible via the key \"count\".\n    This environment is provided for the purpose of testing the autoreset wrapper.\n    \"\"\"\n    metadata = {}\n    def __init__(self):\n        \"\"\"Initialise the DummyResetEnv.\"\"\"\n        self.action_space = gym.spaces.Box(",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "documentation": {}
    },
    {
        "label": "unwrap_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "peekOfCode": "def unwrap_env(env) -> Generator[gym.Wrapper, None, None]:\n    \"\"\"Unwraps an environment yielding all wrappers around environment.\"\"\"\n    while isinstance(env, gym.Wrapper):\n        yield type(env)\n        env = env.env\n@pytest.mark.parametrize(\"spec\", spec_list, ids=[spec.id for spec in spec_list])\ndef test_make_autoreset_true(spec):\n    \"\"\"Tests gym.make with `autoreset=True`, and check that the reset actually happens.\n    Note: This test assumes that the outermost wrapper is AutoResetWrapper so if that\n     is being changed in the future, this test will break and need to be updated.",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "documentation": {}
    },
    {
        "label": "test_make_autoreset_true",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "peekOfCode": "def test_make_autoreset_true(spec):\n    \"\"\"Tests gym.make with `autoreset=True`, and check that the reset actually happens.\n    Note: This test assumes that the outermost wrapper is AutoResetWrapper so if that\n     is being changed in the future, this test will break and need to be updated.\n    Note: This test assumes that all first-party environments will terminate in a finite\n     amount of time with random actions, which is true as of the time of adding this test.\n    \"\"\"\n    with pytest.warns(None):\n        env = gym.make(spec.id, autoreset=True)\n    assert AutoResetWrapper in unwrap_env(env)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "documentation": {}
    },
    {
        "label": "test_gym_make_autoreset",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "peekOfCode": "def test_gym_make_autoreset(spec):\n    \"\"\"Tests that `gym.make` autoreset wrapper is applied only when `gym.make(..., autoreset=True)`.\"\"\"\n    with pytest.warns(None):\n        env = gym.make(spec.id)\n    assert AutoResetWrapper not in unwrap_env(env)\n    env.close()\n    with pytest.warns(None):\n        env = gym.make(spec.id, autoreset=False)\n    assert AutoResetWrapper not in unwrap_env(env)\n    env.close()",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "documentation": {}
    },
    {
        "label": "test_autoreset_wrapper_autoreset",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "peekOfCode": "def test_autoreset_wrapper_autoreset():\n    \"\"\"Tests the autoreset wrapper actually automatically resets correctly.\"\"\"\n    env = DummyResetEnv()\n    env = AutoResetWrapper(env)\n    obs, info = env.reset(return_info=True)\n    assert obs == np.array([0])\n    assert info == {\"count\": 0}\n    action = 0\n    obs, reward, done, info = env.step(action)\n    assert obs == np.array([1])",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_autoreset",
        "documentation": {}
    },
    {
        "label": "test_clip_action",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_clip_action",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_clip_action",
        "peekOfCode": "def test_clip_action():\n    # mountaincar: action-based rewards\n    env = gym.make(\"MountainCarContinuous-v0\")\n    wrapped_env = ClipAction(gym.make(\"MountainCarContinuous-v0\"))\n    seed = 0\n    env.reset(seed=seed)\n    wrapped_env.reset(seed=seed)\n    actions = [[0.4], [1.2], [-0.3], [0.0], [-2.5]]\n    for action in actions:\n        obs1, r1, d1, _ = env.step(",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_clip_action",
        "documentation": {}
    },
    {
        "label": "FakeEnvironment",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_filter_observation",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_filter_observation",
        "peekOfCode": "class FakeEnvironment(gym.Env):\n    def __init__(self, observation_keys=(\"state\")):\n        self.observation_space = spaces.Dict(\n            {\n                name: spaces.Box(shape=(2,), low=-1, high=1, dtype=np.float32)\n                for name in observation_keys\n            }\n        )\n        self.action_space = spaces.Box(shape=(1,), low=-1, high=1, dtype=np.float32)\n    def render(self, width=32, height=32, *args, **kwargs):",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_filter_observation",
        "documentation": {}
    },
    {
        "label": "TestFilterObservation",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_filter_observation",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_filter_observation",
        "peekOfCode": "class TestFilterObservation:\n    @pytest.mark.parametrize(\n        \"observation_keys,filter_keys\", FILTER_OBSERVATION_TEST_CASES\n    )\n    def test_filter_observation(self, observation_keys, filter_keys):\n        env = FakeEnvironment(observation_keys=observation_keys)\n        # Make sure we are testing the right environment for the test.\n        observation_space = env.observation_space\n        assert isinstance(observation_space, spaces.Dict)\n        wrapped_env = FilterObservation(env, filter_keys=filter_keys)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_filter_observation",
        "documentation": {}
    },
    {
        "label": "FILTER_OBSERVATION_TEST_CASES",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_filter_observation",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_filter_observation",
        "peekOfCode": "FILTER_OBSERVATION_TEST_CASES = (\n    ((\"key1\", \"key2\"), (\"key1\",)),\n    ((\"key1\", \"key2\"), (\"key1\", \"key2\")),\n    ((\"key1\",), None),\n    ((\"key1\",), (\"key1\",)),\n)\nERROR_TEST_CASES = (\n    (\"key\", ValueError, \"All the filter_keys must be included..*\"),\n    (False, TypeError, \"'bool' object is not iterable\"),\n    (1, TypeError, \"'int' object is not iterable\"),",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_filter_observation",
        "documentation": {}
    },
    {
        "label": "ERROR_TEST_CASES",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_filter_observation",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_filter_observation",
        "peekOfCode": "ERROR_TEST_CASES = (\n    (\"key\", ValueError, \"All the filter_keys must be included..*\"),\n    (False, TypeError, \"'bool' object is not iterable\"),\n    (1, TypeError, \"'int' object is not iterable\"),\n)\nclass TestFilterObservation:\n    @pytest.mark.parametrize(\n        \"observation_keys,filter_keys\", FILTER_OBSERVATION_TEST_CASES\n    )\n    def test_filter_observation(self, observation_keys, filter_keys):",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_filter_observation",
        "documentation": {}
    },
    {
        "label": "test_flatten_observation",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_flatten_observation",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_flatten_observation",
        "peekOfCode": "def test_flatten_observation(env_id):\n    env = gym.make(env_id)\n    wrapped_env = FlattenObservation(env)\n    obs = env.reset()\n    wrapped_obs = wrapped_env.reset()\n    space = spaces.Tuple((spaces.Discrete(32), spaces.Discrete(11), spaces.Discrete(2)))\n    wrapped_space = spaces.Box(0, 1, [32 + 11 + 2], dtype=np.int64)\n    assert space.contains(obs)\n    assert wrapped_space.contains(wrapped_obs)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_flatten_observation",
        "documentation": {}
    },
    {
        "label": "test_frame_stack",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_frame_stack",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_frame_stack",
        "peekOfCode": "def test_frame_stack(env_id, num_stack, lz4_compress):\n    env = gym.make(env_id)\n    shape = env.observation_space.shape\n    env = FrameStack(env, num_stack, lz4_compress)\n    assert env.observation_space.shape == (num_stack,) + shape\n    assert env.observation_space.dtype == env.env.observation_space.dtype\n    dup = gym.make(env_id)\n    obs = env.reset(seed=0)\n    dup_obs = dup.reset(seed=0)\n    assert np.allclose(obs[-1], dup_obs)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_frame_stack",
        "documentation": {}
    },
    {
        "label": "test_gray_scale_observation",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_gray_scale_observation",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_gray_scale_observation",
        "peekOfCode": "def test_gray_scale_observation(env_id, keep_dim):\n    gray_env = AtariPreprocessing(gym.make(env_id), screen_size=84, grayscale_obs=True)\n    rgb_env = AtariPreprocessing(gym.make(env_id), screen_size=84, grayscale_obs=False)\n    wrapped_env = GrayScaleObservation(rgb_env, keep_dim=keep_dim)\n    assert rgb_env.observation_space.shape[-1] == 3\n    seed = 0\n    gray_obs = gray_env.reset(seed=seed)\n    wrapped_obs = wrapped_env.reset(seed=seed)\n    if keep_dim:\n        assert wrapped_env.observation_space.shape[-1] == 1",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_gray_scale_observation",
        "documentation": {}
    },
    {
        "label": "DummyRewardEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "peekOfCode": "class DummyRewardEnv(gym.Env):\n    metadata = {}\n    def __init__(self, return_reward_idx=0):\n        self.action_space = gym.spaces.Discrete(2)\n        self.observation_space = gym.spaces.Box(\n            low=np.array([-1.0]), high=np.array([1.0]), dtype=np.float64\n        )\n        self.returned_rewards = [0, 1, 2, 3, 4]\n        self.return_reward_idx = return_reward_idx\n        self.t = self.return_reward_idx",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "documentation": {}
    },
    {
        "label": "make_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "peekOfCode": "def make_env(return_reward_idx):\n    def thunk():\n        env = DummyRewardEnv(return_reward_idx)\n        return env\n    return thunk\n@pytest.mark.parametrize(\"return_info\", [False, True])\ndef test_normalize_observation(return_info: bool):\n    env = DummyRewardEnv(return_reward_idx=0)\n    env = NormalizeObservation(env)\n    env.reset(return_info=return_info)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "documentation": {}
    },
    {
        "label": "test_normalize_observation",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "peekOfCode": "def test_normalize_observation(return_info: bool):\n    env = DummyRewardEnv(return_reward_idx=0)\n    env = NormalizeObservation(env)\n    env.reset(return_info=return_info)\n    env.step(env.action_space.sample())\n    assert_almost_equal(env.obs_rms.mean, 0.5, decimal=4)\n    env.step(env.action_space.sample())\n    assert_almost_equal(env.obs_rms.mean, 1.0, decimal=4)\ndef test_normalize_reset_info():\n    env = DummyRewardEnv(return_reward_idx=0)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "documentation": {}
    },
    {
        "label": "test_normalize_reset_info",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "peekOfCode": "def test_normalize_reset_info():\n    env = DummyRewardEnv(return_reward_idx=0)\n    env = NormalizeObservation(env)\n    obs = env.reset()\n    assert isinstance(obs, np.ndarray)\n    del obs\n    obs = env.reset(return_info=False)\n    assert isinstance(obs, np.ndarray)\n    del obs\n    obs, info = env.reset(return_info=True)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "documentation": {}
    },
    {
        "label": "test_normalize_return",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "peekOfCode": "def test_normalize_return():\n    env = DummyRewardEnv(return_reward_idx=0)\n    env = NormalizeReward(env)\n    env.reset()\n    env.step(env.action_space.sample())\n    assert_almost_equal(\n        env.return_rms.mean,\n        np.mean([1]),  # [first return]\n        decimal=4,\n    )",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "documentation": {}
    },
    {
        "label": "test_normalize_observation_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "peekOfCode": "def test_normalize_observation_vector_env():\n    env_fns = [make_env(0), make_env(1)]\n    envs = gym.vector.SyncVectorEnv(env_fns)\n    envs.reset()\n    obs, reward, _, _ = envs.step(envs.action_space.sample())\n    np.testing.assert_almost_equal(obs, np.array([[1], [2]]), decimal=4)\n    np.testing.assert_almost_equal(reward, np.array([1, 2]), decimal=4)\n    env_fns = [make_env(0), make_env(1)]\n    envs = gym.vector.SyncVectorEnv(env_fns)\n    envs = NormalizeObservation(envs)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "documentation": {}
    },
    {
        "label": "test_normalize_return_vector_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "peekOfCode": "def test_normalize_return_vector_env():\n    env_fns = [make_env(0), make_env(1)]\n    envs = gym.vector.SyncVectorEnv(env_fns)\n    envs = NormalizeReward(envs)\n    obs = envs.reset()\n    obs, reward, _, _ = envs.step(envs.action_space.sample())\n    assert_almost_equal(\n        envs.return_rms.mean,\n        np.mean([1.5]),  # the mean of first returns [[1, 2]]\n        decimal=4,",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_normalize",
        "documentation": {}
    },
    {
        "label": "test_order_enforcing_reset_info",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_order_enforcing",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_order_enforcing",
        "peekOfCode": "def test_order_enforcing_reset_info():\n    env = gym.make(\"CartPole-v1\")\n    env = OrderEnforcing(env)\n    ob_space = env.observation_space\n    obs = env.reset()\n    assert ob_space.contains(obs)\n    del obs\n    obs = env.reset(return_info=False)\n    assert ob_space.contains(obs)\n    del obs",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_order_enforcing",
        "documentation": {}
    },
    {
        "label": "FakeEnvironment",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_pixel_observation",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_pixel_observation",
        "peekOfCode": "class FakeEnvironment(gym.Env):\n    def __init__(self):\n        self.action_space = spaces.Box(shape=(1,), low=-1, high=1, dtype=np.float32)\n    def render(self, width=32, height=32, *args, **kwargs):\n        del args\n        del kwargs\n        image_shape = (height, width, 3)\n        return np.zeros(image_shape, dtype=np.uint8)\n    def reset(self, *, seed: Optional[int] = None, options: Optional[dict] = None):\n        super().reset(seed=seed)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_pixel_observation",
        "documentation": {}
    },
    {
        "label": "FakeArrayObservationEnvironment",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_pixel_observation",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_pixel_observation",
        "peekOfCode": "class FakeArrayObservationEnvironment(FakeEnvironment):\n    def __init__(self, *args, **kwargs):\n        self.observation_space = spaces.Box(\n            shape=(2,), low=-1, high=1, dtype=np.float32\n        )\n        super().__init__(*args, **kwargs)\nclass FakeDictObservationEnvironment(FakeEnvironment):\n    def __init__(self, *args, **kwargs):\n        self.observation_space = spaces.Dict(\n            {",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_pixel_observation",
        "documentation": {}
    },
    {
        "label": "FakeDictObservationEnvironment",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_pixel_observation",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_pixel_observation",
        "peekOfCode": "class FakeDictObservationEnvironment(FakeEnvironment):\n    def __init__(self, *args, **kwargs):\n        self.observation_space = spaces.Dict(\n            {\n                \"state\": spaces.Box(shape=(2,), low=-1, high=1, dtype=np.float32),\n            }\n        )\n        super().__init__(*args, **kwargs)\nclass TestPixelObservationWrapper:\n    @pytest.mark.parametrize(\"pixels_only\", (True, False))",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_pixel_observation",
        "documentation": {}
    },
    {
        "label": "TestPixelObservationWrapper",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_pixel_observation",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_pixel_observation",
        "peekOfCode": "class TestPixelObservationWrapper:\n    @pytest.mark.parametrize(\"pixels_only\", (True, False))\n    def test_dict_observation(self, pixels_only):\n        pixel_key = \"rgb\"\n        env = FakeDictObservationEnvironment()\n        # Make sure we are testing the right environment for the test.\n        observation_space = env.observation_space\n        assert isinstance(observation_space, spaces.Dict)\n        width, height = (320, 240)\n        # The wrapper should only add one observation.",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_pixel_observation",
        "documentation": {}
    },
    {
        "label": "test_record_episode_statistics",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_record_episode_statistics",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_record_episode_statistics",
        "peekOfCode": "def test_record_episode_statistics(env_id, deque_size):\n    env = gym.make(env_id)\n    env = RecordEpisodeStatistics(env, deque_size)\n    for n in range(5):\n        env.reset()\n        assert env.episode_returns[0] == 0.0\n        assert env.episode_lengths[0] == 0\n        for t in range(env.spec.max_episode_steps):\n            _, _, done, info = env.step(env.action_space.sample())\n            if done:",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_record_episode_statistics",
        "documentation": {}
    },
    {
        "label": "test_record_episode_statistics_reset_info",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_record_episode_statistics",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_record_episode_statistics",
        "peekOfCode": "def test_record_episode_statistics_reset_info():\n    env = gym.make(\"CartPole-v1\")\n    env = RecordEpisodeStatistics(env)\n    ob_space = env.observation_space\n    obs = env.reset()\n    assert ob_space.contains(obs)\n    del obs\n    obs, info = env.reset(return_info=True)\n    assert ob_space.contains(obs)\n    assert isinstance(info, dict)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_record_episode_statistics",
        "documentation": {}
    },
    {
        "label": "test_record_episode_statistics_with_vectorenv",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_record_episode_statistics",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_record_episode_statistics",
        "peekOfCode": "def test_record_episode_statistics_with_vectorenv(num_envs, asynchronous):\n    envs = gym.vector.make(\"CartPole-v1\", num_envs=num_envs, asynchronous=asynchronous)\n    envs = RecordEpisodeStatistics(envs)\n    max_episode_step = (\n        envs.env_fns[0]().spec.max_episode_steps\n        if asynchronous\n        else envs.env.envs[0].spec.max_episode_steps\n    )\n    envs.reset()\n    for _ in range(max_episode_step + 1):",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_record_episode_statistics",
        "documentation": {}
    },
    {
        "label": "test_record_video_using_default_trigger",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "peekOfCode": "def test_record_video_using_default_trigger():\n    env = gym.make(\"CartPole-v1\")\n    env = gym.wrappers.RecordVideo(env, \"videos\")\n    env.reset()\n    for _ in range(199):\n        action = env.action_space.sample()\n        _, _, done, _ = env.step(action)\n        if done:\n            env.reset()\n    env.close()",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "documentation": {}
    },
    {
        "label": "test_record_video_reset_return_info",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "peekOfCode": "def test_record_video_reset_return_info():\n    env = gym.make(\"CartPole-v1\")\n    env = gym.wrappers.RecordVideo(env, \"videos\", step_trigger=lambda x: x % 100 == 0)\n    ob_space = env.observation_space\n    obs, info = env.reset(return_info=True)\n    env.close()\n    assert os.path.isdir(\"videos\")\n    shutil.rmtree(\"videos\")\n    assert ob_space.contains(obs)\n    assert isinstance(info, dict)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "documentation": {}
    },
    {
        "label": "test_record_video_step_trigger",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "peekOfCode": "def test_record_video_step_trigger():\n    env = gym.make(\"CartPole-v1\")\n    env._max_episode_steps = 20\n    env = gym.wrappers.RecordVideo(env, \"videos\", step_trigger=lambda x: x % 100 == 0)\n    env.reset()\n    for _ in range(199):\n        action = env.action_space.sample()\n        _, _, done, _ = env.step(action)\n        if done:\n            env.reset()",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "documentation": {}
    },
    {
        "label": "make_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "peekOfCode": "def make_env(gym_id, seed):\n    def thunk():\n        env = gym.make(gym_id)\n        env._max_episode_steps = 20\n        if seed == 1:\n            env = gym.wrappers.RecordVideo(\n                env, \"videos\", step_trigger=lambda x: x % 100 == 0\n            )\n        return env\n    return thunk",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "documentation": {}
    },
    {
        "label": "test_record_video_within_vector",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "peekOfCode": "def test_record_video_within_vector():\n    envs = gym.vector.SyncVectorEnv([make_env(\"CartPole-v1\", 1 + i) for i in range(2)])\n    envs = gym.wrappers.RecordEpisodeStatistics(envs)\n    envs.reset()\n    for i in range(199):\n        _, _, _, infos = envs.step(envs.action_space.sample())\n        for info in infos:\n            if \"episode\" in info.keys():\n                print(f\"episode_reward={info['episode']['r']}\")\n                break",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_record_video",
        "documentation": {}
    },
    {
        "label": "test_rescale_action",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_rescale_action",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_rescale_action",
        "peekOfCode": "def test_rescale_action():\n    env = gym.make(\"CartPole-v1\")\n    with pytest.raises(AssertionError):\n        env = RescaleAction(env, -1, 1)\n    del env\n    env = gym.make(\"Pendulum-v1\")\n    wrapped_env = RescaleAction(gym.make(\"Pendulum-v1\"), -1, 1)\n    seed = 0\n    obs = env.reset(seed=seed)\n    wrapped_obs = wrapped_env.reset(seed=seed)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_rescale_action",
        "documentation": {}
    },
    {
        "label": "test_resize_observation",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_resize_observation",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_resize_observation",
        "peekOfCode": "def test_resize_observation(env_id, shape):\n    env = gym.make(env_id)\n    env = ResizeObservation(env, shape)\n    assert env.observation_space.shape[-1] == 3\n    obs = env.reset()\n    if isinstance(shape, int):\n        assert env.observation_space.shape[:2] == (shape, shape)\n        assert obs.shape == (shape, shape, 3)\n    else:\n        assert env.observation_space.shape[:2] == tuple(shape)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_resize_observation",
        "documentation": {}
    },
    {
        "label": "test_time_aware_observation",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_time_aware_observation",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_time_aware_observation",
        "peekOfCode": "def test_time_aware_observation(env_id):\n    env = gym.make(env_id)\n    wrapped_env = TimeAwareObservation(env)\n    assert wrapped_env.observation_space.shape[0] == env.observation_space.shape[0] + 1\n    obs = env.reset()\n    wrapped_obs = wrapped_env.reset()\n    assert wrapped_env.t == 0.0\n    assert wrapped_obs[-1] == 0.0\n    assert wrapped_obs.shape[0] == obs.shape[0] + 1\n    wrapped_obs, _, _, _ = wrapped_env.step(env.action_space.sample())",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_time_aware_observation",
        "documentation": {}
    },
    {
        "label": "test_time_limit_reset_info",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_time_limit",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_time_limit",
        "peekOfCode": "def test_time_limit_reset_info():\n    env = gym.make(\"CartPole-v1\")\n    env = TimeLimit(env)\n    ob_space = env.observation_space\n    obs = env.reset()\n    assert ob_space.contains(obs)\n    del obs\n    obs = env.reset(return_info=False)\n    assert ob_space.contains(obs)\n    del obs",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_time_limit",
        "documentation": {}
    },
    {
        "label": "test_transform_observation",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_transform_observation",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_transform_observation",
        "peekOfCode": "def test_transform_observation(env_id):\n    def affine_transform(x):\n        return 3 * x + 2\n    env = gym.make(env_id)\n    wrapped_env = TransformObservation(\n        gym.make(env_id), lambda obs: affine_transform(obs)\n    )\n    obs = env.reset(seed=0)\n    wrapped_obs = wrapped_env.reset(seed=0)\n    assert np.allclose(wrapped_obs, affine_transform(obs))",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_transform_observation",
        "documentation": {}
    },
    {
        "label": "test_transform_reward",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_transform_reward",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_transform_reward",
        "peekOfCode": "def test_transform_reward(env_id):\n    # use case #1: scale\n    scales = [0.1, 200]\n    for scale in scales:\n        env = gym.make(env_id)\n        wrapped_env = TransformReward(gym.make(env_id), lambda r: scale * r)\n        action = env.action_space.sample()\n        env.reset(seed=0)\n        wrapped_env.reset(seed=0)\n        _, reward, _, _ = env.step(action)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_transform_reward",
        "documentation": {}
    },
    {
        "label": "BrokenRecordableEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "peekOfCode": "class BrokenRecordableEnv:\n    metadata = {\"render_modes\": [None, \"rgb_array\"]}\n    def render(self, mode=None):\n        pass\nclass UnrecordableEnv:\n    metadata = {\"render_modes\": [None]}\n    def render(self, mode=None):\n        pass\ndef test_record_simple():\n    env = gym.make(\"CartPole-v1\")",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "documentation": {}
    },
    {
        "label": "UnrecordableEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "peekOfCode": "class UnrecordableEnv:\n    metadata = {\"render_modes\": [None]}\n    def render(self, mode=None):\n        pass\ndef test_record_simple():\n    env = gym.make(\"CartPole-v1\")\n    rec = VideoRecorder(env)\n    env.reset()\n    rec.capture_frame()\n    proc = rec.encoder.proc",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "documentation": {}
    },
    {
        "label": "test_record_simple",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "peekOfCode": "def test_record_simple():\n    env = gym.make(\"CartPole-v1\")\n    rec = VideoRecorder(env)\n    env.reset()\n    rec.capture_frame()\n    proc = rec.encoder.proc\n    assert proc.poll() is None  # subprocess is running\n    rec.close()\n    assert proc.poll() is not None  # subprocess is terminated\n    assert not rec.empty",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "documentation": {}
    },
    {
        "label": "test_autoclose",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "peekOfCode": "def test_autoclose():\n    def record():\n        env = gym.make(\"CartPole-v1\")\n        rec = VideoRecorder(env)\n        env.reset()\n        rec.capture_frame()\n        rec_path = rec.path\n        proc = rec.encoder.proc\n        assert proc.poll() is None  # subprocess is running\n        # The function ends without an explicit `rec.close()` call",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "documentation": {}
    },
    {
        "label": "test_no_frames",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "peekOfCode": "def test_no_frames():\n    env = BrokenRecordableEnv()\n    rec = VideoRecorder(env)\n    rec.close()\n    assert rec.empty\n    assert rec.functional\n    assert not os.path.exists(rec.path)\ndef test_record_unrecordable_method():\n    env = UnrecordableEnv()\n    rec = VideoRecorder(env)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "documentation": {}
    },
    {
        "label": "test_record_unrecordable_method",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "peekOfCode": "def test_record_unrecordable_method():\n    env = UnrecordableEnv()\n    rec = VideoRecorder(env)\n    assert not rec.enabled\n    rec.close()\n@pytest.mark.filterwarnings(\"ignore:.*Env returned None on render.*\")\ndef test_record_breaking_render_method():\n    env = BrokenRecordableEnv()\n    rec = VideoRecorder(env)\n    rec.capture_frame()",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "documentation": {}
    },
    {
        "label": "test_record_breaking_render_method",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "peekOfCode": "def test_record_breaking_render_method():\n    env = BrokenRecordableEnv()\n    rec = VideoRecorder(env)\n    rec.capture_frame()\n    rec.close()\n    assert rec.empty\n    assert rec.broken\n    assert not os.path.exists(rec.path)\ndef test_text_envs():\n    env = gym.make(\"FrozenLake-v1\")",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "documentation": {}
    },
    {
        "label": "test_text_envs",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "description": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "peekOfCode": "def test_text_envs():\n    env = gym.make(\"FrozenLake-v1\")\n    video = VideoRecorder(env)\n    try:\n        env.reset()\n        video.capture_frame()\n        video.close()\n    finally:\n        os.remove(video.path)",
        "detail": "repos_that_could_be_useful.gym.tests.wrappers.test_video_recorder",
        "documentation": {}
    },
    {
        "label": "ArgumentEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.test_core",
        "description": "repos_that_could_be_useful.gym.tests.test_core",
        "peekOfCode": "class ArgumentEnv(core.Env):\n    calls = 0\n    def __init__(self, arg):\n        self.calls += 1\n        self.arg = arg\nclass UnittestEnv(core.Env):\n    observation_space = spaces.Box(low=0, high=255, shape=(64, 64, 3), dtype=np.uint8)\n    action_space = spaces.Discrete(3)\n    def reset(self, *, seed: Optional[int] = None, options: Optional[dict] = None):\n        super().reset(seed=seed)",
        "detail": "repos_that_could_be_useful.gym.tests.test_core",
        "documentation": {}
    },
    {
        "label": "UnittestEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.test_core",
        "description": "repos_that_could_be_useful.gym.tests.test_core",
        "peekOfCode": "class UnittestEnv(core.Env):\n    observation_space = spaces.Box(low=0, high=255, shape=(64, 64, 3), dtype=np.uint8)\n    action_space = spaces.Discrete(3)\n    def reset(self, *, seed: Optional[int] = None, options: Optional[dict] = None):\n        super().reset(seed=seed)\n        return self.observation_space.sample()  # Dummy observation\n    def step(self, action):\n        observation = self.observation_space.sample()  # Dummy observation\n        return (observation, 0.0, False, {})\nclass UnknownSpacesEnv(core.Env):",
        "detail": "repos_that_could_be_useful.gym.tests.test_core",
        "documentation": {}
    },
    {
        "label": "UnknownSpacesEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.test_core",
        "description": "repos_that_could_be_useful.gym.tests.test_core",
        "peekOfCode": "class UnknownSpacesEnv(core.Env):\n    \"\"\"This environment defines its observation & action spaces only\n    after the first call to reset. Although this pattern is sometimes\n    necessary when implementing a new environment (e.g. if it depends\n    on external resources), it is not encouraged.\n    \"\"\"\n    def reset(\n        self,\n        *,\n        seed: Optional[int] = None,",
        "detail": "repos_that_could_be_useful.gym.tests.test_core",
        "documentation": {}
    },
    {
        "label": "OldStyleEnv",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.test_core",
        "description": "repos_that_could_be_useful.gym.tests.test_core",
        "peekOfCode": "class OldStyleEnv(core.Env):\n    \"\"\"This environment doesn't accept any arguments in reset, ideally we want to support this too (for now)\"\"\"\n    def __init__(self):\n        pass\n    def reset(self):\n        super().reset()\n        return 0\n    def step(self, action):\n        return 0, 0, False, {}\nclass NewPropertyWrapper(core.Wrapper):",
        "detail": "repos_that_could_be_useful.gym.tests.test_core",
        "documentation": {}
    },
    {
        "label": "NewPropertyWrapper",
        "kind": 6,
        "importPath": "repos_that_could_be_useful.gym.tests.test_core",
        "description": "repos_that_could_be_useful.gym.tests.test_core",
        "peekOfCode": "class NewPropertyWrapper(core.Wrapper):\n    def __init__(\n        self,\n        env,\n        observation_space=None,\n        action_space=None,\n        reward_range=None,\n        metadata=None,\n    ):\n        super().__init__(env)",
        "detail": "repos_that_could_be_useful.gym.tests.test_core",
        "documentation": {}
    },
    {
        "label": "test_env_instantiation",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.test_core",
        "description": "repos_that_could_be_useful.gym.tests.test_core",
        "peekOfCode": "def test_env_instantiation():\n    # This looks like a pretty trivial, but given our usage of\n    # __new__, it's worth having.\n    env = ArgumentEnv(\"arg\")\n    assert env.arg == \"arg\"\n    assert env.calls == 1\nproperties = [\n    {\n        \"observation_space\": spaces.Box(\n            low=0.0, high=1.0, shape=(64, 64, 3), dtype=np.float32",
        "detail": "repos_that_could_be_useful.gym.tests.test_core",
        "documentation": {}
    },
    {
        "label": "test_wrapper_property_forwarding",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.test_core",
        "description": "repos_that_could_be_useful.gym.tests.test_core",
        "peekOfCode": "def test_wrapper_property_forwarding(class_, props):\n    env = class_()\n    env = NewPropertyWrapper(env, **props)\n    # If UnknownSpacesEnv, then call reset to define the spaces\n    if isinstance(env.unwrapped, UnknownSpacesEnv):\n        _ = env.reset()\n    # Test the properties set by the wrapper\n    for key, value in props.items():\n        assert getattr(env, key) == value\n    # Otherwise, test if the properties are forwarded",
        "detail": "repos_that_could_be_useful.gym.tests.test_core",
        "documentation": {}
    },
    {
        "label": "test_compatibility_with_old_style_env",
        "kind": 2,
        "importPath": "repos_that_could_be_useful.gym.tests.test_core",
        "description": "repos_that_could_be_useful.gym.tests.test_core",
        "peekOfCode": "def test_compatibility_with_old_style_env():\n    env = OldStyleEnv()\n    env = OrderEnforcing(env)\n    env = TimeLimit(env)\n    obs = env.reset()\n    assert obs == 0",
        "detail": "repos_that_could_be_useful.gym.tests.test_core",
        "documentation": {}
    },
    {
        "label": "properties",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.tests.test_core",
        "description": "repos_that_could_be_useful.gym.tests.test_core",
        "peekOfCode": "properties = [\n    {\n        \"observation_space\": spaces.Box(\n            low=0.0, high=1.0, shape=(64, 64, 3), dtype=np.float32\n        )\n    },\n    {\"action_space\": spaces.Discrete(2)},\n    {\"reward_range\": (-1.0, 1.0)},\n    {\"metadata\": {\"render_modes\": [\"human\", \"rgb_array\"]}},\n    {",
        "detail": "repos_that_could_be_useful.gym.tests.test_core",
        "documentation": {}
    },
    {
        "label": "extras",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.setup",
        "description": "repos_that_could_be_useful.gym.setup",
        "peekOfCode": "extras = {\n    \"atari\": [\"ale-py~=0.7.4\"],\n    \"accept-rom-license\": [\"autorom[accept-rom-license]~=0.4.2\"],\n    \"box2d\": [\"box2d-py==2.3.5\", \"pygame==2.1.0\"],\n    \"classic_control\": [\"pygame==2.1.0\"],\n    \"mujoco\": [\"mujoco_py>=1.50, <2.0\"],\n    \"toy_text\": [\"pygame==2.1.0\", \"scipy>=1.4.1\"],\n    \"other\": [\"lz4>=3.1.0\", \"opencv-python>=3.0\"],\n}\n# Meta dependency groups.",
        "detail": "repos_that_could_be_useful.gym.setup",
        "documentation": {}
    },
    {
        "label": "nomujoco_blacklist",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.setup",
        "description": "repos_that_could_be_useful.gym.setup",
        "peekOfCode": "nomujoco_blacklist = {\"mujoco\", \"accept-rom-license\", \"atari\"}\nnomujoco_groups = set(extras.keys()) - nomujoco_blacklist\nextras[\"nomujoco\"] = list(\n    itertools.chain.from_iterable(map(lambda group: extras[group], nomujoco_groups))\n)\nall_blacklist = {\"accept-rom-license\"}\nall_groups = set(extras.keys()) - all_blacklist\nextras[\"all\"] = list(\n    itertools.chain.from_iterable(map(lambda group: extras[group], all_groups))\n)",
        "detail": "repos_that_could_be_useful.gym.setup",
        "documentation": {}
    },
    {
        "label": "nomujoco_groups",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.setup",
        "description": "repos_that_could_be_useful.gym.setup",
        "peekOfCode": "nomujoco_groups = set(extras.keys()) - nomujoco_blacklist\nextras[\"nomujoco\"] = list(\n    itertools.chain.from_iterable(map(lambda group: extras[group], nomujoco_groups))\n)\nall_blacklist = {\"accept-rom-license\"}\nall_groups = set(extras.keys()) - all_blacklist\nextras[\"all\"] = list(\n    itertools.chain.from_iterable(map(lambda group: extras[group], all_groups))\n)\nsetup(",
        "detail": "repos_that_could_be_useful.gym.setup",
        "documentation": {}
    },
    {
        "label": "extras[\"nomujoco\"]",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.setup",
        "description": "repos_that_could_be_useful.gym.setup",
        "peekOfCode": "extras[\"nomujoco\"] = list(\n    itertools.chain.from_iterable(map(lambda group: extras[group], nomujoco_groups))\n)\nall_blacklist = {\"accept-rom-license\"}\nall_groups = set(extras.keys()) - all_blacklist\nextras[\"all\"] = list(\n    itertools.chain.from_iterable(map(lambda group: extras[group], all_groups))\n)\nsetup(\n    name=\"gym\",",
        "detail": "repos_that_could_be_useful.gym.setup",
        "documentation": {}
    },
    {
        "label": "all_blacklist",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.setup",
        "description": "repos_that_could_be_useful.gym.setup",
        "peekOfCode": "all_blacklist = {\"accept-rom-license\"}\nall_groups = set(extras.keys()) - all_blacklist\nextras[\"all\"] = list(\n    itertools.chain.from_iterable(map(lambda group: extras[group], all_groups))\n)\nsetup(\n    name=\"gym\",\n    version=VERSION,\n    description=\"Gym: A universal API for reinforcement learning environments\",\n    url=\"https://www.gymlibrary.ml/\",",
        "detail": "repos_that_could_be_useful.gym.setup",
        "documentation": {}
    },
    {
        "label": "all_groups",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.setup",
        "description": "repos_that_could_be_useful.gym.setup",
        "peekOfCode": "all_groups = set(extras.keys()) - all_blacklist\nextras[\"all\"] = list(\n    itertools.chain.from_iterable(map(lambda group: extras[group], all_groups))\n)\nsetup(\n    name=\"gym\",\n    version=VERSION,\n    description=\"Gym: A universal API for reinforcement learning environments\",\n    url=\"https://www.gymlibrary.ml/\",\n    author=\"Gym Community\",",
        "detail": "repos_that_could_be_useful.gym.setup",
        "documentation": {}
    },
    {
        "label": "extras[\"all\"]",
        "kind": 5,
        "importPath": "repos_that_could_be_useful.gym.setup",
        "description": "repos_that_could_be_useful.gym.setup",
        "peekOfCode": "extras[\"all\"] = list(\n    itertools.chain.from_iterable(map(lambda group: extras[group], all_groups))\n)\nsetup(\n    name=\"gym\",\n    version=VERSION,\n    description=\"Gym: A universal API for reinforcement learning environments\",\n    url=\"https://www.gymlibrary.ml/\",\n    author=\"Gym Community\",\n    author_email=\"jkterry@umd.edu\",",
        "detail": "repos_that_could_be_useful.gym.setup",
        "documentation": {}
    },
    {
        "label": "ObservationSpace",
        "kind": 6,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "class ObservationSpace:\n  Game_Area = [[0,0,0,0,0],\n                [0,0,0,0,0],\n                [0,0,1,0,0],\n                [0,0,0,0,0],\n                [0,0,0,0,0]]\n  Game_Name = \"GnomansLand\"\n  #Constructor\n  def __init__(self,Game_Name):\n      \"\"\"INITIALIZER",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "width = 800\nheight = 400\nscreen = pygame.display.set_mode((width,height)) # must be tuple\npygame.display.set_caption(\"Gnoman's Land\")\n#frame rate\n#maximum frame rate with clock\nclock = pygame.time.Clock() # capital c is important here\nw = 100\nh = 200\n#this creates a surface (unattached)",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "height = 400\nscreen = pygame.display.set_mode((width,height)) # must be tuple\npygame.display.set_caption(\"Gnoman's Land\")\n#frame rate\n#maximum frame rate with clock\nclock = pygame.time.Clock() # capital c is important here\nw = 100\nh = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "screen = pygame.display.set_mode((width,height)) # must be tuple\npygame.display.set_caption(\"Gnoman's Land\")\n#frame rate\n#maximum frame rate with clock\nclock = pygame.time.Clock() # capital c is important here\nw = 100\nh = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "clock = pygame.time.Clock() # capital c is important here\nw = 100\nh = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "w = 100\nh = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window\n      pygame.quit() # opposite of pygame.init... once this is run we cannot display anything else anymore",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "h = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window\n      pygame.quit() # opposite of pygame.init... once this is run we cannot display anything else anymore\n      exit() # will exit the while true loop and not hit line 59",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "test_surface",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "test_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window\n      pygame.quit() # opposite of pygame.init... once this is run we cannot display anything else anymore\n      exit() # will exit the while true loop and not hit line 59\n  position = (0,0)\n  screen.blit(test_surface,position)",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "#!test_surface",
        "kind": 5,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window\n      pygame.quit() # opposite of pygame.init... once this is run we cannot display anything else anymore\n      exit() # will exit the while true loop and not hit line 59\n  position = (0,0)\n  screen.blit(test_surface,position)\n  #will run forever",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "Agent",
        "kind": 6,
        "importPath": "src.gnome_basic",
        "description": "src.gnome_basic",
        "peekOfCode": "class Agent:\n    voice = \"Hey... I'm Greg...\" # an example of something the agent could say.\n    health = 100 # setting their initial health to 100.\n    mood = 0 # the agent has absolutely no mood at all when they are born.\n    interest = 0 # starts with no interest at all in features within his/her/their action space.\n    strength = 50 # ranges from 1 to 100 and will change based on interactions with environment.\n    agent_name = \"Greg\" # the name of the agent (will change)\n    xlocation = 2 # ranges\n    # call gamearea len(gamearea)//2 gives the central point if it is an odd number of cols or rows\n    ylocation = 2 # ranges",
        "detail": "src.gnome_basic",
        "documentation": {}
    },
    {
        "label": "Pet",
        "kind": 6,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "class Pet:\n    '''Docstring'''\n    def __init__(self, name: str, animal: str):\n        '''Docstring'''\n        self.name = name\n        self.animal = animal\n    def who_am_i(self: \"Pet\") -> None:\n        '''Docstring'''\n        print(\"\\n\"+self.name+\" is a \"+self.animal+\"\\n\\n\")\npet1: Pet = Pet(\"Scooby\", \"Dog\")",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "src.rules_and_requirements",
        "description": "src.rules_and_requirements",
        "peekOfCode": "class State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False\n        self.determine = DETERMINISTIC\n    def giveReward(self):\n        if self.state == WIN_STATE:\n            return 1",
        "detail": "src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "Agent",
        "kind": 6,
        "importPath": "src.rules_and_requirements",
        "description": "src.rules_and_requirements",
        "peekOfCode": "class Agent:\n    def __init__(self):\n        self.states = []\n        self.actions = [\"up\", \"down\", \"left\", \"right\"]\n        self.State = State()\n        self.lr = 0.2\n        self.exp_rate = 0.3\n        # initial state reward\n        self.state_values = {}\n        for i in range(BOARD_ROWS):",
        "detail": "src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "BOARD_ROWS",
        "kind": 5,
        "importPath": "src.rules_and_requirements",
        "description": "src.rules_and_requirements",
        "peekOfCode": "BOARD_ROWS = 100\nBOARD_COLS = 100\nWIN_STATE = (27, 26)\nLOSE_STATE = (27, 25)\nSTART = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1",
        "detail": "src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "BOARD_COLS",
        "kind": 5,
        "importPath": "src.rules_and_requirements",
        "description": "src.rules_and_requirements",
        "peekOfCode": "BOARD_COLS = 100\nWIN_STATE = (27, 26)\nLOSE_STATE = (27, 25)\nSTART = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state",
        "detail": "src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "WIN_STATE",
        "kind": 5,
        "importPath": "src.rules_and_requirements",
        "description": "src.rules_and_requirements",
        "peekOfCode": "WIN_STATE = (27, 26)\nLOSE_STATE = (27, 25)\nSTART = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False",
        "detail": "src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "LOSE_STATE",
        "kind": 5,
        "importPath": "src.rules_and_requirements",
        "description": "src.rules_and_requirements",
        "peekOfCode": "LOSE_STATE = (27, 25)\nSTART = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False\n        self.determine = DETERMINISTIC",
        "detail": "src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "START",
        "kind": 5,
        "importPath": "src.rules_and_requirements",
        "description": "src.rules_and_requirements",
        "peekOfCode": "START = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False\n        self.determine = DETERMINISTIC\n    def giveReward(self):",
        "detail": "src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "DETERMINISTIC",
        "kind": 5,
        "importPath": "src.rules_and_requirements",
        "description": "src.rules_and_requirements",
        "peekOfCode": "DETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False\n        self.determine = DETERMINISTIC\n    def giveReward(self):\n        if self.state == WIN_STATE:",
        "detail": "src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "tests.test_sth",
        "description": "tests.test_sth",
        "peekOfCode": "class MyClass:\n    x = 5\np1: MyClass = MyClass()\nprint(p1.x)\n#\nx: int = 1\ndef test_1() -> None:\n    assert 1 == 1\ndef test_2() -> None:\n    assert demo_variable_imported_from_module == \"Hello! I come from the module 'module_example.py'\"",
        "detail": "tests.test_sth",
        "documentation": {}
    },
    {
        "label": "test_1",
        "kind": 2,
        "importPath": "tests.test_sth",
        "description": "tests.test_sth",
        "peekOfCode": "def test_1() -> None:\n    assert 1 == 1\ndef test_2() -> None:\n    assert demo_variable_imported_from_module == \"Hello! I come from the module 'module_example.py'\"",
        "detail": "tests.test_sth",
        "documentation": {}
    },
    {
        "label": "test_2",
        "kind": 2,
        "importPath": "tests.test_sth",
        "description": "tests.test_sth",
        "peekOfCode": "def test_2() -> None:\n    assert demo_variable_imported_from_module == \"Hello! I come from the module 'module_example.py'\"",
        "detail": "tests.test_sth",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 5,
        "importPath": "delete",
        "description": "delete",
        "peekOfCode": "delete = '/Users/grahamwaters/opt/anaconda3/envs/GnomansLand/lib/python3.9/site-packages/mlagents/trainers/settings.py'",
        "detail": "delete",
        "documentation": {}
    }
]