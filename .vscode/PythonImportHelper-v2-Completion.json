[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "exit",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "gnome_name",
        "importPath": "gnome_basic",
        "description": "gnome_basic",
        "isExtraImport": true,
        "detail": "gnome_basic",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "demo_variable_imported_from_module",
        "importPath": "module_example",
        "description": "module_example",
        "isExtraImport": true,
        "detail": "module_example",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "get_reward",
        "importPath": "src.policies",
        "description": "src.policies",
        "isExtraImport": true,
        "detail": "src.policies",
        "documentation": {}
    },
    {
        "label": "Gnome",
        "importPath": "gnome",
        "description": "gnome",
        "isExtraImport": true,
        "detail": "gnome",
        "documentation": {}
    },
    {
        "label": "Gnome",
        "importPath": "gnome",
        "description": "gnome",
        "isExtraImport": true,
        "detail": "gnome",
        "documentation": {}
    },
    {
        "label": "Environment",
        "importPath": "environment",
        "description": "environment",
        "isExtraImport": true,
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "Environment",
        "importPath": "environment",
        "description": "environment",
        "isExtraImport": true,
        "detail": "environment",
        "documentation": {}
    },
    {
        "label": "get_reward",
        "importPath": "policies",
        "description": "policies",
        "isExtraImport": true,
        "detail": "policies",
        "documentation": {}
    },
    {
        "label": "get_reward",
        "importPath": "policies",
        "description": "policies",
        "isExtraImport": true,
        "detail": "policies",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "game",
        "description": "game",
        "isExtraImport": true,
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "ObservationSpace",
        "kind": 6,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "class ObservationSpace:\n  Game_Area = [[0,0,0,0,0],\n                [0,0,0,0,0],\n                [0,0,1,0,0],\n                [0,0,0,0,0],\n                [0,0,0,0,0]]\n  Game_Name = \"GnomansLand\"\n  #Constructor\n  def __init__(self,Game_Name):\n      \"\"\"INITIALIZER",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "width = 800\nheight = 400\nscreen = pygame.display.set_mode((width,height)) # must be tuple\npygame.display.set_caption(\"Gnoman's Land\")\n#frame rate\n#maximum frame rate with clock\nclock = pygame.time.Clock() # capital c is important here\nw = 100\nh = 200\n#this creates a surface (unattached)",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "height = 400\nscreen = pygame.display.set_mode((width,height)) # must be tuple\npygame.display.set_caption(\"Gnoman's Land\")\n#frame rate\n#maximum frame rate with clock\nclock = pygame.time.Clock() # capital c is important here\nw = 100\nh = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "screen = pygame.display.set_mode((width,height)) # must be tuple\npygame.display.set_caption(\"Gnoman's Land\")\n#frame rate\n#maximum frame rate with clock\nclock = pygame.time.Clock() # capital c is important here\nw = 100\nh = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "clock = pygame.time.Clock() # capital c is important here\nw = 100\nh = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "w = 100\nh = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window\n      pygame.quit() # opposite of pygame.init... once this is run we cannot display anything else anymore",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "h = 200\n#this creates a surface (unattached)\ntest_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window\n      pygame.quit() # opposite of pygame.init... once this is run we cannot display anything else anymore\n      exit() # will exit the while true loop and not hit line 59",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "test_surface",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "test_surface = pygame.image.load('graphics/background.png')\n#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window\n      pygame.quit() # opposite of pygame.init... once this is run we cannot display anything else anymore\n      exit() # will exit the while true loop and not hit line 59\n  position = (0,0)\n  screen.blit(test_surface,position)",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "#!test_surface",
        "kind": 5,
        "importPath": "old_files.src.environment",
        "description": "old_files.src.environment",
        "peekOfCode": "#!test_surface = pygame.Surface((w,h))\n#!test_surface.fill('Red')\nwhile True:\n  for event in pygame.event.get(): # gets all possible player input events\n    if event.type == pygame.QUIT: # is constant that is 1 when x on window\n      pygame.quit() # opposite of pygame.init... once this is run we cannot display anything else anymore\n      exit() # will exit the while true loop and not hit line 59\n  position = (0,0)\n  screen.blit(test_surface,position)\n  #will run forever",
        "detail": "old_files.src.environment",
        "documentation": {}
    },
    {
        "label": "Agent",
        "kind": 6,
        "importPath": "old_files.src.gnome_basic",
        "description": "old_files.src.gnome_basic",
        "peekOfCode": "class Agent:\n    voice = \"Hey... I'm Greg...\" # an example of something the agent could say.\n    health = 100 # setting their initial health to 100.\n    mood = 0 # the agent has absolutely no mood at all when they are born.\n    interest = 0 # starts with no interest at all in features within his/her/their action space.\n    strength = 50 # ranges from 1 to 100 and will change based on interactions with environment.\n    agent_name = \"Greg\" # the name of the agent (will change)\n    xlocation = 2 # ranges\n    # call gamearea len(gamearea)//2 gives the central point if it is an odd number of cols or rows\n    ylocation = 2 # ranges",
        "detail": "old_files.src.gnome_basic",
        "documentation": {}
    },
    {
        "label": "Pet",
        "kind": 6,
        "importPath": "old_files.src.main",
        "description": "old_files.src.main",
        "peekOfCode": "class Pet:\n    '''Docstring'''\n    def __init__(self, name: str, animal: str):\n        '''Docstring'''\n        self.name = name\n        self.animal = animal\n    def who_am_i(self: \"Pet\") -> None:\n        '''Docstring'''\n        print(\"\\n\"+self.name+\" is a \"+self.animal+\"\\n\\n\")\npet1: Pet = Pet(\"Scooby\", \"Dog\")",
        "detail": "old_files.src.main",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "class State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False\n        self.determine = DETERMINISTIC\n    def giveReward(self):\n        if self.state == WIN_STATE:\n            return 1",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "Agent",
        "kind": 6,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "class Agent:\n    def __init__(self):\n        self.states = []\n        self.actions = [\"up\", \"down\", \"left\", \"right\"]\n        self.State = State()\n        self.lr = 0.2\n        self.exp_rate = 0.3\n        # initial state reward\n        self.state_values = {}\n        for i in range(BOARD_ROWS):",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "BOARD_ROWS",
        "kind": 5,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "BOARD_ROWS = 100\nBOARD_COLS = 100\nWIN_STATE = (27, 26)\nLOSE_STATE = (27, 25)\nSTART = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "BOARD_COLS",
        "kind": 5,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "BOARD_COLS = 100\nWIN_STATE = (27, 26)\nLOSE_STATE = (27, 25)\nSTART = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "WIN_STATE",
        "kind": 5,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "WIN_STATE = (27, 26)\nLOSE_STATE = (27, 25)\nSTART = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "LOSE_STATE",
        "kind": 5,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "LOSE_STATE = (27, 25)\nSTART = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False\n        self.determine = DETERMINISTIC",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "START",
        "kind": 5,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "START = (0, 0)\nDETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False\n        self.determine = DETERMINISTIC\n    def giveReward(self):",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "DETERMINISTIC",
        "kind": 5,
        "importPath": "old_files.src.rules_and_requirements",
        "description": "old_files.src.rules_and_requirements",
        "peekOfCode": "DETERMINISTIC = True\nclass State:\n    def __init__(self, state=START):\n        self.board = np.zeros([BOARD_ROWS, BOARD_COLS])\n        self.board[1, 1] = -1\n        self.state = state\n        self.isEnd = False\n        self.determine = DETERMINISTIC\n    def giveReward(self):\n        if self.state == WIN_STATE:",
        "detail": "old_files.src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "old_files.tests.test_sth",
        "description": "old_files.tests.test_sth",
        "peekOfCode": "class MyClass:\n    x = 5\np1: MyClass = MyClass()\nprint(p1.x)\n#\nx: int = 1\ndef test_1() -> None:\n    assert 1 == 1\ndef test_2() -> None:\n    assert demo_variable_imported_from_module == \"Hello! I come from the module 'module_example.py'\"",
        "detail": "old_files.tests.test_sth",
        "documentation": {}
    },
    {
        "label": "test_1",
        "kind": 2,
        "importPath": "old_files.tests.test_sth",
        "description": "old_files.tests.test_sth",
        "peekOfCode": "def test_1() -> None:\n    assert 1 == 1\ndef test_2() -> None:\n    assert demo_variable_imported_from_module == \"Hello! I come from the module 'module_example.py'\"",
        "detail": "old_files.tests.test_sth",
        "documentation": {}
    },
    {
        "label": "test_2",
        "kind": 2,
        "importPath": "old_files.tests.test_sth",
        "description": "old_files.tests.test_sth",
        "peekOfCode": "def test_2() -> None:\n    assert demo_variable_imported_from_module == \"Hello! I come from the module 'module_example.py'\"",
        "detail": "old_files.tests.test_sth",
        "documentation": {}
    },
    {
        "label": "Environment",
        "kind": 6,
        "importPath": "src.environment",
        "description": "src.environment",
        "peekOfCode": "class Environment:\n    \"\"\"\n    The Environment class represents the game world and its objects and features.\n    The Environment class has the following attributes and methods:\n        width: The width of the environment, in tiles.\n        height: The height of the environment, in tiles.\n        tile_size: The size of each tile, in pixels.\n        tiles: A 2D array of tiles representing the game world.\n        __init__(): The constructor for the Environment class. This method initializes the environment with the specified width, height, and tile size, and creates an empty array of tiles.\n        create(): This method generates the tiles for the game world.",
        "detail": "src.environment",
        "documentation": {}
    },
    {
        "label": "Gnome",
        "kind": 6,
        "importPath": "src.game",
        "description": "src.game",
        "peekOfCode": "class Gnome:\n    \"\"\"\n    The Gnome class represents the gnome agent in the game.\n    The Gnome class has the following attributes and methods:\n        x: The x-coordinate of the gnome's position.\n        y: The y-coordinate of the gnome's position.\n        carrying: The type of item the gnome is currently carrying. This can be None if the gnome is not carrying any items.\n        __init__(): The constructor for the Gnome class. This method initializes the gnome with a starting position and sets carrying to None.\n        move(): This method moves the gnome to a new position in the game world.\n        act(): This method is called when the gnome needs to take an action in the game world, such as moving or picking up an item.",
        "detail": "src.game",
        "documentation": {}
    },
    {
        "label": "Agent",
        "kind": 6,
        "importPath": "src.game",
        "description": "src.game",
        "peekOfCode": "class Agent:\n    \"\"\"\n    The Agent class represents an agent that uses reinforcement learning to learn a policy for the gnome to follow.\n    The Agent class has the following attributes and methods:\n        policy: A dictionary that maps state-action pairs to probabilities of taking the action in the state.\n        alpha: The learning rate used in the learning algorithm.\n        gamma: The discount factor used in the learning algorithm.\n        epsilon: The exploration rate used in the learning algorithm.\n        __init__(): The constructor for the Agent class. This method initializes the agent with default values for the policy, learning rate, discount factor, and exploration rate.\n        act(): This method is called when the agent needs to take an action in the environment. It uses the learned policy to determine the action to take.",
        "detail": "src.game",
        "documentation": {}
    },
    {
        "label": "Environment",
        "kind": 6,
        "importPath": "src.game",
        "description": "src.game",
        "peekOfCode": "class Environment:\n    \"\"\"\n    The Environment class represents the game world and its objects and features.\n    The Environment class has the following attributes and methods:\n        width: The width of the environment, in tiles.\n        height: The height of the environment, in tiles.\n        tile_size: The size of each tile, in pixels.\n        tiles: A 2D array of tiles representing the game world.\n        __init__(): The constructor for the Environment class. This method initializes the environment with the specified width, height, and tile size, and creates an empty array of tiles.\n        create(): This method generates the tiles for the game world.",
        "detail": "src.game",
        "documentation": {}
    },
    {
        "label": "Policies",
        "kind": 6,
        "importPath": "src.game",
        "description": "src.game",
        "peekOfCode": "class Policies:\n    def __init__(self):\n        pass\n    def get_reward(self, state: np.ndarray, action: int):\n        if action == 0:  # move left\n            if state[0, 1] == 2:  # water\n                return -1.0\n            elif state[0, 1] == 5:  # mountain\n                return -0.5\n            else:",
        "detail": "src.game",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "src.game",
        "description": "src.game",
        "peekOfCode": "class Game:\n    def __init__(self, environment: Environment, gnome: Gnome):\n        self.environment = environment\n        self.gnome = gnome\n        self.tile_size = 32  # the size of each tile, in pixels\n        self.is_done = False  # when the game is over, set this to True\n    def take_action(\n        self, state: np.ndarray, action: int\n    ):  #  -> Tuple[np.ndarray, int, bool, List[int]]:\n        \"\"\"",
        "detail": "src.game",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.game",
        "description": "src.game",
        "peekOfCode": "def main():\n    width = 10\n    height = 10\n    tile_size = 32\n    # Create an empty environment array.\n    gnome = Gnome(0, 0)\n    environment = Environment(width, height, tile_size, gnome)\n    # Create a new Game object and pass in the environment and gnome objects.\n    game = Game(environment, gnome)\n    # Reset the game state.",
        "detail": "src.game",
        "documentation": {}
    },
    {
        "label": "main2",
        "kind": 2,
        "importPath": "src.game",
        "description": "src.game",
        "peekOfCode": "def main2():\n    # Create a game object.\n    game = Game()\n    # Create a screen with the specified dimensions.\n    screen = pygame.display.set_mode((game.width * tile_size, game.height * tile_size))\n    # Create the environment and gnome objects.\n    environment = game.create_environment()\n    gnome = game.create_gnome()\n    # Set the initial state of the environment.\n    state = environment.get_state()",
        "detail": "src.game",
        "documentation": {}
    },
    {
        "label": "screen_width",
        "kind": 5,
        "importPath": "src.game",
        "description": "src.game",
        "peekOfCode": "screen_width = 800\nscreen_height = 600\n# Create the game world.\ntile_size = 32\nclass Gnome:\n    \"\"\"\n    The Gnome class represents the gnome agent in the game.\n    The Gnome class has the following attributes and methods:\n        x: The x-coordinate of the gnome's position.\n        y: The y-coordinate of the gnome's position.",
        "detail": "src.game",
        "documentation": {}
    },
    {
        "label": "screen_height",
        "kind": 5,
        "importPath": "src.game",
        "description": "src.game",
        "peekOfCode": "screen_height = 600\n# Create the game world.\ntile_size = 32\nclass Gnome:\n    \"\"\"\n    The Gnome class represents the gnome agent in the game.\n    The Gnome class has the following attributes and methods:\n        x: The x-coordinate of the gnome's position.\n        y: The y-coordinate of the gnome's position.\n        carrying: The type of item the gnome is currently carrying. This can be None if the gnome is not carrying any items.",
        "detail": "src.game",
        "documentation": {}
    },
    {
        "label": "tile_size",
        "kind": 5,
        "importPath": "src.game",
        "description": "src.game",
        "peekOfCode": "tile_size = 32\nclass Gnome:\n    \"\"\"\n    The Gnome class represents the gnome agent in the game.\n    The Gnome class has the following attributes and methods:\n        x: The x-coordinate of the gnome's position.\n        y: The y-coordinate of the gnome's position.\n        carrying: The type of item the gnome is currently carrying. This can be None if the gnome is not carrying any items.\n        __init__(): The constructor for the Gnome class. This method initializes the gnome with a starting position and sets carrying to None.\n        move(): This method moves the gnome to a new position in the game world.",
        "detail": "src.game",
        "documentation": {}
    },
    {
        "label": "Gnome",
        "kind": 6,
        "importPath": "src.gnome",
        "description": "src.gnome",
        "peekOfCode": "class Gnome:\n    \"\"\"\n        The Gnome class represents the gnome agent in the game.\n        The Gnome class has the following attributes and methods:\n            x: The x-coordinate of the gnome's position.\n            y: The y-coordinate of the gnome's position.\n            carrying: The type of item the gnome is currently carrying. This can be None if the gnome is not carrying any items.\n            __init__(): The constructor for the Gnome class. This method initializes the gnome with a starting position and sets carrying to None.\n            move(): This method moves the gnome to a new position in the game world.\n            act(): This method is called when the gnome needs to take an action in the game world, such as moving or picking up an item.",
        "detail": "src.gnome",
        "documentation": {}
    },
    {
        "label": "environment",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "environment = Environment(10, 10, 64) # 10x10 tiles, each 64x64 pixels\n# Create the gnome.\ngnome = Gnome(0, 0) # start at the top-left corner of the environment\n# Create the game.\ngame = Game(environment, gnome)\n# Run the game.\ngame.run()",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "gnome",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "gnome = Gnome(0, 0) # start at the top-left corner of the environment\n# Create the game.\ngame = Game(environment, gnome)\n# Run the game.\ngame.run()",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "game",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "game = Game(environment, gnome)\n# Run the game.\ngame.run()",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "get_reward",
        "kind": 2,
        "importPath": "src.policies",
        "description": "src.policies",
        "peekOfCode": "def get_reward(state: np.ndarray, action: int) -> float:\n    if action == 0:  # move left\n        if state[0, 1] == 2:  # water\n            return -1.0\n        elif state[0, 1] == 5:  # mountain\n            return -0.5\n        else:\n            return 0.0\n    elif action == 1:  # move right\n        if state[0, 1] == 2:  # water",
        "detail": "src.policies",
        "documentation": {}
    },
    {
        "label": "environment",
        "kind": 5,
        "importPath": "src.rules_and_requirements",
        "description": "src.rules_and_requirements",
        "peekOfCode": "environment = Environment(10, 10, 64) # 10x10 tiles, each 64x64 pixels\n# Create the gnome.\ngnome = Gnome(0, 0) # start at the top-left corner of the environment\n# Create the game window.\npygame.init()\n# Set the window title.\npygame.display.set_caption(\"Gnome's Land\")\n# Create the screen surface.\nscreen = pygame.display.set_mode((environment.width * environment.tile_size, environment.height * environment.tile_size))\n# Create a clock to control the game's framerate.",
        "detail": "src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "gnome",
        "kind": 5,
        "importPath": "src.rules_and_requirements",
        "description": "src.rules_and_requirements",
        "peekOfCode": "gnome = Gnome(0, 0) # start at the top-left corner of the environment\n# Create the game window.\npygame.init()\n# Set the window title.\npygame.display.set_caption(\"Gnome's Land\")\n# Create the screen surface.\nscreen = pygame.display.set_mode((environment.width * environment.tile_size, environment.height * environment.tile_size))\n# Create a clock to control the game's framerate.\nclock = pygame.time.Clock()",
        "detail": "src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "src.rules_and_requirements",
        "description": "src.rules_and_requirements",
        "peekOfCode": "screen = pygame.display.set_mode((environment.width * environment.tile_size, environment.height * environment.tile_size))\n# Create a clock to control the game's framerate.\nclock = pygame.time.Clock()",
        "detail": "src.rules_and_requirements",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "src.rules_and_requirements",
        "description": "src.rules_and_requirements",
        "peekOfCode": "clock = pygame.time.Clock()",
        "detail": "src.rules_and_requirements",
        "documentation": {}
    }
]